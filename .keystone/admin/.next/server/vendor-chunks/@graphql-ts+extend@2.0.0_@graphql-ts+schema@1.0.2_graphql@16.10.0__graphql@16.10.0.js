"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@graphql-ts+extend@2.0.0_@graphql-ts+schema@1.0.2_graphql@16.10.0__graphql@16.10.0";
exports.ids = ["vendor-chunks/@graphql-ts+extend@2.0.0_@graphql-ts+schema@1.0.2_graphql@16.10.0__graphql@16.10.0"];
exports.modules = {

/***/ "(pages-dir-node)/../../../../node_modules/.pnpm/@graphql-ts+extend@2.0.0_@graphql-ts+schema@1.0.2_graphql@16.10.0__graphql@16.10.0/node_modules/@graphql-ts/extend/dist/graphql-ts-extend.esm.js":
/*!***************************************************************************************************************************************************************************************!*\
  !*** ../../../../node_modules/.pnpm/@graphql-ts+extend@2.0.0_@graphql-ts+schema@1.0.2_graphql@16.10.0__graphql@16.10.0/node_modules/@graphql-ts/extend/dist/graphql-ts-extend.esm.js ***!
  \***************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   extend: () => (/* binding */ extend)\n/* harmony export */ });\n/* harmony import */ var graphql__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! graphql */ \"(pages-dir-node)/../../../../node_modules/.pnpm/graphql@16.10.0/node_modules/graphql/index.js\");\n/* harmony import */ var _graphql_ts_schema__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @graphql-ts/schema */ \"(pages-dir-node)/../../../../node_modules/.pnpm/@graphql-ts+schema@1.0.2_graphql@16.10.0/node_modules/@graphql-ts/schema/dist/graphql-ts-schema.esm.js\");\n\n\n\n/**\n * An API to extend an arbitrary {@link GraphQLSchema} with `@graphql-ts/schema`.\n * Note if you're building a schema entirely with `@graphql-ts/schema`, you\n * shouldn't use this package. This is useful when you have a\n * {@link GraphQLSchema} from somewhere else and you want to some fields to\n * various places in it.\n *\n * See {@link extend} for more details.\n *\n * @module\n */\nconst builtinScalars = new Set(graphql__WEBPACK_IMPORTED_MODULE_1__.specifiedScalarTypes.map(x => x.name));\n\n/**\n * `extend` allows you to extend a {@link GraphQLSchema} with\n * `@graphql-ts/schema`.\n *\n * ```ts\n * const originalSchema = new GraphQLSchema({ ...etc });\n *\n * const extendedSchema = extend({\n *   query: {\n *     hello: g.field({\n *       type: g.String,\n *       resolve() {\n *         return \"Hello!\";\n *       },\n *     }),\n *   },\n * })(originalSchema);\n * ```\n *\n * To use existing types from the schema you're extending, you can provide a\n * function and use the {@link BaseSchemaMeta} passed into the function to use\n * existing types in the schema.\n *\n * ```ts\n * const originalSchema = new GraphQLSchema({ ...etc });\n *\n * const extendedSchema = extend((base) => ({\n *   query: {\n *     something: g.field({\n *       type: base.object(\"Something\"),\n *       resolve() {\n *         return { something: true };\n *       },\n *     }),\n *   },\n * }))(originalSchema);\n * ```\n *\n * See {@link BaseSchemaMeta} for how to get other types from the schema\n *\n * `extend` will currently throw an error if the query or mutation types are\n * used in other types like this. This will be allowed in a future version.\n *\n * ```graphql\n * type Query {\n *   thing: Query\n * }\n * ```\n */\nfunction extend(extension) {\n  return schema => {\n    const getType = name => {\n      const graphQLType = schema.getType(name);\n      if (graphQLType == null) {\n        throw new Error(`No type named ${JSON.stringify(name)} exists in the schema that is being extended`);\n      }\n      return graphQLType;\n    };\n    const resolvedExtension = flattenExtensions(typeof extension === \"function\" ? extension({\n      schema,\n      object(name) {\n        const graphQLType = getType(name);\n        if (!(0,graphql__WEBPACK_IMPORTED_MODULE_1__.isObjectType)(graphQLType)) {\n          throw new Error(`There is a type named ${JSON.stringify(name)} in the schema being extended but it is not an object type`);\n        }\n        return graphQLType;\n      },\n      inputObject(name) {\n        const graphQLType = getType(name);\n        if (!(0,graphql__WEBPACK_IMPORTED_MODULE_1__.isInputObjectType)(graphQLType)) {\n          throw new Error(`There is a type named ${JSON.stringify(name)} in the schema being extended but it is not an input object type`);\n        }\n        return graphQLType;\n      },\n      enum(name) {\n        const graphQLType = getType(name);\n        if (!(0,graphql__WEBPACK_IMPORTED_MODULE_1__.isEnumType)(graphQLType)) {\n          throw new Error(`There is a type named ${JSON.stringify(name)} in the schema being extended but it is not an enum type`);\n        }\n        return graphQLType;\n      },\n      interface(name) {\n        const graphQLType = getType(name);\n        if (!(0,graphql__WEBPACK_IMPORTED_MODULE_1__.isInterfaceType)(graphQLType)) {\n          throw new Error(`There is a type named ${JSON.stringify(name)} in the schema being extended but it is not an interface type`);\n        }\n        return graphQLType;\n      },\n      scalar(name) {\n        if (builtinScalars.has(name)) {\n          throw new Error(`The names of built-in scalars cannot be passed to BaseSchemaInfo.scalar but ${name} was passed`);\n        }\n        const graphQLType = getType(name);\n        if (!(0,graphql__WEBPACK_IMPORTED_MODULE_1__.isScalarType)(graphQLType)) {\n          throw new Error(`There is a type named ${JSON.stringify(name)} in the schema being extended but it is not a scalar type`);\n        }\n        return graphQLType;\n      },\n      union(name) {\n        const graphQLType = getType(name);\n        if (!(0,graphql__WEBPACK_IMPORTED_MODULE_1__.isUnionType)(graphQLType)) {\n          throw new Error(`There is a type named ${JSON.stringify(name)} in the schema being extended but it is not a union type`);\n        }\n        return graphQLType;\n      }\n    }) : extension);\n    const queryType = schema.getQueryType();\n    const mutationType = schema.getMutationType();\n    const typesToFind = new Set();\n    if (queryType) {\n      typesToFind.add(queryType);\n    }\n    if (mutationType) {\n      typesToFind.add(mutationType);\n    }\n    const usages = findObjectTypeUsages(schema, typesToFind);\n    if (usages.size) {\n      throw new Error(`@graphql-ts/extend doesn't yet support using the query and mutation types in other types but\\n${[...usages].map(([type, usages]) => {\n        return `- ${JSON.stringify(type)} is used at ${usages.map(x => JSON.stringify(x)).join(\", \")}`;\n      }).join(\"\\n\")}`);\n    }\n    if (!resolvedExtension.mutation && !resolvedExtension.query) {\n      return schema;\n    }\n    const newQueryType = extendObjectType(queryType, resolvedExtension.query || {}, \"Query\");\n    const newMutationType = extendObjectType(mutationType, resolvedExtension.mutation || {}, \"Mutation\");\n    const schemaConfig = schema.toConfig();\n    let types = [...(queryType || !newQueryType ? [] : [newQueryType]), ...(mutationType || !newMutationType ? [] : [newMutationType]), ...schemaConfig.types.map(type => {\n      if (newQueryType && type.name === (queryType === null || queryType === void 0 ? void 0 : queryType.name)) {\n        return newQueryType;\n      }\n      if (newMutationType && type.name === (mutationType === null || mutationType === void 0 ? void 0 : mutationType.name)) {\n        return newMutationType;\n      }\n      return type;\n    })];\n    const updatedSchema = new graphql__WEBPACK_IMPORTED_MODULE_1__.GraphQLSchema({\n      ...schemaConfig,\n      query: newQueryType,\n      mutation: newMutationType,\n      types\n    });\n    return updatedSchema;\n  };\n}\nfunction printFieldOnType(type, fieldName) {\n  const printed = (0,graphql__WEBPACK_IMPORTED_MODULE_1__.printType)(type);\n  const document = (0,graphql__WEBPACK_IMPORTED_MODULE_1__.parse)(printed);\n  const parsed = document.definitions[0];\n  const parsedField = parsed.fields.find(x => x.name.value === fieldName);\n  return (0,graphql__WEBPACK_IMPORTED_MODULE_1__.print)(parsedField);\n}\nfunction extendObjectType(existingType, fieldsToAdd, defaultName) {\n  const hasNewFields = Object.entries(fieldsToAdd).length;\n  if (!hasNewFields) {\n    return existingType;\n  }\n  const existingTypeConfig = existingType === null || existingType === void 0 ? void 0 : existingType.toConfig();\n  const newFields = {\n    ...(existingTypeConfig === null || existingTypeConfig === void 0 ? void 0 : existingTypeConfig.fields)\n  };\n  for (const [key, val] of Object.entries(fieldsToAdd)) {\n    if (newFields[key]) {\n      var _name;\n      throw new Error(`The schema extension defines a field ${JSON.stringify(key)} on the ${JSON.stringify((_name = existingType.name) !== null && _name !== void 0 ? _name : defaultName)} type but that type already defines a field with that name.\\nThe original field:\\n${printFieldOnType(existingType, key)}\\nThe field added by the extension:\\n${printFieldOnType(new graphql__WEBPACK_IMPORTED_MODULE_1__.GraphQLObjectType({\n        name: \"ForError\",\n        fields: {\n          [key]: val\n        }\n      }), key)}`);\n    }\n    newFields[key] = val;\n  }\n  return new graphql__WEBPACK_IMPORTED_MODULE_1__.GraphQLObjectType({\n    name: defaultName,\n    ...existingTypeConfig,\n    fields: newFields\n  });\n}\n\n// https://github.com/microsoft/TypeScript/issues/17002\nconst isReadonlyArray = Array.isArray;\nconst operations = [\"query\", \"mutation\"];\nfunction flattenExtensions(extensions) {\n  if (isReadonlyArray(extensions)) {\n    const resolvedExtension = {\n      mutation: {},\n      query: {}\n    };\n    for (const extension of extensions) {\n      for (const operation of operations) {\n        const fields = extension[operation];\n        if (fields) {\n          for (const [key, val] of Object.entries(fields)) {\n            if (resolvedExtension[operation][key]) {\n              throw new Error(`More than one extension defines a field named ${JSON.stringify(key)} on the ${operation} type.\\nThe first field:\\n${printFieldOnType(new _graphql_ts_schema__WEBPACK_IMPORTED_MODULE_0__.GObjectType({\n                name: \"ForError\",\n                fields: {\n                  [key]: val\n                }\n              }), key)}\\nThe second field:\\n${printFieldOnType(new _graphql_ts_schema__WEBPACK_IMPORTED_MODULE_0__.GObjectType({\n                name: \"ForError\",\n                fields: {\n                  [key]: resolvedExtension[operation][key]\n                }\n              }), key)}`);\n            }\n            resolvedExtension[operation][key] = val;\n          }\n        }\n      }\n    }\n    return resolvedExtension;\n  }\n  return extensions;\n}\n\n/**\n * Any\n *\n * Note the distinct usages of `any` vs `unknown` is intentional.\n *\n * - The `unknown` used for the source type is because the source isn't known and\n *   it shouldn't generally be used here because these fields are on the query\n *   and mutation types\n * - The first `any` used for the `Args` type parameter is used because `Args` is\n *   invariant so only `Record<string, Arg<InputType, boolean>>` would work with\n *   it. The arguable unsafety here doesn't really matter because people will\n *   always use `g.field`\n * - The `any` in `OutputType` and the last type argument mean that a field that\n *   requires any context can be provided. This is unsafe, the only way this\n *   could arguably be made more \"safe\" is by making this unknown which would\n *   requiring casting or make `extend` and etc. generic over a `Context` but\n *   given this is immediately used on an arbitrary {@link GraphQLSchema} so the\n *   type would immediately be thrown away, it would be pretty much pointless.\n */\n\n/**\n * An extension to a GraphQL schema. This currently only supports adding fields\n * to the query and mutation types. Extending other types will be supported in\n * the future.\n */\n\n/**\n * This object contains the schema being extended and functions to get GraphQL\n * types from the schema.\n */\n\nfunction findObjectTypeUsages(schema, types) {\n  const usages = new Map();\n  for (const [name, type] of Object.entries(schema.getTypeMap())) {\n    if ((0,graphql__WEBPACK_IMPORTED_MODULE_1__.isInterfaceType)(type) || (0,graphql__WEBPACK_IMPORTED_MODULE_1__.isObjectType)(type)) {\n      for (const [fieldName, field] of Object.entries(type.getFields())) {\n        const namedType = (0,graphql__WEBPACK_IMPORTED_MODULE_1__.getNamedType)(field.type);\n        if ((0,graphql__WEBPACK_IMPORTED_MODULE_1__.isObjectType)(namedType) && types.has(namedType)) {\n          getOrDefault(usages, namedType, []).push(`${name}.${fieldName}`);\n        }\n      }\n    }\n    if ((0,graphql__WEBPACK_IMPORTED_MODULE_1__.isUnionType)(type)) {\n      for (const member of type.getTypes()) {\n        if (types.has(member)) {\n          getOrDefault(usages, member, []).push(name);\n        }\n      }\n    }\n  }\n  return usages;\n}\nfunction getOrDefault(input, key, defaultValue) {\n  if (!input.has(key)) {\n    input.set(key, defaultValue);\n    return defaultValue;\n  }\n  return input.get(key);\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(pages-dir-node)/../../../../node_modules/.pnpm/@graphql-ts+extend@2.0.0_@graphql-ts+schema@1.0.2_graphql@16.10.0__graphql@16.10.0/node_modules/@graphql-ts/extend/dist/graphql-ts-extend.esm.js\n");

/***/ }),

/***/ "../../../../node_modules/.pnpm/@graphql-ts+extend@2.0.0_@graphql-ts+schema@1.0.2_graphql@16.10.0__graphql@16.10.0/node_modules/@graphql-ts/extend/dist/graphql-ts-extend.esm.js":
/*!***************************************************************************************************************************************************************************************!*\
  !*** ../../../../node_modules/.pnpm/@graphql-ts+extend@2.0.0_@graphql-ts+schema@1.0.2_graphql@16.10.0__graphql@16.10.0/node_modules/@graphql-ts/extend/dist/graphql-ts-extend.esm.js ***!
  \***************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   extend: () => (/* binding */ extend)\n/* harmony export */ });\n/* harmony import */ var graphql__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! graphql */ \"../../../../node_modules/.pnpm/graphql@16.10.0/node_modules/graphql/index.js\");\n/* harmony import */ var _graphql_ts_schema__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @graphql-ts/schema */ \"../../../../node_modules/.pnpm/@graphql-ts+schema@1.0.2_graphql@16.10.0/node_modules/@graphql-ts/schema/dist/graphql-ts-schema.esm.js\");\n\n\n\n/**\n * An API to extend an arbitrary {@link GraphQLSchema} with `@graphql-ts/schema`.\n * Note if you're building a schema entirely with `@graphql-ts/schema`, you\n * shouldn't use this package. This is useful when you have a\n * {@link GraphQLSchema} from somewhere else and you want to some fields to\n * various places in it.\n *\n * See {@link extend} for more details.\n *\n * @module\n */\nconst builtinScalars = new Set(graphql__WEBPACK_IMPORTED_MODULE_1__.specifiedScalarTypes.map(x => x.name));\n\n/**\n * `extend` allows you to extend a {@link GraphQLSchema} with\n * `@graphql-ts/schema`.\n *\n * ```ts\n * const originalSchema = new GraphQLSchema({ ...etc });\n *\n * const extendedSchema = extend({\n *   query: {\n *     hello: g.field({\n *       type: g.String,\n *       resolve() {\n *         return \"Hello!\";\n *       },\n *     }),\n *   },\n * })(originalSchema);\n * ```\n *\n * To use existing types from the schema you're extending, you can provide a\n * function and use the {@link BaseSchemaMeta} passed into the function to use\n * existing types in the schema.\n *\n * ```ts\n * const originalSchema = new GraphQLSchema({ ...etc });\n *\n * const extendedSchema = extend((base) => ({\n *   query: {\n *     something: g.field({\n *       type: base.object(\"Something\"),\n *       resolve() {\n *         return { something: true };\n *       },\n *     }),\n *   },\n * }))(originalSchema);\n * ```\n *\n * See {@link BaseSchemaMeta} for how to get other types from the schema\n *\n * `extend` will currently throw an error if the query or mutation types are\n * used in other types like this. This will be allowed in a future version.\n *\n * ```graphql\n * type Query {\n *   thing: Query\n * }\n * ```\n */\nfunction extend(extension) {\n  return schema => {\n    const getType = name => {\n      const graphQLType = schema.getType(name);\n      if (graphQLType == null) {\n        throw new Error(`No type named ${JSON.stringify(name)} exists in the schema that is being extended`);\n      }\n      return graphQLType;\n    };\n    const resolvedExtension = flattenExtensions(typeof extension === \"function\" ? extension({\n      schema,\n      object(name) {\n        const graphQLType = getType(name);\n        if (!(0,graphql__WEBPACK_IMPORTED_MODULE_1__.isObjectType)(graphQLType)) {\n          throw new Error(`There is a type named ${JSON.stringify(name)} in the schema being extended but it is not an object type`);\n        }\n        return graphQLType;\n      },\n      inputObject(name) {\n        const graphQLType = getType(name);\n        if (!(0,graphql__WEBPACK_IMPORTED_MODULE_1__.isInputObjectType)(graphQLType)) {\n          throw new Error(`There is a type named ${JSON.stringify(name)} in the schema being extended but it is not an input object type`);\n        }\n        return graphQLType;\n      },\n      enum(name) {\n        const graphQLType = getType(name);\n        if (!(0,graphql__WEBPACK_IMPORTED_MODULE_1__.isEnumType)(graphQLType)) {\n          throw new Error(`There is a type named ${JSON.stringify(name)} in the schema being extended but it is not an enum type`);\n        }\n        return graphQLType;\n      },\n      interface(name) {\n        const graphQLType = getType(name);\n        if (!(0,graphql__WEBPACK_IMPORTED_MODULE_1__.isInterfaceType)(graphQLType)) {\n          throw new Error(`There is a type named ${JSON.stringify(name)} in the schema being extended but it is not an interface type`);\n        }\n        return graphQLType;\n      },\n      scalar(name) {\n        if (builtinScalars.has(name)) {\n          throw new Error(`The names of built-in scalars cannot be passed to BaseSchemaInfo.scalar but ${name} was passed`);\n        }\n        const graphQLType = getType(name);\n        if (!(0,graphql__WEBPACK_IMPORTED_MODULE_1__.isScalarType)(graphQLType)) {\n          throw new Error(`There is a type named ${JSON.stringify(name)} in the schema being extended but it is not a scalar type`);\n        }\n        return graphQLType;\n      },\n      union(name) {\n        const graphQLType = getType(name);\n        if (!(0,graphql__WEBPACK_IMPORTED_MODULE_1__.isUnionType)(graphQLType)) {\n          throw new Error(`There is a type named ${JSON.stringify(name)} in the schema being extended but it is not a union type`);\n        }\n        return graphQLType;\n      }\n    }) : extension);\n    const queryType = schema.getQueryType();\n    const mutationType = schema.getMutationType();\n    const typesToFind = new Set();\n    if (queryType) {\n      typesToFind.add(queryType);\n    }\n    if (mutationType) {\n      typesToFind.add(mutationType);\n    }\n    const usages = findObjectTypeUsages(schema, typesToFind);\n    if (usages.size) {\n      throw new Error(`@graphql-ts/extend doesn't yet support using the query and mutation types in other types but\\n${[...usages].map(([type, usages]) => {\n        return `- ${JSON.stringify(type)} is used at ${usages.map(x => JSON.stringify(x)).join(\", \")}`;\n      }).join(\"\\n\")}`);\n    }\n    if (!resolvedExtension.mutation && !resolvedExtension.query) {\n      return schema;\n    }\n    const newQueryType = extendObjectType(queryType, resolvedExtension.query || {}, \"Query\");\n    const newMutationType = extendObjectType(mutationType, resolvedExtension.mutation || {}, \"Mutation\");\n    const schemaConfig = schema.toConfig();\n    let types = [...(queryType || !newQueryType ? [] : [newQueryType]), ...(mutationType || !newMutationType ? [] : [newMutationType]), ...schemaConfig.types.map(type => {\n      if (newQueryType && type.name === (queryType === null || queryType === void 0 ? void 0 : queryType.name)) {\n        return newQueryType;\n      }\n      if (newMutationType && type.name === (mutationType === null || mutationType === void 0 ? void 0 : mutationType.name)) {\n        return newMutationType;\n      }\n      return type;\n    })];\n    const updatedSchema = new graphql__WEBPACK_IMPORTED_MODULE_1__.GraphQLSchema({\n      ...schemaConfig,\n      query: newQueryType,\n      mutation: newMutationType,\n      types\n    });\n    return updatedSchema;\n  };\n}\nfunction printFieldOnType(type, fieldName) {\n  const printed = (0,graphql__WEBPACK_IMPORTED_MODULE_1__.printType)(type);\n  const document = (0,graphql__WEBPACK_IMPORTED_MODULE_1__.parse)(printed);\n  const parsed = document.definitions[0];\n  const parsedField = parsed.fields.find(x => x.name.value === fieldName);\n  return (0,graphql__WEBPACK_IMPORTED_MODULE_1__.print)(parsedField);\n}\nfunction extendObjectType(existingType, fieldsToAdd, defaultName) {\n  const hasNewFields = Object.entries(fieldsToAdd).length;\n  if (!hasNewFields) {\n    return existingType;\n  }\n  const existingTypeConfig = existingType === null || existingType === void 0 ? void 0 : existingType.toConfig();\n  const newFields = {\n    ...(existingTypeConfig === null || existingTypeConfig === void 0 ? void 0 : existingTypeConfig.fields)\n  };\n  for (const [key, val] of Object.entries(fieldsToAdd)) {\n    if (newFields[key]) {\n      var _name;\n      throw new Error(`The schema extension defines a field ${JSON.stringify(key)} on the ${JSON.stringify((_name = existingType.name) !== null && _name !== void 0 ? _name : defaultName)} type but that type already defines a field with that name.\\nThe original field:\\n${printFieldOnType(existingType, key)}\\nThe field added by the extension:\\n${printFieldOnType(new graphql__WEBPACK_IMPORTED_MODULE_1__.GraphQLObjectType({\n        name: \"ForError\",\n        fields: {\n          [key]: val\n        }\n      }), key)}`);\n    }\n    newFields[key] = val;\n  }\n  return new graphql__WEBPACK_IMPORTED_MODULE_1__.GraphQLObjectType({\n    name: defaultName,\n    ...existingTypeConfig,\n    fields: newFields\n  });\n}\n\n// https://github.com/microsoft/TypeScript/issues/17002\nconst isReadonlyArray = Array.isArray;\nconst operations = [\"query\", \"mutation\"];\nfunction flattenExtensions(extensions) {\n  if (isReadonlyArray(extensions)) {\n    const resolvedExtension = {\n      mutation: {},\n      query: {}\n    };\n    for (const extension of extensions) {\n      for (const operation of operations) {\n        const fields = extension[operation];\n        if (fields) {\n          for (const [key, val] of Object.entries(fields)) {\n            if (resolvedExtension[operation][key]) {\n              throw new Error(`More than one extension defines a field named ${JSON.stringify(key)} on the ${operation} type.\\nThe first field:\\n${printFieldOnType(new _graphql_ts_schema__WEBPACK_IMPORTED_MODULE_0__.GObjectType({\n                name: \"ForError\",\n                fields: {\n                  [key]: val\n                }\n              }), key)}\\nThe second field:\\n${printFieldOnType(new _graphql_ts_schema__WEBPACK_IMPORTED_MODULE_0__.GObjectType({\n                name: \"ForError\",\n                fields: {\n                  [key]: resolvedExtension[operation][key]\n                }\n              }), key)}`);\n            }\n            resolvedExtension[operation][key] = val;\n          }\n        }\n      }\n    }\n    return resolvedExtension;\n  }\n  return extensions;\n}\n\n/**\n * Any\n *\n * Note the distinct usages of `any` vs `unknown` is intentional.\n *\n * - The `unknown` used for the source type is because the source isn't known and\n *   it shouldn't generally be used here because these fields are on the query\n *   and mutation types\n * - The first `any` used for the `Args` type parameter is used because `Args` is\n *   invariant so only `Record<string, Arg<InputType, boolean>>` would work with\n *   it. The arguable unsafety here doesn't really matter because people will\n *   always use `g.field`\n * - The `any` in `OutputType` and the last type argument mean that a field that\n *   requires any context can be provided. This is unsafe, the only way this\n *   could arguably be made more \"safe\" is by making this unknown which would\n *   requiring casting or make `extend` and etc. generic over a `Context` but\n *   given this is immediately used on an arbitrary {@link GraphQLSchema} so the\n *   type would immediately be thrown away, it would be pretty much pointless.\n */\n\n/**\n * An extension to a GraphQL schema. This currently only supports adding fields\n * to the query and mutation types. Extending other types will be supported in\n * the future.\n */\n\n/**\n * This object contains the schema being extended and functions to get GraphQL\n * types from the schema.\n */\n\nfunction findObjectTypeUsages(schema, types) {\n  const usages = new Map();\n  for (const [name, type] of Object.entries(schema.getTypeMap())) {\n    if ((0,graphql__WEBPACK_IMPORTED_MODULE_1__.isInterfaceType)(type) || (0,graphql__WEBPACK_IMPORTED_MODULE_1__.isObjectType)(type)) {\n      for (const [fieldName, field] of Object.entries(type.getFields())) {\n        const namedType = (0,graphql__WEBPACK_IMPORTED_MODULE_1__.getNamedType)(field.type);\n        if ((0,graphql__WEBPACK_IMPORTED_MODULE_1__.isObjectType)(namedType) && types.has(namedType)) {\n          getOrDefault(usages, namedType, []).push(`${name}.${fieldName}`);\n        }\n      }\n    }\n    if ((0,graphql__WEBPACK_IMPORTED_MODULE_1__.isUnionType)(type)) {\n      for (const member of type.getTypes()) {\n        if (types.has(member)) {\n          getOrDefault(usages, member, []).push(name);\n        }\n      }\n    }\n  }\n  return usages;\n}\nfunction getOrDefault(input, key, defaultValue) {\n  if (!input.has(key)) {\n    input.set(key, defaultValue);\n    return defaultValue;\n  }\n  return input.get(key);\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../../../node_modules/.pnpm/@graphql-ts+extend@2.0.0_@graphql-ts+schema@1.0.2_graphql@16.10.0__graphql@16.10.0/node_modules/@graphql-ts/extend/dist/graphql-ts-extend.esm.js\n");

/***/ })

};
;