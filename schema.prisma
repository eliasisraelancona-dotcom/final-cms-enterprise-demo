// This file is automatically generated by Keystone, do not modify it manually.
// Modify your Keystone config when you want to change this.

datasource sqlite {
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
  provider          = "sqlite"
}

generator client {
  provider = "prisma-client-js"
}

model Role {
  id                      String  @id @default(cuid())
  name                    String  @default("")
  canUseAdminUI           Boolean @default(true)
  canManageUsers          Boolean @default(false)
  canManageAssets         Boolean @default(true)
  canApproveAssets        Boolean @default(false)
  canManageBrands         Boolean @default(false)
  canManageContent        Boolean @default(true)
  canPublishContent       Boolean @default(false)
  canViewAnalytics        Boolean @default(false)
  canManageDepartments    Boolean @default(false)
  canAnswerQuestions      Boolean @default(false)
  canManageAllDepartments Boolean @default(false)
  users                   User[]  @relation("User_role")
}

model Department {
  id                             String           @id @default(cuid())
  name                           String           @default("")
  slug                           String           @unique @default("")
  description                    String           @default("")
  members                        User[]           @relation("User_department")
  brands                         Brand[]          @relation("Brand_department")
  from_Asset_department          Asset[]          @relation("Asset_department")
  from_Content_department        Content[]        @relation("Content_department")
  from_AuditLog_department       AuditLog[]       @relation("AuditLog_department")
  from_AnalyticsEvent_department AnalyticsEvent[] @relation("AnalyticsEvent_department")
  from_Question_department       Question[]       @relation("Question_department")
  from_Answer_department         Answer[]         @relation("Answer_department")
}

model Brand {
  id               String      @id @default(cuid())
  name             String      @default("")
  slug             String      @unique @default("")
  description      String      @default("")
  complianceStatus String?     @default("needs_review")
  guidelines       Json
  department       Department? @relation("Brand_department", fields: [departmentId], references: [id])
  departmentId     String?     @map("department")
  owners           User[]      @relation("Brand_owners")
  assets           Asset[]     @relation("Asset_brand")
  content          Content[]   @relation("Content_brand")

  @@index([departmentId])
}

model User {
  id                       String           @id @default(cuid())
  name                     String           @default("")
  email                    String           @unique @default("")
  password                 String
  role                     Role?            @relation("User_role", fields: [roleId], references: [id])
  roleId                   String?          @map("role")
  department               Department?      @relation("User_department", fields: [departmentId], references: [id])
  departmentId             String?          @map("department")
  from_Brand_owners        Brand[]          @relation("Brand_owners")
  from_Asset_uploadedBy    Asset[]          @relation("Asset_uploadedBy")
  from_Asset_approvedBy    Asset[]          @relation("Asset_approvedBy")
  from_Content_createdBy   Content[]        @relation("Content_createdBy")
  from_Content_reviewers   Content[]        @relation("Content_reviewers")
  from_AuditLog_user       AuditLog[]       @relation("AuditLog_user")
  from_AnalyticsEvent_user AnalyticsEvent[] @relation("AnalyticsEvent_user")
  from_Question_askedBy    Question[]       @relation("Question_askedBy")
  from_Answer_answeredBy   Answer[]         @relation("Answer_answeredBy")

  @@index([roleId])
  @@index([departmentId])
}

model Tag {
  id        String     @id @default(cuid())
  name      String     @default("")
  assets    Asset[]    @relation("Asset_tags")
  content   Content[]  @relation("Content_tags")
  questions Question[] @relation("Question_tags")
}

model Asset {
  id                  String      @id @default(cuid())
  title               String      @default("")
  description         String      @default("")
  status              String?     @default("uploaded")
  image_id            String?
  image_extension     String?
  image_filesize      Int?
  image_width         Int?
  image_height        Int?
  file_filesize       Int?
  file_filename       String?
  brand               Brand?      @relation("Asset_brand", fields: [brandId], references: [id])
  brandId             String?     @map("brand")
  department          Department? @relation("Asset_department", fields: [departmentId], references: [id])
  departmentId        String?     @map("department")
  uploadedBy          User?       @relation("Asset_uploadedBy", fields: [uploadedById], references: [id])
  uploadedById        String?     @map("uploadedBy")
  approvedBy          User?       @relation("Asset_approvedBy", fields: [approvedById], references: [id])
  approvedById        String?     @map("approvedBy")
  tags                Tag[]       @relation("Asset_tags")
  from_Content_assets Content[]   @relation("Content_assets")

  @@index([brandId])
  @@index([departmentId])
  @@index([uploadedById])
  @@index([approvedById])
}

model Content {
  id           String      @id @default(cuid())
  title        String      @default("")
  status       String?     @default("draft")
  body         Json
  brand        Brand?      @relation("Content_brand", fields: [brandId], references: [id])
  brandId      String?     @map("brand")
  department   Department? @relation("Content_department", fields: [departmentId], references: [id])
  departmentId String?     @map("department")
  assets       Asset[]     @relation("Content_assets")
  createdBy    User?       @relation("Content_createdBy", fields: [createdById], references: [id])
  createdById  String?     @map("createdBy")
  reviewers    User[]      @relation("Content_reviewers")
  tags         Tag[]       @relation("Content_tags")

  @@index([brandId])
  @@index([departmentId])
  @@index([createdById])
}

model AuditLog {
  id           String      @id @default(cuid())
  action       String      @default("")
  entityType   String      @default("")
  entityId     String      @default("")
  timestamp    DateTime?   @default(now())
  meta         Json?
  user         User?       @relation("AuditLog_user", fields: [userId], references: [id])
  userId       String?     @map("user")
  department   Department? @relation("AuditLog_department", fields: [departmentId], references: [id])
  departmentId String?     @map("department")

  @@index([userId])
  @@index([departmentId])
}

model AnalyticsEvent {
  id           String      @id @default(cuid())
  eventType    String?     @default("view")
  timestamp    DateTime?   @default(now())
  user         User?       @relation("AnalyticsEvent_user", fields: [userId], references: [id])
  userId       String?     @map("user")
  entityType   String      @default("")
  entityId     String      @default("")
  meta         Json?
  department   Department? @relation("AnalyticsEvent_department", fields: [departmentId], references: [id])
  departmentId String?     @map("department")

  @@index([userId])
  @@index([departmentId])
}

model Question {
  id           String      @id @default(cuid())
  subject      String      @default("")
  body         Json
  status       String?     @default("new")
  department   Department? @relation("Question_department", fields: [departmentId], references: [id])
  departmentId String?     @map("department")
  askedBy      User?       @relation("Question_askedBy", fields: [askedById], references: [id])
  askedById    String?     @map("askedBy")
  tags         Tag[]       @relation("Question_tags")
  answers      Answer[]    @relation("Answer_question")

  @@index([departmentId])
  @@index([askedById])
}

model Answer {
  id           String      @id @default(cuid())
  body         Json
  question     Question?   @relation("Answer_question", fields: [questionId], references: [id])
  questionId   String?     @map("question")
  answeredBy   User?       @relation("Answer_answeredBy", fields: [answeredById], references: [id])
  answeredById String?     @map("answeredBy")
  approved     Boolean     @default(true)
  department   Department? @relation("Answer_department", fields: [departmentId], references: [id])
  departmentId String?     @map("department")

  @@index([questionId])
  @@index([answeredById])
  @@index([departmentId])
}
