"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@react-stately+layout@4.2.1_react-dom@19.0.0_react@19.0.0__react@19.0.0";
exports.ids = ["vendor-chunks/@react-stately+layout@4.2.1_react-dom@19.0.0_react@19.0.0__react@19.0.0"];
exports.modules = {

/***/ "(pages-dir-node)/../../../../node_modules/.pnpm/@react-stately+layout@4.2.1_react-dom@19.0.0_react@19.0.0__react@19.0.0/node_modules/@react-stately/layout/dist/GridLayout.mjs":
/*!*********************************************************************************************************************************************************************!*\
  !*** ../../../../node_modules/.pnpm/@react-stately+layout@4.2.1_react-dom@19.0.0_react@19.0.0__react@19.0.0/node_modules/@react-stately/layout/dist/GridLayout.mjs ***!
  \*********************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GridLayout: () => (/* binding */ $a58592d295a170a4$export$7d2b12578154a735)\n/* harmony export */ });\n/* harmony import */ var _react_stately_virtualizer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @react-stately/virtualizer */ \"(pages-dir-node)/../../../../node_modules/.pnpm/@react-stately+virtualizer@4.3.1_react-dom@19.0.0_react@19.0.0__react@19.0.0/node_modules/@react-stately/virtualizer/dist/import.mjs\");\n\n\n/*\n * Copyright 2024 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */ \nconst $a58592d295a170a4$var$DEFAULT_OPTIONS = {\n    minItemSize: new (0, _react_stately_virtualizer__WEBPACK_IMPORTED_MODULE_0__.Size)(200, 200),\n    maxItemSize: new (0, _react_stately_virtualizer__WEBPACK_IMPORTED_MODULE_0__.Size)(Infinity, Infinity),\n    preserveAspectRatio: false,\n    minSpace: new (0, _react_stately_virtualizer__WEBPACK_IMPORTED_MODULE_0__.Size)(18, 18),\n    maxColumns: Infinity,\n    dropIndicatorThickness: 2\n};\nclass $a58592d295a170a4$export$7d2b12578154a735 extends (0, _react_stately_virtualizer__WEBPACK_IMPORTED_MODULE_0__.Layout) {\n    shouldInvalidateLayoutOptions(newOptions, oldOptions) {\n        return newOptions.maxColumns !== oldOptions.maxColumns || newOptions.dropIndicatorThickness !== oldOptions.dropIndicatorThickness || newOptions.preserveAspectRatio !== oldOptions.preserveAspectRatio || !(newOptions.minItemSize || $a58592d295a170a4$var$DEFAULT_OPTIONS.minItemSize).equals(oldOptions.minItemSize || $a58592d295a170a4$var$DEFAULT_OPTIONS.minItemSize) || !(newOptions.maxItemSize || $a58592d295a170a4$var$DEFAULT_OPTIONS.maxItemSize).equals(oldOptions.maxItemSize || $a58592d295a170a4$var$DEFAULT_OPTIONS.maxItemSize) || !(newOptions.minSpace || $a58592d295a170a4$var$DEFAULT_OPTIONS.minSpace).equals(oldOptions.minSpace || $a58592d295a170a4$var$DEFAULT_OPTIONS.minSpace);\n    }\n    update(invalidationContext) {\n        let { minItemSize: minItemSize = $a58592d295a170a4$var$DEFAULT_OPTIONS.minItemSize, maxItemSize: maxItemSize = $a58592d295a170a4$var$DEFAULT_OPTIONS.maxItemSize, preserveAspectRatio: preserveAspectRatio = $a58592d295a170a4$var$DEFAULT_OPTIONS.preserveAspectRatio, minSpace: minSpace = $a58592d295a170a4$var$DEFAULT_OPTIONS.minSpace, maxColumns: maxColumns = $a58592d295a170a4$var$DEFAULT_OPTIONS.maxColumns, dropIndicatorThickness: dropIndicatorThickness = $a58592d295a170a4$var$DEFAULT_OPTIONS.dropIndicatorThickness } = invalidationContext.layoutOptions || {};\n        this.dropIndicatorThickness = dropIndicatorThickness;\n        let visibleWidth = this.virtualizer.visibleRect.width;\n        // The max item width is always the entire viewport.\n        // If the max item height is infinity, scale in proportion to the max width.\n        let maxItemWidth = Math.min(maxItemSize.width, visibleWidth);\n        let maxItemHeight = Number.isFinite(maxItemSize.height) ? maxItemSize.height : Math.floor(minItemSize.height / minItemSize.width * maxItemWidth);\n        // Compute the number of rows and columns needed to display the content\n        let columns = Math.floor(visibleWidth / (minItemSize.width + minSpace.width));\n        let numColumns = Math.max(1, Math.min(maxColumns, columns));\n        this.numColumns = numColumns;\n        // Compute the available width (minus the space between items)\n        let width = visibleWidth - minSpace.width * Math.max(0, numColumns);\n        // Compute the item width based on the space available\n        let itemWidth = Math.floor(width / numColumns);\n        itemWidth = Math.max(minItemSize.width, Math.min(maxItemWidth, itemWidth));\n        // Compute the item height, which is proportional to the item width\n        let t = (itemWidth - minItemSize.width) / Math.max(1, maxItemWidth - minItemSize.width);\n        let itemHeight = minItemSize.height + Math.floor((maxItemHeight - minItemSize.height) * t);\n        itemHeight = Math.max(minItemSize.height, Math.min(maxItemHeight, itemHeight));\n        // Compute the horizontal spacing and content height\n        let horizontalSpacing = Math.floor((visibleWidth - numColumns * itemWidth) / (numColumns + 1));\n        this.gap = new (0, _react_stately_virtualizer__WEBPACK_IMPORTED_MODULE_0__.Size)(horizontalSpacing, minSpace.height);\n        let rows = Math.ceil(this.virtualizer.collection.size / numColumns);\n        let iterator = this.virtualizer.collection[Symbol.iterator]();\n        let y = rows > 0 ? minSpace.height : 0;\n        let newLayoutInfos = new Map();\n        let skeleton = null;\n        let skeletonCount = 0;\n        for(let row = 0; row < rows; row++){\n            let maxHeight = 0;\n            let rowLayoutInfos = [];\n            for(let col = 0; col < numColumns; col++){\n                // Repeat skeleton until the end of the current row.\n                let node = skeleton || iterator.next().value;\n                if (!node) break;\n                if (node.type === 'skeleton') skeleton = node;\n                let key = skeleton ? `${skeleton.key}-${skeletonCount++}` : node.key;\n                let oldLayoutInfo = this.layoutInfos.get(key);\n                let content = node;\n                if (skeleton) content = oldLayoutInfo && oldLayoutInfo.content.key === key ? oldLayoutInfo.content : {\n                    ...skeleton,\n                    key: key\n                };\n                let x = horizontalSpacing + col * (itemWidth + horizontalSpacing);\n                let height = itemHeight;\n                let estimatedSize = !preserveAspectRatio;\n                if (oldLayoutInfo && estimatedSize) {\n                    height = oldLayoutInfo.rect.height;\n                    estimatedSize = invalidationContext.layoutOptionsChanged || invalidationContext.sizeChanged || oldLayoutInfo.estimatedSize || oldLayoutInfo.content !== content;\n                }\n                let rect = new (0, _react_stately_virtualizer__WEBPACK_IMPORTED_MODULE_0__.Rect)(x, y, itemWidth, height);\n                let layoutInfo = new (0, _react_stately_virtualizer__WEBPACK_IMPORTED_MODULE_0__.LayoutInfo)(node.type, key, rect);\n                layoutInfo.estimatedSize = estimatedSize;\n                layoutInfo.allowOverflow = true;\n                layoutInfo.content = content;\n                newLayoutInfos.set(key, layoutInfo);\n                rowLayoutInfos.push(layoutInfo);\n                maxHeight = Math.max(maxHeight, layoutInfo.rect.height);\n            }\n            for (let layoutInfo of rowLayoutInfos)layoutInfo.rect.height = maxHeight;\n            y += maxHeight + minSpace.height;\n            // Keep adding skeleton rows until we fill the viewport\n            if (skeleton && row === rows - 1 && y < this.virtualizer.visibleRect.height) rows++;\n        }\n        this.layoutInfos = newLayoutInfos;\n        this.contentSize = new (0, _react_stately_virtualizer__WEBPACK_IMPORTED_MODULE_0__.Size)(this.virtualizer.visibleRect.width, y);\n    }\n    getLayoutInfo(key) {\n        return this.layoutInfos.get(key);\n    }\n    getContentSize() {\n        return this.contentSize;\n    }\n    getVisibleLayoutInfos(rect) {\n        let layoutInfos = [];\n        for (let layoutInfo of this.layoutInfos.values())if (layoutInfo.rect.intersects(rect) || this.virtualizer.isPersistedKey(layoutInfo.key)) layoutInfos.push(layoutInfo);\n        return layoutInfos;\n    }\n    updateItemSize(key, size) {\n        let layoutInfo = this.layoutInfos.get(key);\n        if (!size || !layoutInfo) return false;\n        if (size.height !== layoutInfo.rect.height) {\n            let newLayoutInfo = layoutInfo.copy();\n            newLayoutInfo.rect.height = size.height;\n            newLayoutInfo.estimatedSize = false;\n            this.layoutInfos.set(key, newLayoutInfo);\n            return true;\n        }\n        return false;\n    }\n    getDropTargetFromPoint(x, y, isValidDropTarget) {\n        if (this.layoutInfos.size === 0) return {\n            type: 'root'\n        };\n        x += this.virtualizer.visibleRect.x;\n        y += this.virtualizer.visibleRect.y;\n        // Find the closest item within on either side of the point using the gap width.\n        let key = null;\n        if (this.numColumns === 1) {\n            let searchRect = new (0, _react_stately_virtualizer__WEBPACK_IMPORTED_MODULE_0__.Rect)(x, Math.max(0, y - this.gap.height), 1, this.gap.height * 2);\n            let candidates = this.getVisibleLayoutInfos(searchRect);\n            let minDistance = Infinity;\n            for (let candidate of candidates){\n                // Ignore items outside the search rect, e.g. persisted keys.\n                if (!candidate.rect.intersects(searchRect)) continue;\n                let yDist = Math.abs(candidate.rect.y - y);\n                let maxYDist = Math.abs(candidate.rect.maxY - y);\n                let dist = Math.min(yDist, maxYDist);\n                if (dist < minDistance) {\n                    minDistance = dist;\n                    key = candidate.key;\n                }\n            }\n        } else {\n            let searchRect = new (0, _react_stately_virtualizer__WEBPACK_IMPORTED_MODULE_0__.Rect)(Math.max(0, x - this.gap.width), y, this.gap.width * 2, 1);\n            let candidates = this.getVisibleLayoutInfos(searchRect);\n            let minDistance = Infinity;\n            for (let candidate of candidates){\n                // Ignore items outside the search rect, e.g. persisted keys.\n                if (!candidate.rect.intersects(searchRect)) continue;\n                let xDist = Math.abs(candidate.rect.x - x);\n                let maxXDist = Math.abs(candidate.rect.maxX - x);\n                let dist = Math.min(xDist, maxXDist);\n                if (dist < minDistance) {\n                    minDistance = dist;\n                    key = candidate.key;\n                }\n            }\n        }\n        let layoutInfo = key != null ? this.getLayoutInfo(key) : null;\n        if (!layoutInfo) return {\n            type: 'root'\n        };\n        let target = {\n            type: 'item',\n            key: layoutInfo.key,\n            dropPosition: 'on'\n        };\n        let pos = this.numColumns === 1 ? y : x;\n        let layoutInfoPos = this.numColumns === 1 ? layoutInfo.rect.y : layoutInfo.rect.x;\n        let size = this.numColumns === 1 ? layoutInfo.rect.height : layoutInfo.rect.width;\n        if (isValidDropTarget(target)) {\n            // If dropping on the item is accepted, try the before/after positions\n            // if within 5px of the start or end of the item.\n            if (pos < layoutInfoPos + 5) target.dropPosition = 'before';\n            else if (pos > layoutInfoPos + size - 5) target.dropPosition = 'after';\n        } else {\n            // If dropping on the item isn't accepted, try the target before or after depending on the position.\n            let mid = layoutInfoPos + size / 2;\n            if (pos <= mid && isValidDropTarget({\n                ...target,\n                dropPosition: 'before'\n            })) target.dropPosition = 'before';\n            else if (pos >= mid && isValidDropTarget({\n                ...target,\n                dropPosition: 'after'\n            })) target.dropPosition = 'after';\n        }\n        return target;\n    }\n    getDropTargetLayoutInfo(target) {\n        let layoutInfo = this.getLayoutInfo(target.key);\n        let rect;\n        if (this.numColumns === 1) // Flip from vertical to horizontal if only one column is visible.\n        rect = new (0, _react_stately_virtualizer__WEBPACK_IMPORTED_MODULE_0__.Rect)(layoutInfo.rect.x, target.dropPosition === 'before' ? layoutInfo.rect.y - this.gap.height / 2 - this.dropIndicatorThickness / 2 : layoutInfo.rect.maxY + this.gap.height / 2 - this.dropIndicatorThickness / 2, layoutInfo.rect.width, this.dropIndicatorThickness);\n        else rect = new (0, _react_stately_virtualizer__WEBPACK_IMPORTED_MODULE_0__.Rect)(target.dropPosition === 'before' ? layoutInfo.rect.x - this.gap.width / 2 - this.dropIndicatorThickness / 2 : layoutInfo.rect.maxX + this.gap.width / 2 - this.dropIndicatorThickness / 2, layoutInfo.rect.y, this.dropIndicatorThickness, layoutInfo.rect.height);\n        return new (0, _react_stately_virtualizer__WEBPACK_IMPORTED_MODULE_0__.LayoutInfo)('dropIndicator', target.key + ':' + target.dropPosition, rect);\n    }\n    constructor(...args){\n        super(...args), this.gap = $a58592d295a170a4$var$DEFAULT_OPTIONS.minSpace, this.dropIndicatorThickness = 2, this.numColumns = 0, this.contentSize = new (0, _react_stately_virtualizer__WEBPACK_IMPORTED_MODULE_0__.Size)(), this.layoutInfos = new Map();\n    }\n}\n\n\n\n//# sourceMappingURL=GridLayout.module.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(pages-dir-node)/../../../../node_modules/.pnpm/@react-stately+layout@4.2.1_react-dom@19.0.0_react@19.0.0__react@19.0.0/node_modules/@react-stately/layout/dist/GridLayout.mjs\n");

/***/ }),

/***/ "(pages-dir-node)/../../../../node_modules/.pnpm/@react-stately+layout@4.2.1_react-dom@19.0.0_react@19.0.0__react@19.0.0/node_modules/@react-stately/layout/dist/ListLayout.mjs":
/*!*********************************************************************************************************************************************************************!*\
  !*** ../../../../node_modules/.pnpm/@react-stately+layout@4.2.1_react-dom@19.0.0_react@19.0.0__react@19.0.0/node_modules/@react-stately/layout/dist/ListLayout.mjs ***!
  \*********************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ListLayout: () => (/* binding */ $61ef60fc9b1041f4$export$cacbb3924155d68e)\n/* harmony export */ });\n/* harmony import */ var _react_stately_collections__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @react-stately/collections */ \"(pages-dir-node)/../../../../node_modules/.pnpm/@react-stately+collections@3.12.2_react@19.0.0/node_modules/@react-stately/collections/dist/import.mjs\");\n/* harmony import */ var _react_stately_virtualizer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @react-stately/virtualizer */ \"(pages-dir-node)/../../../../node_modules/.pnpm/@react-stately+virtualizer@4.3.1_react-dom@19.0.0_react@19.0.0__react@19.0.0/node_modules/@react-stately/virtualizer/dist/import.mjs\");\n\n\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */ \n\nconst $61ef60fc9b1041f4$var$DEFAULT_HEIGHT = 48;\nclass $61ef60fc9b1041f4$export$cacbb3924155d68e extends (0, _react_stately_virtualizer__WEBPACK_IMPORTED_MODULE_0__.Layout) {\n    // Backward compatibility for subclassing.\n    get collection() {\n        return this.virtualizer.collection;\n    }\n    getLayoutInfo(key) {\n        var _this_layoutNodes_get;\n        this.ensureLayoutInfo(key);\n        return ((_this_layoutNodes_get = this.layoutNodes.get(key)) === null || _this_layoutNodes_get === void 0 ? void 0 : _this_layoutNodes_get.layoutInfo) || null;\n    }\n    getVisibleLayoutInfos(rect) {\n        // Adjust rect to keep number of visible rows consistent.\n        // (only if height > 1 for getDropTargetFromPoint)\n        if (rect.height > 1) {\n            var _this_rowHeight, _ref;\n            let rowHeight = ((_ref = (_this_rowHeight = this.rowHeight) !== null && _this_rowHeight !== void 0 ? _this_rowHeight : this.estimatedRowHeight) !== null && _ref !== void 0 ? _ref : $61ef60fc9b1041f4$var$DEFAULT_HEIGHT) + this.gap;\n            rect.y = Math.floor(rect.y / rowHeight) * rowHeight;\n            rect.height = Math.ceil(rect.height / rowHeight) * rowHeight;\n        }\n        // If layout hasn't yet been done for the requested rect, union the\n        // new rect with the existing valid rect, and recompute.\n        this.layoutIfNeeded(rect);\n        let res = [];\n        let addNodes = (nodes)=>{\n            for (let node of nodes)if (this.isVisible(node, rect)) {\n                res.push(node.layoutInfo);\n                if (node.children) addNodes(node.children);\n            }\n        };\n        addNodes(this.rootNodes);\n        return res;\n    }\n    layoutIfNeeded(rect) {\n        if (!this.lastCollection) return;\n        if (!this.requestedRect.containsRect(rect)) {\n            this.requestedRect = this.requestedRect.union(rect);\n            this.rootNodes = this.buildCollection();\n        }\n        // Ensure all of the persisted keys are available.\n        for (let key of this.virtualizer.persistedKeys){\n            if (this.ensureLayoutInfo(key)) return;\n        }\n    }\n    ensureLayoutInfo(key) {\n        // If the layout info wasn't found, it might be outside the bounds of the area that we've\n        // computed layout for so far. This can happen when accessing a random key, e.g pressing Home/End.\n        // Compute the full layout and try again.\n        if (!this.layoutNodes.has(key) && this.requestedRect.area < this.contentSize.area && this.lastCollection) {\n            this.requestedRect = new (0, _react_stately_virtualizer__WEBPACK_IMPORTED_MODULE_0__.Rect)(0, 0, Infinity, Infinity);\n            this.rootNodes = this.buildCollection();\n            this.requestedRect = new (0, _react_stately_virtualizer__WEBPACK_IMPORTED_MODULE_0__.Rect)(0, 0, this.contentSize.width, this.contentSize.height);\n            return true;\n        }\n        return false;\n    }\n    isVisible(node, rect) {\n        return node.layoutInfo.rect.intersects(rect) || node.layoutInfo.isSticky || node.layoutInfo.type === 'header' || this.virtualizer.isPersistedKey(node.layoutInfo.key);\n    }\n    shouldInvalidateEverything(invalidationContext) {\n        // Invalidate cache if the size of the collection changed.\n        // In this case, we need to recalculate the entire layout.\n        // Also invalidate if fixed sizes/gaps change.\n        let options = invalidationContext.layoutOptions;\n        var _options_rowHeight, _options_headingHeight, _options_loaderHeight, _options_gap, _options_padding;\n        return invalidationContext.sizeChanged || this.rowHeight !== ((_options_rowHeight = options === null || options === void 0 ? void 0 : options.rowHeight) !== null && _options_rowHeight !== void 0 ? _options_rowHeight : this.rowHeight) || this.headingHeight !== ((_options_headingHeight = options === null || options === void 0 ? void 0 : options.headingHeight) !== null && _options_headingHeight !== void 0 ? _options_headingHeight : this.headingHeight) || this.loaderHeight !== ((_options_loaderHeight = options === null || options === void 0 ? void 0 : options.loaderHeight) !== null && _options_loaderHeight !== void 0 ? _options_loaderHeight : this.loaderHeight) || this.gap !== ((_options_gap = options === null || options === void 0 ? void 0 : options.gap) !== null && _options_gap !== void 0 ? _options_gap : this.gap) || this.padding !== ((_options_padding = options === null || options === void 0 ? void 0 : options.padding) !== null && _options_padding !== void 0 ? _options_padding : this.padding);\n    }\n    shouldInvalidateLayoutOptions(newOptions, oldOptions) {\n        return newOptions.rowHeight !== oldOptions.rowHeight || newOptions.estimatedRowHeight !== oldOptions.estimatedRowHeight || newOptions.headingHeight !== oldOptions.headingHeight || newOptions.estimatedHeadingHeight !== oldOptions.estimatedHeadingHeight || newOptions.loaderHeight !== oldOptions.loaderHeight || newOptions.dropIndicatorThickness !== oldOptions.dropIndicatorThickness || newOptions.gap !== oldOptions.gap || newOptions.padding !== oldOptions.padding;\n    }\n    update(invalidationContext) {\n        let collection = this.virtualizer.collection;\n        // Reset valid rect if we will have to invalidate everything.\n        // Otherwise we can reuse cached layout infos outside the current visible rect.\n        this.invalidateEverything = this.shouldInvalidateEverything(invalidationContext);\n        if (this.invalidateEverything) {\n            this.requestedRect = this.virtualizer.visibleRect.copy();\n            this.layoutNodes.clear();\n        }\n        let options = invalidationContext.layoutOptions;\n        var _options_rowHeight;\n        this.rowHeight = (_options_rowHeight = options === null || options === void 0 ? void 0 : options.rowHeight) !== null && _options_rowHeight !== void 0 ? _options_rowHeight : this.rowHeight;\n        var _options_estimatedRowHeight;\n        this.estimatedRowHeight = (_options_estimatedRowHeight = options === null || options === void 0 ? void 0 : options.estimatedRowHeight) !== null && _options_estimatedRowHeight !== void 0 ? _options_estimatedRowHeight : this.estimatedRowHeight;\n        var _options_headingHeight;\n        this.headingHeight = (_options_headingHeight = options === null || options === void 0 ? void 0 : options.headingHeight) !== null && _options_headingHeight !== void 0 ? _options_headingHeight : this.headingHeight;\n        var _options_estimatedHeadingHeight;\n        this.estimatedHeadingHeight = (_options_estimatedHeadingHeight = options === null || options === void 0 ? void 0 : options.estimatedHeadingHeight) !== null && _options_estimatedHeadingHeight !== void 0 ? _options_estimatedHeadingHeight : this.estimatedHeadingHeight;\n        var _options_loaderHeight;\n        this.loaderHeight = (_options_loaderHeight = options === null || options === void 0 ? void 0 : options.loaderHeight) !== null && _options_loaderHeight !== void 0 ? _options_loaderHeight : this.loaderHeight;\n        var _options_dropIndicatorThickness;\n        this.dropIndicatorThickness = (_options_dropIndicatorThickness = options === null || options === void 0 ? void 0 : options.dropIndicatorThickness) !== null && _options_dropIndicatorThickness !== void 0 ? _options_dropIndicatorThickness : this.dropIndicatorThickness;\n        var _options_gap;\n        this.gap = (_options_gap = options === null || options === void 0 ? void 0 : options.gap) !== null && _options_gap !== void 0 ? _options_gap : this.gap;\n        var _options_padding;\n        this.padding = (_options_padding = options === null || options === void 0 ? void 0 : options.padding) !== null && _options_padding !== void 0 ? _options_padding : this.padding;\n        this.rootNodes = this.buildCollection();\n        // Remove deleted layout nodes\n        if (this.lastCollection && collection !== this.lastCollection) {\n            for (let key of this.lastCollection.getKeys())if (!collection.getItem(key)) {\n                let layoutNode = this.layoutNodes.get(key);\n                if (layoutNode) this.layoutNodes.delete(key);\n            }\n        }\n        this.lastCollection = collection;\n        this.invalidateEverything = false;\n        this.validRect = this.requestedRect.copy();\n    }\n    buildCollection(y = this.padding) {\n        let collection = this.virtualizer.collection;\n        let skipped = 0;\n        let nodes = [];\n        for (let node of collection){\n            var _this_rowHeight, _ref;\n            let rowHeight = ((_ref = (_this_rowHeight = this.rowHeight) !== null && _this_rowHeight !== void 0 ? _this_rowHeight : this.estimatedRowHeight) !== null && _ref !== void 0 ? _ref : $61ef60fc9b1041f4$var$DEFAULT_HEIGHT) + this.gap;\n            // Skip rows before the valid rectangle unless they are already cached.\n            if (node.type === 'item' && y + rowHeight < this.requestedRect.y && !this.isValid(node, y)) {\n                y += rowHeight;\n                skipped++;\n                continue;\n            }\n            let layoutNode = this.buildChild(node, this.padding, y, null);\n            y = layoutNode.layoutInfo.rect.maxY + this.gap;\n            nodes.push(layoutNode);\n            if (node.type === 'item' && y > this.requestedRect.maxY) {\n                y += (collection.size - (nodes.length + skipped)) * rowHeight;\n                break;\n            }\n        }\n        y -= this.gap;\n        y += this.padding;\n        this.contentSize = new (0, _react_stately_virtualizer__WEBPACK_IMPORTED_MODULE_0__.Size)(this.virtualizer.visibleRect.width, y);\n        return nodes;\n    }\n    isValid(node, y) {\n        let cached = this.layoutNodes.get(node.key);\n        return !this.invalidateEverything && cached && cached.node === node && y === cached.layoutInfo.rect.y && cached.layoutInfo.rect.intersects(this.validRect) && cached.validRect.containsRect(cached.layoutInfo.rect.intersection(this.requestedRect));\n    }\n    buildChild(node, x, y, parentKey) {\n        if (this.isValid(node, y)) return this.layoutNodes.get(node.key);\n        let layoutNode = this.buildNode(node, x, y);\n        layoutNode.layoutInfo.parentKey = parentKey !== null && parentKey !== void 0 ? parentKey : null;\n        this.layoutNodes.set(node.key, layoutNode);\n        return layoutNode;\n    }\n    buildNode(node, x, y) {\n        switch(node.type){\n            case 'section':\n                return this.buildSection(node, x, y);\n            case 'item':\n                return this.buildItem(node, x, y);\n            case 'header':\n                return this.buildSectionHeader(node, x, y);\n            case 'loader':\n                return this.buildLoader(node, x, y);\n            default:\n                throw new Error('Unsupported node type: ' + node.type);\n        }\n    }\n    buildLoader(node, x, y) {\n        let rect = new (0, _react_stately_virtualizer__WEBPACK_IMPORTED_MODULE_0__.Rect)(x, y, this.padding, 0);\n        let layoutInfo = new (0, _react_stately_virtualizer__WEBPACK_IMPORTED_MODULE_0__.LayoutInfo)('loader', node.key, rect);\n        rect.width = this.virtualizer.contentSize.width - this.padding - x;\n        rect.height = this.loaderHeight || this.rowHeight || this.estimatedRowHeight || $61ef60fc9b1041f4$var$DEFAULT_HEIGHT;\n        return {\n            layoutInfo: layoutInfo,\n            validRect: rect.intersection(this.requestedRect)\n        };\n    }\n    buildSection(node, x, y) {\n        let collection = this.virtualizer.collection;\n        let width = this.virtualizer.visibleRect.width - this.padding;\n        let rect = new (0, _react_stately_virtualizer__WEBPACK_IMPORTED_MODULE_0__.Rect)(x, y, width - x, 0);\n        let layoutInfo = new (0, _react_stately_virtualizer__WEBPACK_IMPORTED_MODULE_0__.LayoutInfo)(node.type, node.key, rect);\n        let startY = y;\n        let skipped = 0;\n        let children = [];\n        for (let child of (0, _react_stately_collections__WEBPACK_IMPORTED_MODULE_1__.getChildNodes)(node, collection)){\n            var _this_rowHeight, _ref;\n            let rowHeight = ((_ref = (_this_rowHeight = this.rowHeight) !== null && _this_rowHeight !== void 0 ? _this_rowHeight : this.estimatedRowHeight) !== null && _ref !== void 0 ? _ref : $61ef60fc9b1041f4$var$DEFAULT_HEIGHT) + this.gap;\n            // Skip rows before the valid rectangle unless they are already cached.\n            if (y + rowHeight < this.requestedRect.y && !this.isValid(node, y)) {\n                y += rowHeight;\n                skipped++;\n                continue;\n            }\n            let layoutNode = this.buildChild(child, x, y, layoutInfo.key);\n            y = layoutNode.layoutInfo.rect.maxY + this.gap;\n            children.push(layoutNode);\n            if (y > this.requestedRect.maxY) {\n                // Estimate the remaining height for rows that we don't need to layout right now.\n                y += ([\n                    ...(0, _react_stately_collections__WEBPACK_IMPORTED_MODULE_1__.getChildNodes)(node, collection)\n                ].length - (children.length + skipped)) * rowHeight;\n                break;\n            }\n        }\n        y -= this.gap;\n        rect.height = y - startY;\n        return {\n            layoutInfo: layoutInfo,\n            children: children,\n            validRect: layoutInfo.rect.intersection(this.requestedRect),\n            node: node\n        };\n    }\n    buildSectionHeader(node, x, y) {\n        let width = this.virtualizer.visibleRect.width - this.padding;\n        let rectHeight = this.headingHeight;\n        let isEstimated = false;\n        // If no explicit height is available, use an estimated height.\n        if (rectHeight == null) {\n            // If a previous version of this layout info exists, reuse its height.\n            // Mark as estimated if the size of the overall virtualizer changed,\n            // or the content of the item changed.\n            let previousLayoutNode = this.layoutNodes.get(node.key);\n            let previousLayoutInfo = previousLayoutNode === null || previousLayoutNode === void 0 ? void 0 : previousLayoutNode.layoutInfo;\n            if (previousLayoutInfo) {\n                let curNode = this.virtualizer.collection.getItem(node.key);\n                let lastNode = this.lastCollection ? this.lastCollection.getItem(node.key) : null;\n                rectHeight = previousLayoutInfo.rect.height;\n                isEstimated = width !== previousLayoutInfo.rect.width || curNode !== lastNode || previousLayoutInfo.estimatedSize;\n            } else {\n                rectHeight = node.rendered ? this.estimatedHeadingHeight : 0;\n                isEstimated = true;\n            }\n        }\n        if (rectHeight == null) rectHeight = $61ef60fc9b1041f4$var$DEFAULT_HEIGHT;\n        let headerRect = new (0, _react_stately_virtualizer__WEBPACK_IMPORTED_MODULE_0__.Rect)(x, y, width - x, rectHeight);\n        let header = new (0, _react_stately_virtualizer__WEBPACK_IMPORTED_MODULE_0__.LayoutInfo)('header', node.key, headerRect);\n        header.estimatedSize = isEstimated;\n        return {\n            layoutInfo: header,\n            children: [],\n            validRect: header.rect.intersection(this.requestedRect),\n            node: node\n        };\n    }\n    buildItem(node, x, y) {\n        let width = this.virtualizer.visibleRect.width - this.padding - x;\n        let rectHeight = this.rowHeight;\n        let isEstimated = false;\n        // If no explicit height is available, use an estimated height.\n        if (rectHeight == null) {\n            // If a previous version of this layout info exists, reuse its height.\n            // Mark as estimated if the size of the overall virtualizer changed,\n            // or the content of the item changed.\n            let previousLayoutNode = this.layoutNodes.get(node.key);\n            if (previousLayoutNode) {\n                rectHeight = previousLayoutNode.layoutInfo.rect.height;\n                isEstimated = width !== previousLayoutNode.layoutInfo.rect.width || node !== previousLayoutNode.node || previousLayoutNode.layoutInfo.estimatedSize;\n            } else {\n                rectHeight = this.estimatedRowHeight;\n                isEstimated = true;\n            }\n        }\n        if (rectHeight == null) rectHeight = $61ef60fc9b1041f4$var$DEFAULT_HEIGHT;\n        let rect = new (0, _react_stately_virtualizer__WEBPACK_IMPORTED_MODULE_0__.Rect)(x, y, width, rectHeight);\n        let layoutInfo = new (0, _react_stately_virtualizer__WEBPACK_IMPORTED_MODULE_0__.LayoutInfo)(node.type, node.key, rect);\n        layoutInfo.estimatedSize = isEstimated;\n        return {\n            layoutInfo: layoutInfo,\n            children: [],\n            validRect: layoutInfo.rect,\n            node: node\n        };\n    }\n    updateItemSize(key, size) {\n        let layoutNode = this.layoutNodes.get(key);\n        // If no layoutInfo, item has been deleted/removed.\n        if (!layoutNode) return false;\n        let collection = this.virtualizer.collection;\n        let layoutInfo = layoutNode.layoutInfo;\n        layoutInfo.estimatedSize = false;\n        if (layoutInfo.rect.height !== size.height) {\n            // Copy layout info rather than mutating so that later caches are invalidated.\n            let newLayoutInfo = layoutInfo.copy();\n            newLayoutInfo.rect.height = size.height;\n            layoutNode.layoutInfo = newLayoutInfo;\n            // Items after this layoutInfo will need to be repositioned to account for the new height.\n            // Adjust the validRect so that only items above remain valid.\n            this.validRect.height = Math.min(this.validRect.height, layoutInfo.rect.y - this.validRect.y);\n            // The requestedRect also needs to be adjusted to account for the height difference.\n            this.requestedRect.height += newLayoutInfo.rect.height - layoutInfo.rect.height;\n            // Invalidate layout for this layout node and all parents\n            this.updateLayoutNode(key, layoutInfo, newLayoutInfo);\n            let node = layoutInfo.parentKey != null ? collection.getItem(layoutInfo.parentKey) : null;\n            while(node){\n                this.updateLayoutNode(node.key, layoutInfo, newLayoutInfo);\n                node = node.parentKey != null ? collection.getItem(node.parentKey) : null;\n            }\n            return true;\n        }\n        return false;\n    }\n    updateLayoutNode(key, oldLayoutInfo, newLayoutInfo) {\n        let n = this.layoutNodes.get(key);\n        if (n) {\n            // Invalidate by intersecting the validRect of this node with the overall validRect.\n            n.validRect = n.validRect.intersection(this.validRect);\n            // Replace layout info in LayoutNode\n            if (n.layoutInfo === oldLayoutInfo) n.layoutInfo = newLayoutInfo;\n        }\n    }\n    getContentSize() {\n        return this.contentSize;\n    }\n    getDropTargetFromPoint(x, y, isValidDropTarget) {\n        x += this.virtualizer.visibleRect.x;\n        y += this.virtualizer.visibleRect.y;\n        // Find the closest item within on either side of the point using the gap width.\n        let searchRect = new (0, _react_stately_virtualizer__WEBPACK_IMPORTED_MODULE_0__.Rect)(x, Math.max(0, y - this.gap), 1, this.gap * 2);\n        let candidates = this.getVisibleLayoutInfos(searchRect);\n        let key = null;\n        let minDistance = Infinity;\n        for (let candidate of candidates){\n            // Ignore items outside the search rect, e.g. persisted keys.\n            if (!candidate.rect.intersects(searchRect)) continue;\n            let yDist = Math.abs(candidate.rect.y - y);\n            let maxYDist = Math.abs(candidate.rect.maxY - y);\n            let dist = Math.min(yDist, maxYDist);\n            if (dist < minDistance) {\n                minDistance = dist;\n                key = candidate.key;\n            }\n        }\n        if (key == null || this.virtualizer.collection.size === 0) return {\n            type: 'root'\n        };\n        let layoutInfo = this.getLayoutInfo(key);\n        if (!layoutInfo) return null;\n        let rect = layoutInfo.rect;\n        let target = {\n            type: 'item',\n            key: layoutInfo.key,\n            dropPosition: 'on'\n        };\n        // If dropping on the item isn't accepted, try the target before or after depending on the y position.\n        // Otherwise, if dropping on the item is accepted, still try the before/after positions if within 10px\n        // of the top or bottom of the item.\n        if (!isValidDropTarget(target)) {\n            if (y <= rect.y + rect.height / 2 && isValidDropTarget({\n                ...target,\n                dropPosition: 'before'\n            })) target.dropPosition = 'before';\n            else if (isValidDropTarget({\n                ...target,\n                dropPosition: 'after'\n            })) target.dropPosition = 'after';\n        } else if (y <= rect.y + 10 && isValidDropTarget({\n            ...target,\n            dropPosition: 'before'\n        })) target.dropPosition = 'before';\n        else if (y >= rect.maxY - 10 && isValidDropTarget({\n            ...target,\n            dropPosition: 'after'\n        })) target.dropPosition = 'after';\n        return target;\n    }\n    getDropTargetLayoutInfo(target) {\n        let layoutInfo = this.getLayoutInfo(target.key);\n        let rect;\n        if (target.dropPosition === 'before') rect = new (0, _react_stately_virtualizer__WEBPACK_IMPORTED_MODULE_0__.Rect)(layoutInfo.rect.x, layoutInfo.rect.y - this.dropIndicatorThickness / 2, layoutInfo.rect.width, this.dropIndicatorThickness);\n        else if (target.dropPosition === 'after') rect = new (0, _react_stately_virtualizer__WEBPACK_IMPORTED_MODULE_0__.Rect)(layoutInfo.rect.x, layoutInfo.rect.maxY - this.dropIndicatorThickness / 2, layoutInfo.rect.width, this.dropIndicatorThickness);\n        else rect = layoutInfo.rect;\n        return new (0, _react_stately_virtualizer__WEBPACK_IMPORTED_MODULE_0__.LayoutInfo)('dropIndicator', target.key + ':' + target.dropPosition, rect);\n    }\n    /**\n   * Creates a new ListLayout with options. See the list of properties below for a description\n   * of the options that can be provided.\n   */ constructor(options = {}){\n        super();\n        var _options_rowHeight;\n        this.rowHeight = (_options_rowHeight = options.rowHeight) !== null && _options_rowHeight !== void 0 ? _options_rowHeight : null;\n        var _options_estimatedRowHeight;\n        this.estimatedRowHeight = (_options_estimatedRowHeight = options.estimatedRowHeight) !== null && _options_estimatedRowHeight !== void 0 ? _options_estimatedRowHeight : null;\n        var _options_headingHeight;\n        this.headingHeight = (_options_headingHeight = options.headingHeight) !== null && _options_headingHeight !== void 0 ? _options_headingHeight : null;\n        var _options_estimatedHeadingHeight;\n        this.estimatedHeadingHeight = (_options_estimatedHeadingHeight = options.estimatedHeadingHeight) !== null && _options_estimatedHeadingHeight !== void 0 ? _options_estimatedHeadingHeight : null;\n        var _options_loaderHeight;\n        this.loaderHeight = (_options_loaderHeight = options.loaderHeight) !== null && _options_loaderHeight !== void 0 ? _options_loaderHeight : null;\n        this.dropIndicatorThickness = options.dropIndicatorThickness || 2;\n        this.gap = options.gap || 0;\n        this.padding = options.padding || 0;\n        this.layoutNodes = new Map();\n        this.rootNodes = [];\n        this.lastCollection = null;\n        this.invalidateEverything = false;\n        this.validRect = new (0, _react_stately_virtualizer__WEBPACK_IMPORTED_MODULE_0__.Rect)();\n        this.requestedRect = new (0, _react_stately_virtualizer__WEBPACK_IMPORTED_MODULE_0__.Rect)();\n        this.contentSize = new (0, _react_stately_virtualizer__WEBPACK_IMPORTED_MODULE_0__.Size)();\n    }\n}\n\n\n\n//# sourceMappingURL=ListLayout.module.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHBhZ2VzLWRpci1ub2RlKS8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vQHJlYWN0LXN0YXRlbHkrbGF5b3V0QDQuMi4xX3JlYWN0LWRvbUAxOS4wLjBfcmVhY3RAMTkuMC4wX19yZWFjdEAxOS4wLjAvbm9kZV9tb2R1bGVzL0ByZWFjdC1zdGF0ZWx5L2xheW91dC9kaXN0L0xpc3RMYXlvdXQubWpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFpRjtBQUM2RDs7QUFFOUk7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLDREQUE0RCw4REFBYTtBQUN6RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUNBQXlDLDREQUFXO0FBQ3BEO0FBQ0EseUNBQXlDLDREQUFXO0FBQ3BEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUNBQW1DLDREQUFXO0FBQzlDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkJBQTJCLDREQUFXO0FBQ3RDLGlDQUFpQyxrRUFBaUI7QUFDbEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyQkFBMkIsNERBQVc7QUFDdEMsaUNBQWlDLGtFQUFpQjtBQUNsRDtBQUNBO0FBQ0E7QUFDQSw4QkFBOEIscUVBQW9CO0FBQ2xEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyQkFBMkIscUVBQW9CO0FBQy9DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlDQUFpQyw0REFBVztBQUM1Qyw2QkFBNkIsa0VBQWlCO0FBQzlDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkJBQTJCLDREQUFXO0FBQ3RDLGlDQUFpQyxrRUFBaUI7QUFDbEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQ0FBaUMsNERBQVc7QUFDNUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2IsVUFBVTtBQUNWO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2REFBNkQsNERBQVc7QUFDeEUsaUVBQWlFLDREQUFXO0FBQzVFO0FBQ0EsdUJBQXVCLGtFQUFpQjtBQUN4QztBQUNBO0FBQ0E7QUFDQTtBQUNBLDhCQUE4QjtBQUM5QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQ0FBaUMsNERBQVc7QUFDNUMscUNBQXFDLDREQUFXO0FBQ2hELG1DQUFtQyw0REFBVztBQUM5QztBQUNBOzs7QUFHaUU7QUFDakUiLCJzb3VyY2VzIjpbIi9Vc2Vycy9qYWltZWlzcmFlbGNhbXBlYXMva2V5c3RvbmUvbm9kZV9tb2R1bGVzLy5wbnBtL0ByZWFjdC1zdGF0ZWx5K2xheW91dEA0LjIuMV9yZWFjdC1kb21AMTkuMC4wX3JlYWN0QDE5LjAuMF9fcmVhY3RAMTkuMC4wL25vZGVfbW9kdWxlcy9AcmVhY3Qtc3RhdGVseS9sYXlvdXQvZGlzdC9MaXN0TGF5b3V0Lm1qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge2dldENoaWxkTm9kZXMgYXMgJGltZzI2JGdldENoaWxkTm9kZXN9IGZyb20gXCJAcmVhY3Qtc3RhdGVseS9jb2xsZWN0aW9uc1wiO1xuaW1wb3J0IHtSZWN0IGFzICRpbWcyNiRSZWN0LCBTaXplIGFzICRpbWcyNiRTaXplLCBMYXlvdXRJbmZvIGFzICRpbWcyNiRMYXlvdXRJbmZvLCBMYXlvdXQgYXMgJGltZzI2JExheW91dH0gZnJvbSBcIkByZWFjdC1zdGF0ZWx5L3ZpcnR1YWxpemVyXCI7XG5cbi8qXG4gKiBDb3B5cmlnaHQgMjAyMCBBZG9iZS4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIFRoaXMgZmlsZSBpcyBsaWNlbnNlZCB0byB5b3UgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS4gWW91IG1heSBvYnRhaW4gYSBjb3B5XG4gKiBvZiB0aGUgTGljZW5zZSBhdCBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlIGRpc3RyaWJ1dGVkIHVuZGVyXG4gKiB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBSRVBSRVNFTlRBVElPTlNcbiAqIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZVxuICogZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqLyBcblxuY29uc3QgJDYxZWY2MGZjOWIxMDQxZjQkdmFyJERFRkFVTFRfSEVJR0hUID0gNDg7XG5jbGFzcyAkNjFlZjYwZmM5YjEwNDFmNCRleHBvcnQkY2FjYmIzOTI0MTU1ZDY4ZSBleHRlbmRzICgwLCAkaW1nMjYkTGF5b3V0KSB7XG4gICAgLy8gQmFja3dhcmQgY29tcGF0aWJpbGl0eSBmb3Igc3ViY2xhc3NpbmcuXG4gICAgZ2V0IGNvbGxlY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnZpcnR1YWxpemVyLmNvbGxlY3Rpb247XG4gICAgfVxuICAgIGdldExheW91dEluZm8oa2V5KSB7XG4gICAgICAgIHZhciBfdGhpc19sYXlvdXROb2Rlc19nZXQ7XG4gICAgICAgIHRoaXMuZW5zdXJlTGF5b3V0SW5mbyhrZXkpO1xuICAgICAgICByZXR1cm4gKChfdGhpc19sYXlvdXROb2Rlc19nZXQgPSB0aGlzLmxheW91dE5vZGVzLmdldChrZXkpKSA9PT0gbnVsbCB8fCBfdGhpc19sYXlvdXROb2Rlc19nZXQgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF90aGlzX2xheW91dE5vZGVzX2dldC5sYXlvdXRJbmZvKSB8fCBudWxsO1xuICAgIH1cbiAgICBnZXRWaXNpYmxlTGF5b3V0SW5mb3MocmVjdCkge1xuICAgICAgICAvLyBBZGp1c3QgcmVjdCB0byBrZWVwIG51bWJlciBvZiB2aXNpYmxlIHJvd3MgY29uc2lzdGVudC5cbiAgICAgICAgLy8gKG9ubHkgaWYgaGVpZ2h0ID4gMSBmb3IgZ2V0RHJvcFRhcmdldEZyb21Qb2ludClcbiAgICAgICAgaWYgKHJlY3QuaGVpZ2h0ID4gMSkge1xuICAgICAgICAgICAgdmFyIF90aGlzX3Jvd0hlaWdodCwgX3JlZjtcbiAgICAgICAgICAgIGxldCByb3dIZWlnaHQgPSAoKF9yZWYgPSAoX3RoaXNfcm93SGVpZ2h0ID0gdGhpcy5yb3dIZWlnaHQpICE9PSBudWxsICYmIF90aGlzX3Jvd0hlaWdodCAhPT0gdm9pZCAwID8gX3RoaXNfcm93SGVpZ2h0IDogdGhpcy5lc3RpbWF0ZWRSb3dIZWlnaHQpICE9PSBudWxsICYmIF9yZWYgIT09IHZvaWQgMCA/IF9yZWYgOiAkNjFlZjYwZmM5YjEwNDFmNCR2YXIkREVGQVVMVF9IRUlHSFQpICsgdGhpcy5nYXA7XG4gICAgICAgICAgICByZWN0LnkgPSBNYXRoLmZsb29yKHJlY3QueSAvIHJvd0hlaWdodCkgKiByb3dIZWlnaHQ7XG4gICAgICAgICAgICByZWN0LmhlaWdodCA9IE1hdGguY2VpbChyZWN0LmhlaWdodCAvIHJvd0hlaWdodCkgKiByb3dIZWlnaHQ7XG4gICAgICAgIH1cbiAgICAgICAgLy8gSWYgbGF5b3V0IGhhc24ndCB5ZXQgYmVlbiBkb25lIGZvciB0aGUgcmVxdWVzdGVkIHJlY3QsIHVuaW9uIHRoZVxuICAgICAgICAvLyBuZXcgcmVjdCB3aXRoIHRoZSBleGlzdGluZyB2YWxpZCByZWN0LCBhbmQgcmVjb21wdXRlLlxuICAgICAgICB0aGlzLmxheW91dElmTmVlZGVkKHJlY3QpO1xuICAgICAgICBsZXQgcmVzID0gW107XG4gICAgICAgIGxldCBhZGROb2RlcyA9IChub2Rlcyk9PntcbiAgICAgICAgICAgIGZvciAobGV0IG5vZGUgb2Ygbm9kZXMpaWYgKHRoaXMuaXNWaXNpYmxlKG5vZGUsIHJlY3QpKSB7XG4gICAgICAgICAgICAgICAgcmVzLnB1c2gobm9kZS5sYXlvdXRJbmZvKTtcbiAgICAgICAgICAgICAgICBpZiAobm9kZS5jaGlsZHJlbikgYWRkTm9kZXMobm9kZS5jaGlsZHJlbik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIGFkZE5vZGVzKHRoaXMucm9vdE5vZGVzKTtcbiAgICAgICAgcmV0dXJuIHJlcztcbiAgICB9XG4gICAgbGF5b3V0SWZOZWVkZWQocmVjdCkge1xuICAgICAgICBpZiAoIXRoaXMubGFzdENvbGxlY3Rpb24pIHJldHVybjtcbiAgICAgICAgaWYgKCF0aGlzLnJlcXVlc3RlZFJlY3QuY29udGFpbnNSZWN0KHJlY3QpKSB7XG4gICAgICAgICAgICB0aGlzLnJlcXVlc3RlZFJlY3QgPSB0aGlzLnJlcXVlc3RlZFJlY3QudW5pb24ocmVjdCk7XG4gICAgICAgICAgICB0aGlzLnJvb3ROb2RlcyA9IHRoaXMuYnVpbGRDb2xsZWN0aW9uKCk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gRW5zdXJlIGFsbCBvZiB0aGUgcGVyc2lzdGVkIGtleXMgYXJlIGF2YWlsYWJsZS5cbiAgICAgICAgZm9yIChsZXQga2V5IG9mIHRoaXMudmlydHVhbGl6ZXIucGVyc2lzdGVkS2V5cyl7XG4gICAgICAgICAgICBpZiAodGhpcy5lbnN1cmVMYXlvdXRJbmZvKGtleSkpIHJldHVybjtcbiAgICAgICAgfVxuICAgIH1cbiAgICBlbnN1cmVMYXlvdXRJbmZvKGtleSkge1xuICAgICAgICAvLyBJZiB0aGUgbGF5b3V0IGluZm8gd2Fzbid0IGZvdW5kLCBpdCBtaWdodCBiZSBvdXRzaWRlIHRoZSBib3VuZHMgb2YgdGhlIGFyZWEgdGhhdCB3ZSd2ZVxuICAgICAgICAvLyBjb21wdXRlZCBsYXlvdXQgZm9yIHNvIGZhci4gVGhpcyBjYW4gaGFwcGVuIHdoZW4gYWNjZXNzaW5nIGEgcmFuZG9tIGtleSwgZS5nIHByZXNzaW5nIEhvbWUvRW5kLlxuICAgICAgICAvLyBDb21wdXRlIHRoZSBmdWxsIGxheW91dCBhbmQgdHJ5IGFnYWluLlxuICAgICAgICBpZiAoIXRoaXMubGF5b3V0Tm9kZXMuaGFzKGtleSkgJiYgdGhpcy5yZXF1ZXN0ZWRSZWN0LmFyZWEgPCB0aGlzLmNvbnRlbnRTaXplLmFyZWEgJiYgdGhpcy5sYXN0Q29sbGVjdGlvbikge1xuICAgICAgICAgICAgdGhpcy5yZXF1ZXN0ZWRSZWN0ID0gbmV3ICgwLCAkaW1nMjYkUmVjdCkoMCwgMCwgSW5maW5pdHksIEluZmluaXR5KTtcbiAgICAgICAgICAgIHRoaXMucm9vdE5vZGVzID0gdGhpcy5idWlsZENvbGxlY3Rpb24oKTtcbiAgICAgICAgICAgIHRoaXMucmVxdWVzdGVkUmVjdCA9IG5ldyAoMCwgJGltZzI2JFJlY3QpKDAsIDAsIHRoaXMuY29udGVudFNpemUud2lkdGgsIHRoaXMuY29udGVudFNpemUuaGVpZ2h0KTtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgaXNWaXNpYmxlKG5vZGUsIHJlY3QpIHtcbiAgICAgICAgcmV0dXJuIG5vZGUubGF5b3V0SW5mby5yZWN0LmludGVyc2VjdHMocmVjdCkgfHwgbm9kZS5sYXlvdXRJbmZvLmlzU3RpY2t5IHx8IG5vZGUubGF5b3V0SW5mby50eXBlID09PSAnaGVhZGVyJyB8fCB0aGlzLnZpcnR1YWxpemVyLmlzUGVyc2lzdGVkS2V5KG5vZGUubGF5b3V0SW5mby5rZXkpO1xuICAgIH1cbiAgICBzaG91bGRJbnZhbGlkYXRlRXZlcnl0aGluZyhpbnZhbGlkYXRpb25Db250ZXh0KSB7XG4gICAgICAgIC8vIEludmFsaWRhdGUgY2FjaGUgaWYgdGhlIHNpemUgb2YgdGhlIGNvbGxlY3Rpb24gY2hhbmdlZC5cbiAgICAgICAgLy8gSW4gdGhpcyBjYXNlLCB3ZSBuZWVkIHRvIHJlY2FsY3VsYXRlIHRoZSBlbnRpcmUgbGF5b3V0LlxuICAgICAgICAvLyBBbHNvIGludmFsaWRhdGUgaWYgZml4ZWQgc2l6ZXMvZ2FwcyBjaGFuZ2UuXG4gICAgICAgIGxldCBvcHRpb25zID0gaW52YWxpZGF0aW9uQ29udGV4dC5sYXlvdXRPcHRpb25zO1xuICAgICAgICB2YXIgX29wdGlvbnNfcm93SGVpZ2h0LCBfb3B0aW9uc19oZWFkaW5nSGVpZ2h0LCBfb3B0aW9uc19sb2FkZXJIZWlnaHQsIF9vcHRpb25zX2dhcCwgX29wdGlvbnNfcGFkZGluZztcbiAgICAgICAgcmV0dXJuIGludmFsaWRhdGlvbkNvbnRleHQuc2l6ZUNoYW5nZWQgfHwgdGhpcy5yb3dIZWlnaHQgIT09ICgoX29wdGlvbnNfcm93SGVpZ2h0ID0gb3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLnJvd0hlaWdodCkgIT09IG51bGwgJiYgX29wdGlvbnNfcm93SGVpZ2h0ICE9PSB2b2lkIDAgPyBfb3B0aW9uc19yb3dIZWlnaHQgOiB0aGlzLnJvd0hlaWdodCkgfHwgdGhpcy5oZWFkaW5nSGVpZ2h0ICE9PSAoKF9vcHRpb25zX2hlYWRpbmdIZWlnaHQgPSBvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMuaGVhZGluZ0hlaWdodCkgIT09IG51bGwgJiYgX29wdGlvbnNfaGVhZGluZ0hlaWdodCAhPT0gdm9pZCAwID8gX29wdGlvbnNfaGVhZGluZ0hlaWdodCA6IHRoaXMuaGVhZGluZ0hlaWdodCkgfHwgdGhpcy5sb2FkZXJIZWlnaHQgIT09ICgoX29wdGlvbnNfbG9hZGVySGVpZ2h0ID0gb3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLmxvYWRlckhlaWdodCkgIT09IG51bGwgJiYgX29wdGlvbnNfbG9hZGVySGVpZ2h0ICE9PSB2b2lkIDAgPyBfb3B0aW9uc19sb2FkZXJIZWlnaHQgOiB0aGlzLmxvYWRlckhlaWdodCkgfHwgdGhpcy5nYXAgIT09ICgoX29wdGlvbnNfZ2FwID0gb3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLmdhcCkgIT09IG51bGwgJiYgX29wdGlvbnNfZ2FwICE9PSB2b2lkIDAgPyBfb3B0aW9uc19nYXAgOiB0aGlzLmdhcCkgfHwgdGhpcy5wYWRkaW5nICE9PSAoKF9vcHRpb25zX3BhZGRpbmcgPSBvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMucGFkZGluZykgIT09IG51bGwgJiYgX29wdGlvbnNfcGFkZGluZyAhPT0gdm9pZCAwID8gX29wdGlvbnNfcGFkZGluZyA6IHRoaXMucGFkZGluZyk7XG4gICAgfVxuICAgIHNob3VsZEludmFsaWRhdGVMYXlvdXRPcHRpb25zKG5ld09wdGlvbnMsIG9sZE9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIG5ld09wdGlvbnMucm93SGVpZ2h0ICE9PSBvbGRPcHRpb25zLnJvd0hlaWdodCB8fCBuZXdPcHRpb25zLmVzdGltYXRlZFJvd0hlaWdodCAhPT0gb2xkT3B0aW9ucy5lc3RpbWF0ZWRSb3dIZWlnaHQgfHwgbmV3T3B0aW9ucy5oZWFkaW5nSGVpZ2h0ICE9PSBvbGRPcHRpb25zLmhlYWRpbmdIZWlnaHQgfHwgbmV3T3B0aW9ucy5lc3RpbWF0ZWRIZWFkaW5nSGVpZ2h0ICE9PSBvbGRPcHRpb25zLmVzdGltYXRlZEhlYWRpbmdIZWlnaHQgfHwgbmV3T3B0aW9ucy5sb2FkZXJIZWlnaHQgIT09IG9sZE9wdGlvbnMubG9hZGVySGVpZ2h0IHx8IG5ld09wdGlvbnMuZHJvcEluZGljYXRvclRoaWNrbmVzcyAhPT0gb2xkT3B0aW9ucy5kcm9wSW5kaWNhdG9yVGhpY2tuZXNzIHx8IG5ld09wdGlvbnMuZ2FwICE9PSBvbGRPcHRpb25zLmdhcCB8fCBuZXdPcHRpb25zLnBhZGRpbmcgIT09IG9sZE9wdGlvbnMucGFkZGluZztcbiAgICB9XG4gICAgdXBkYXRlKGludmFsaWRhdGlvbkNvbnRleHQpIHtcbiAgICAgICAgbGV0IGNvbGxlY3Rpb24gPSB0aGlzLnZpcnR1YWxpemVyLmNvbGxlY3Rpb247XG4gICAgICAgIC8vIFJlc2V0IHZhbGlkIHJlY3QgaWYgd2Ugd2lsbCBoYXZlIHRvIGludmFsaWRhdGUgZXZlcnl0aGluZy5cbiAgICAgICAgLy8gT3RoZXJ3aXNlIHdlIGNhbiByZXVzZSBjYWNoZWQgbGF5b3V0IGluZm9zIG91dHNpZGUgdGhlIGN1cnJlbnQgdmlzaWJsZSByZWN0LlxuICAgICAgICB0aGlzLmludmFsaWRhdGVFdmVyeXRoaW5nID0gdGhpcy5zaG91bGRJbnZhbGlkYXRlRXZlcnl0aGluZyhpbnZhbGlkYXRpb25Db250ZXh0KTtcbiAgICAgICAgaWYgKHRoaXMuaW52YWxpZGF0ZUV2ZXJ5dGhpbmcpIHtcbiAgICAgICAgICAgIHRoaXMucmVxdWVzdGVkUmVjdCA9IHRoaXMudmlydHVhbGl6ZXIudmlzaWJsZVJlY3QuY29weSgpO1xuICAgICAgICAgICAgdGhpcy5sYXlvdXROb2Rlcy5jbGVhcigpO1xuICAgICAgICB9XG4gICAgICAgIGxldCBvcHRpb25zID0gaW52YWxpZGF0aW9uQ29udGV4dC5sYXlvdXRPcHRpb25zO1xuICAgICAgICB2YXIgX29wdGlvbnNfcm93SGVpZ2h0O1xuICAgICAgICB0aGlzLnJvd0hlaWdodCA9IChfb3B0aW9uc19yb3dIZWlnaHQgPSBvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMucm93SGVpZ2h0KSAhPT0gbnVsbCAmJiBfb3B0aW9uc19yb3dIZWlnaHQgIT09IHZvaWQgMCA/IF9vcHRpb25zX3Jvd0hlaWdodCA6IHRoaXMucm93SGVpZ2h0O1xuICAgICAgICB2YXIgX29wdGlvbnNfZXN0aW1hdGVkUm93SGVpZ2h0O1xuICAgICAgICB0aGlzLmVzdGltYXRlZFJvd0hlaWdodCA9IChfb3B0aW9uc19lc3RpbWF0ZWRSb3dIZWlnaHQgPSBvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMuZXN0aW1hdGVkUm93SGVpZ2h0KSAhPT0gbnVsbCAmJiBfb3B0aW9uc19lc3RpbWF0ZWRSb3dIZWlnaHQgIT09IHZvaWQgMCA/IF9vcHRpb25zX2VzdGltYXRlZFJvd0hlaWdodCA6IHRoaXMuZXN0aW1hdGVkUm93SGVpZ2h0O1xuICAgICAgICB2YXIgX29wdGlvbnNfaGVhZGluZ0hlaWdodDtcbiAgICAgICAgdGhpcy5oZWFkaW5nSGVpZ2h0ID0gKF9vcHRpb25zX2hlYWRpbmdIZWlnaHQgPSBvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMuaGVhZGluZ0hlaWdodCkgIT09IG51bGwgJiYgX29wdGlvbnNfaGVhZGluZ0hlaWdodCAhPT0gdm9pZCAwID8gX29wdGlvbnNfaGVhZGluZ0hlaWdodCA6IHRoaXMuaGVhZGluZ0hlaWdodDtcbiAgICAgICAgdmFyIF9vcHRpb25zX2VzdGltYXRlZEhlYWRpbmdIZWlnaHQ7XG4gICAgICAgIHRoaXMuZXN0aW1hdGVkSGVhZGluZ0hlaWdodCA9IChfb3B0aW9uc19lc3RpbWF0ZWRIZWFkaW5nSGVpZ2h0ID0gb3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLmVzdGltYXRlZEhlYWRpbmdIZWlnaHQpICE9PSBudWxsICYmIF9vcHRpb25zX2VzdGltYXRlZEhlYWRpbmdIZWlnaHQgIT09IHZvaWQgMCA/IF9vcHRpb25zX2VzdGltYXRlZEhlYWRpbmdIZWlnaHQgOiB0aGlzLmVzdGltYXRlZEhlYWRpbmdIZWlnaHQ7XG4gICAgICAgIHZhciBfb3B0aW9uc19sb2FkZXJIZWlnaHQ7XG4gICAgICAgIHRoaXMubG9hZGVySGVpZ2h0ID0gKF9vcHRpb25zX2xvYWRlckhlaWdodCA9IG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5sb2FkZXJIZWlnaHQpICE9PSBudWxsICYmIF9vcHRpb25zX2xvYWRlckhlaWdodCAhPT0gdm9pZCAwID8gX29wdGlvbnNfbG9hZGVySGVpZ2h0IDogdGhpcy5sb2FkZXJIZWlnaHQ7XG4gICAgICAgIHZhciBfb3B0aW9uc19kcm9wSW5kaWNhdG9yVGhpY2tuZXNzO1xuICAgICAgICB0aGlzLmRyb3BJbmRpY2F0b3JUaGlja25lc3MgPSAoX29wdGlvbnNfZHJvcEluZGljYXRvclRoaWNrbmVzcyA9IG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5kcm9wSW5kaWNhdG9yVGhpY2tuZXNzKSAhPT0gbnVsbCAmJiBfb3B0aW9uc19kcm9wSW5kaWNhdG9yVGhpY2tuZXNzICE9PSB2b2lkIDAgPyBfb3B0aW9uc19kcm9wSW5kaWNhdG9yVGhpY2tuZXNzIDogdGhpcy5kcm9wSW5kaWNhdG9yVGhpY2tuZXNzO1xuICAgICAgICB2YXIgX29wdGlvbnNfZ2FwO1xuICAgICAgICB0aGlzLmdhcCA9IChfb3B0aW9uc19nYXAgPSBvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMuZ2FwKSAhPT0gbnVsbCAmJiBfb3B0aW9uc19nYXAgIT09IHZvaWQgMCA/IF9vcHRpb25zX2dhcCA6IHRoaXMuZ2FwO1xuICAgICAgICB2YXIgX29wdGlvbnNfcGFkZGluZztcbiAgICAgICAgdGhpcy5wYWRkaW5nID0gKF9vcHRpb25zX3BhZGRpbmcgPSBvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMucGFkZGluZykgIT09IG51bGwgJiYgX29wdGlvbnNfcGFkZGluZyAhPT0gdm9pZCAwID8gX29wdGlvbnNfcGFkZGluZyA6IHRoaXMucGFkZGluZztcbiAgICAgICAgdGhpcy5yb290Tm9kZXMgPSB0aGlzLmJ1aWxkQ29sbGVjdGlvbigpO1xuICAgICAgICAvLyBSZW1vdmUgZGVsZXRlZCBsYXlvdXQgbm9kZXNcbiAgICAgICAgaWYgKHRoaXMubGFzdENvbGxlY3Rpb24gJiYgY29sbGVjdGlvbiAhPT0gdGhpcy5sYXN0Q29sbGVjdGlvbikge1xuICAgICAgICAgICAgZm9yIChsZXQga2V5IG9mIHRoaXMubGFzdENvbGxlY3Rpb24uZ2V0S2V5cygpKWlmICghY29sbGVjdGlvbi5nZXRJdGVtKGtleSkpIHtcbiAgICAgICAgICAgICAgICBsZXQgbGF5b3V0Tm9kZSA9IHRoaXMubGF5b3V0Tm9kZXMuZ2V0KGtleSk7XG4gICAgICAgICAgICAgICAgaWYgKGxheW91dE5vZGUpIHRoaXMubGF5b3V0Tm9kZXMuZGVsZXRlKGtleSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5sYXN0Q29sbGVjdGlvbiA9IGNvbGxlY3Rpb247XG4gICAgICAgIHRoaXMuaW52YWxpZGF0ZUV2ZXJ5dGhpbmcgPSBmYWxzZTtcbiAgICAgICAgdGhpcy52YWxpZFJlY3QgPSB0aGlzLnJlcXVlc3RlZFJlY3QuY29weSgpO1xuICAgIH1cbiAgICBidWlsZENvbGxlY3Rpb24oeSA9IHRoaXMucGFkZGluZykge1xuICAgICAgICBsZXQgY29sbGVjdGlvbiA9IHRoaXMudmlydHVhbGl6ZXIuY29sbGVjdGlvbjtcbiAgICAgICAgbGV0IHNraXBwZWQgPSAwO1xuICAgICAgICBsZXQgbm9kZXMgPSBbXTtcbiAgICAgICAgZm9yIChsZXQgbm9kZSBvZiBjb2xsZWN0aW9uKXtcbiAgICAgICAgICAgIHZhciBfdGhpc19yb3dIZWlnaHQsIF9yZWY7XG4gICAgICAgICAgICBsZXQgcm93SGVpZ2h0ID0gKChfcmVmID0gKF90aGlzX3Jvd0hlaWdodCA9IHRoaXMucm93SGVpZ2h0KSAhPT0gbnVsbCAmJiBfdGhpc19yb3dIZWlnaHQgIT09IHZvaWQgMCA/IF90aGlzX3Jvd0hlaWdodCA6IHRoaXMuZXN0aW1hdGVkUm93SGVpZ2h0KSAhPT0gbnVsbCAmJiBfcmVmICE9PSB2b2lkIDAgPyBfcmVmIDogJDYxZWY2MGZjOWIxMDQxZjQkdmFyJERFRkFVTFRfSEVJR0hUKSArIHRoaXMuZ2FwO1xuICAgICAgICAgICAgLy8gU2tpcCByb3dzIGJlZm9yZSB0aGUgdmFsaWQgcmVjdGFuZ2xlIHVubGVzcyB0aGV5IGFyZSBhbHJlYWR5IGNhY2hlZC5cbiAgICAgICAgICAgIGlmIChub2RlLnR5cGUgPT09ICdpdGVtJyAmJiB5ICsgcm93SGVpZ2h0IDwgdGhpcy5yZXF1ZXN0ZWRSZWN0LnkgJiYgIXRoaXMuaXNWYWxpZChub2RlLCB5KSkge1xuICAgICAgICAgICAgICAgIHkgKz0gcm93SGVpZ2h0O1xuICAgICAgICAgICAgICAgIHNraXBwZWQrKztcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGxldCBsYXlvdXROb2RlID0gdGhpcy5idWlsZENoaWxkKG5vZGUsIHRoaXMucGFkZGluZywgeSwgbnVsbCk7XG4gICAgICAgICAgICB5ID0gbGF5b3V0Tm9kZS5sYXlvdXRJbmZvLnJlY3QubWF4WSArIHRoaXMuZ2FwO1xuICAgICAgICAgICAgbm9kZXMucHVzaChsYXlvdXROb2RlKTtcbiAgICAgICAgICAgIGlmIChub2RlLnR5cGUgPT09ICdpdGVtJyAmJiB5ID4gdGhpcy5yZXF1ZXN0ZWRSZWN0Lm1heFkpIHtcbiAgICAgICAgICAgICAgICB5ICs9IChjb2xsZWN0aW9uLnNpemUgLSAobm9kZXMubGVuZ3RoICsgc2tpcHBlZCkpICogcm93SGVpZ2h0O1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHkgLT0gdGhpcy5nYXA7XG4gICAgICAgIHkgKz0gdGhpcy5wYWRkaW5nO1xuICAgICAgICB0aGlzLmNvbnRlbnRTaXplID0gbmV3ICgwLCAkaW1nMjYkU2l6ZSkodGhpcy52aXJ0dWFsaXplci52aXNpYmxlUmVjdC53aWR0aCwgeSk7XG4gICAgICAgIHJldHVybiBub2RlcztcbiAgICB9XG4gICAgaXNWYWxpZChub2RlLCB5KSB7XG4gICAgICAgIGxldCBjYWNoZWQgPSB0aGlzLmxheW91dE5vZGVzLmdldChub2RlLmtleSk7XG4gICAgICAgIHJldHVybiAhdGhpcy5pbnZhbGlkYXRlRXZlcnl0aGluZyAmJiBjYWNoZWQgJiYgY2FjaGVkLm5vZGUgPT09IG5vZGUgJiYgeSA9PT0gY2FjaGVkLmxheW91dEluZm8ucmVjdC55ICYmIGNhY2hlZC5sYXlvdXRJbmZvLnJlY3QuaW50ZXJzZWN0cyh0aGlzLnZhbGlkUmVjdCkgJiYgY2FjaGVkLnZhbGlkUmVjdC5jb250YWluc1JlY3QoY2FjaGVkLmxheW91dEluZm8ucmVjdC5pbnRlcnNlY3Rpb24odGhpcy5yZXF1ZXN0ZWRSZWN0KSk7XG4gICAgfVxuICAgIGJ1aWxkQ2hpbGQobm9kZSwgeCwgeSwgcGFyZW50S2V5KSB7XG4gICAgICAgIGlmICh0aGlzLmlzVmFsaWQobm9kZSwgeSkpIHJldHVybiB0aGlzLmxheW91dE5vZGVzLmdldChub2RlLmtleSk7XG4gICAgICAgIGxldCBsYXlvdXROb2RlID0gdGhpcy5idWlsZE5vZGUobm9kZSwgeCwgeSk7XG4gICAgICAgIGxheW91dE5vZGUubGF5b3V0SW5mby5wYXJlbnRLZXkgPSBwYXJlbnRLZXkgIT09IG51bGwgJiYgcGFyZW50S2V5ICE9PSB2b2lkIDAgPyBwYXJlbnRLZXkgOiBudWxsO1xuICAgICAgICB0aGlzLmxheW91dE5vZGVzLnNldChub2RlLmtleSwgbGF5b3V0Tm9kZSk7XG4gICAgICAgIHJldHVybiBsYXlvdXROb2RlO1xuICAgIH1cbiAgICBidWlsZE5vZGUobm9kZSwgeCwgeSkge1xuICAgICAgICBzd2l0Y2gobm9kZS50eXBlKXtcbiAgICAgICAgICAgIGNhc2UgJ3NlY3Rpb24nOlxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmJ1aWxkU2VjdGlvbihub2RlLCB4LCB5KTtcbiAgICAgICAgICAgIGNhc2UgJ2l0ZW0nOlxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmJ1aWxkSXRlbShub2RlLCB4LCB5KTtcbiAgICAgICAgICAgIGNhc2UgJ2hlYWRlcic6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuYnVpbGRTZWN0aW9uSGVhZGVyKG5vZGUsIHgsIHkpO1xuICAgICAgICAgICAgY2FzZSAnbG9hZGVyJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5idWlsZExvYWRlcihub2RlLCB4LCB5KTtcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdVbnN1cHBvcnRlZCBub2RlIHR5cGU6ICcgKyBub2RlLnR5cGUpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGJ1aWxkTG9hZGVyKG5vZGUsIHgsIHkpIHtcbiAgICAgICAgbGV0IHJlY3QgPSBuZXcgKDAsICRpbWcyNiRSZWN0KSh4LCB5LCB0aGlzLnBhZGRpbmcsIDApO1xuICAgICAgICBsZXQgbGF5b3V0SW5mbyA9IG5ldyAoMCwgJGltZzI2JExheW91dEluZm8pKCdsb2FkZXInLCBub2RlLmtleSwgcmVjdCk7XG4gICAgICAgIHJlY3Qud2lkdGggPSB0aGlzLnZpcnR1YWxpemVyLmNvbnRlbnRTaXplLndpZHRoIC0gdGhpcy5wYWRkaW5nIC0geDtcbiAgICAgICAgcmVjdC5oZWlnaHQgPSB0aGlzLmxvYWRlckhlaWdodCB8fCB0aGlzLnJvd0hlaWdodCB8fCB0aGlzLmVzdGltYXRlZFJvd0hlaWdodCB8fCAkNjFlZjYwZmM5YjEwNDFmNCR2YXIkREVGQVVMVF9IRUlHSFQ7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBsYXlvdXRJbmZvOiBsYXlvdXRJbmZvLFxuICAgICAgICAgICAgdmFsaWRSZWN0OiByZWN0LmludGVyc2VjdGlvbih0aGlzLnJlcXVlc3RlZFJlY3QpXG4gICAgICAgIH07XG4gICAgfVxuICAgIGJ1aWxkU2VjdGlvbihub2RlLCB4LCB5KSB7XG4gICAgICAgIGxldCBjb2xsZWN0aW9uID0gdGhpcy52aXJ0dWFsaXplci5jb2xsZWN0aW9uO1xuICAgICAgICBsZXQgd2lkdGggPSB0aGlzLnZpcnR1YWxpemVyLnZpc2libGVSZWN0LndpZHRoIC0gdGhpcy5wYWRkaW5nO1xuICAgICAgICBsZXQgcmVjdCA9IG5ldyAoMCwgJGltZzI2JFJlY3QpKHgsIHksIHdpZHRoIC0geCwgMCk7XG4gICAgICAgIGxldCBsYXlvdXRJbmZvID0gbmV3ICgwLCAkaW1nMjYkTGF5b3V0SW5mbykobm9kZS50eXBlLCBub2RlLmtleSwgcmVjdCk7XG4gICAgICAgIGxldCBzdGFydFkgPSB5O1xuICAgICAgICBsZXQgc2tpcHBlZCA9IDA7XG4gICAgICAgIGxldCBjaGlsZHJlbiA9IFtdO1xuICAgICAgICBmb3IgKGxldCBjaGlsZCBvZiAoMCwgJGltZzI2JGdldENoaWxkTm9kZXMpKG5vZGUsIGNvbGxlY3Rpb24pKXtcbiAgICAgICAgICAgIHZhciBfdGhpc19yb3dIZWlnaHQsIF9yZWY7XG4gICAgICAgICAgICBsZXQgcm93SGVpZ2h0ID0gKChfcmVmID0gKF90aGlzX3Jvd0hlaWdodCA9IHRoaXMucm93SGVpZ2h0KSAhPT0gbnVsbCAmJiBfdGhpc19yb3dIZWlnaHQgIT09IHZvaWQgMCA/IF90aGlzX3Jvd0hlaWdodCA6IHRoaXMuZXN0aW1hdGVkUm93SGVpZ2h0KSAhPT0gbnVsbCAmJiBfcmVmICE9PSB2b2lkIDAgPyBfcmVmIDogJDYxZWY2MGZjOWIxMDQxZjQkdmFyJERFRkFVTFRfSEVJR0hUKSArIHRoaXMuZ2FwO1xuICAgICAgICAgICAgLy8gU2tpcCByb3dzIGJlZm9yZSB0aGUgdmFsaWQgcmVjdGFuZ2xlIHVubGVzcyB0aGV5IGFyZSBhbHJlYWR5IGNhY2hlZC5cbiAgICAgICAgICAgIGlmICh5ICsgcm93SGVpZ2h0IDwgdGhpcy5yZXF1ZXN0ZWRSZWN0LnkgJiYgIXRoaXMuaXNWYWxpZChub2RlLCB5KSkge1xuICAgICAgICAgICAgICAgIHkgKz0gcm93SGVpZ2h0O1xuICAgICAgICAgICAgICAgIHNraXBwZWQrKztcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGxldCBsYXlvdXROb2RlID0gdGhpcy5idWlsZENoaWxkKGNoaWxkLCB4LCB5LCBsYXlvdXRJbmZvLmtleSk7XG4gICAgICAgICAgICB5ID0gbGF5b3V0Tm9kZS5sYXlvdXRJbmZvLnJlY3QubWF4WSArIHRoaXMuZ2FwO1xuICAgICAgICAgICAgY2hpbGRyZW4ucHVzaChsYXlvdXROb2RlKTtcbiAgICAgICAgICAgIGlmICh5ID4gdGhpcy5yZXF1ZXN0ZWRSZWN0Lm1heFkpIHtcbiAgICAgICAgICAgICAgICAvLyBFc3RpbWF0ZSB0aGUgcmVtYWluaW5nIGhlaWdodCBmb3Igcm93cyB0aGF0IHdlIGRvbid0IG5lZWQgdG8gbGF5b3V0IHJpZ2h0IG5vdy5cbiAgICAgICAgICAgICAgICB5ICs9IChbXG4gICAgICAgICAgICAgICAgICAgIC4uLigwLCAkaW1nMjYkZ2V0Q2hpbGROb2Rlcykobm9kZSwgY29sbGVjdGlvbilcbiAgICAgICAgICAgICAgICBdLmxlbmd0aCAtIChjaGlsZHJlbi5sZW5ndGggKyBza2lwcGVkKSkgKiByb3dIZWlnaHQ7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgeSAtPSB0aGlzLmdhcDtcbiAgICAgICAgcmVjdC5oZWlnaHQgPSB5IC0gc3RhcnRZO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgbGF5b3V0SW5mbzogbGF5b3V0SW5mbyxcbiAgICAgICAgICAgIGNoaWxkcmVuOiBjaGlsZHJlbixcbiAgICAgICAgICAgIHZhbGlkUmVjdDogbGF5b3V0SW5mby5yZWN0LmludGVyc2VjdGlvbih0aGlzLnJlcXVlc3RlZFJlY3QpLFxuICAgICAgICAgICAgbm9kZTogbm9kZVxuICAgICAgICB9O1xuICAgIH1cbiAgICBidWlsZFNlY3Rpb25IZWFkZXIobm9kZSwgeCwgeSkge1xuICAgICAgICBsZXQgd2lkdGggPSB0aGlzLnZpcnR1YWxpemVyLnZpc2libGVSZWN0LndpZHRoIC0gdGhpcy5wYWRkaW5nO1xuICAgICAgICBsZXQgcmVjdEhlaWdodCA9IHRoaXMuaGVhZGluZ0hlaWdodDtcbiAgICAgICAgbGV0IGlzRXN0aW1hdGVkID0gZmFsc2U7XG4gICAgICAgIC8vIElmIG5vIGV4cGxpY2l0IGhlaWdodCBpcyBhdmFpbGFibGUsIHVzZSBhbiBlc3RpbWF0ZWQgaGVpZ2h0LlxuICAgICAgICBpZiAocmVjdEhlaWdodCA9PSBudWxsKSB7XG4gICAgICAgICAgICAvLyBJZiBhIHByZXZpb3VzIHZlcnNpb24gb2YgdGhpcyBsYXlvdXQgaW5mbyBleGlzdHMsIHJldXNlIGl0cyBoZWlnaHQuXG4gICAgICAgICAgICAvLyBNYXJrIGFzIGVzdGltYXRlZCBpZiB0aGUgc2l6ZSBvZiB0aGUgb3ZlcmFsbCB2aXJ0dWFsaXplciBjaGFuZ2VkLFxuICAgICAgICAgICAgLy8gb3IgdGhlIGNvbnRlbnQgb2YgdGhlIGl0ZW0gY2hhbmdlZC5cbiAgICAgICAgICAgIGxldCBwcmV2aW91c0xheW91dE5vZGUgPSB0aGlzLmxheW91dE5vZGVzLmdldChub2RlLmtleSk7XG4gICAgICAgICAgICBsZXQgcHJldmlvdXNMYXlvdXRJbmZvID0gcHJldmlvdXNMYXlvdXROb2RlID09PSBudWxsIHx8IHByZXZpb3VzTGF5b3V0Tm9kZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogcHJldmlvdXNMYXlvdXROb2RlLmxheW91dEluZm87XG4gICAgICAgICAgICBpZiAocHJldmlvdXNMYXlvdXRJbmZvKSB7XG4gICAgICAgICAgICAgICAgbGV0IGN1ck5vZGUgPSB0aGlzLnZpcnR1YWxpemVyLmNvbGxlY3Rpb24uZ2V0SXRlbShub2RlLmtleSk7XG4gICAgICAgICAgICAgICAgbGV0IGxhc3ROb2RlID0gdGhpcy5sYXN0Q29sbGVjdGlvbiA/IHRoaXMubGFzdENvbGxlY3Rpb24uZ2V0SXRlbShub2RlLmtleSkgOiBudWxsO1xuICAgICAgICAgICAgICAgIHJlY3RIZWlnaHQgPSBwcmV2aW91c0xheW91dEluZm8ucmVjdC5oZWlnaHQ7XG4gICAgICAgICAgICAgICAgaXNFc3RpbWF0ZWQgPSB3aWR0aCAhPT0gcHJldmlvdXNMYXlvdXRJbmZvLnJlY3Qud2lkdGggfHwgY3VyTm9kZSAhPT0gbGFzdE5vZGUgfHwgcHJldmlvdXNMYXlvdXRJbmZvLmVzdGltYXRlZFNpemU7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJlY3RIZWlnaHQgPSBub2RlLnJlbmRlcmVkID8gdGhpcy5lc3RpbWF0ZWRIZWFkaW5nSGVpZ2h0IDogMDtcbiAgICAgICAgICAgICAgICBpc0VzdGltYXRlZCA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHJlY3RIZWlnaHQgPT0gbnVsbCkgcmVjdEhlaWdodCA9ICQ2MWVmNjBmYzliMTA0MWY0JHZhciRERUZBVUxUX0hFSUdIVDtcbiAgICAgICAgbGV0IGhlYWRlclJlY3QgPSBuZXcgKDAsICRpbWcyNiRSZWN0KSh4LCB5LCB3aWR0aCAtIHgsIHJlY3RIZWlnaHQpO1xuICAgICAgICBsZXQgaGVhZGVyID0gbmV3ICgwLCAkaW1nMjYkTGF5b3V0SW5mbykoJ2hlYWRlcicsIG5vZGUua2V5LCBoZWFkZXJSZWN0KTtcbiAgICAgICAgaGVhZGVyLmVzdGltYXRlZFNpemUgPSBpc0VzdGltYXRlZDtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGxheW91dEluZm86IGhlYWRlcixcbiAgICAgICAgICAgIGNoaWxkcmVuOiBbXSxcbiAgICAgICAgICAgIHZhbGlkUmVjdDogaGVhZGVyLnJlY3QuaW50ZXJzZWN0aW9uKHRoaXMucmVxdWVzdGVkUmVjdCksXG4gICAgICAgICAgICBub2RlOiBub2RlXG4gICAgICAgIH07XG4gICAgfVxuICAgIGJ1aWxkSXRlbShub2RlLCB4LCB5KSB7XG4gICAgICAgIGxldCB3aWR0aCA9IHRoaXMudmlydHVhbGl6ZXIudmlzaWJsZVJlY3Qud2lkdGggLSB0aGlzLnBhZGRpbmcgLSB4O1xuICAgICAgICBsZXQgcmVjdEhlaWdodCA9IHRoaXMucm93SGVpZ2h0O1xuICAgICAgICBsZXQgaXNFc3RpbWF0ZWQgPSBmYWxzZTtcbiAgICAgICAgLy8gSWYgbm8gZXhwbGljaXQgaGVpZ2h0IGlzIGF2YWlsYWJsZSwgdXNlIGFuIGVzdGltYXRlZCBoZWlnaHQuXG4gICAgICAgIGlmIChyZWN0SGVpZ2h0ID09IG51bGwpIHtcbiAgICAgICAgICAgIC8vIElmIGEgcHJldmlvdXMgdmVyc2lvbiBvZiB0aGlzIGxheW91dCBpbmZvIGV4aXN0cywgcmV1c2UgaXRzIGhlaWdodC5cbiAgICAgICAgICAgIC8vIE1hcmsgYXMgZXN0aW1hdGVkIGlmIHRoZSBzaXplIG9mIHRoZSBvdmVyYWxsIHZpcnR1YWxpemVyIGNoYW5nZWQsXG4gICAgICAgICAgICAvLyBvciB0aGUgY29udGVudCBvZiB0aGUgaXRlbSBjaGFuZ2VkLlxuICAgICAgICAgICAgbGV0IHByZXZpb3VzTGF5b3V0Tm9kZSA9IHRoaXMubGF5b3V0Tm9kZXMuZ2V0KG5vZGUua2V5KTtcbiAgICAgICAgICAgIGlmIChwcmV2aW91c0xheW91dE5vZGUpIHtcbiAgICAgICAgICAgICAgICByZWN0SGVpZ2h0ID0gcHJldmlvdXNMYXlvdXROb2RlLmxheW91dEluZm8ucmVjdC5oZWlnaHQ7XG4gICAgICAgICAgICAgICAgaXNFc3RpbWF0ZWQgPSB3aWR0aCAhPT0gcHJldmlvdXNMYXlvdXROb2RlLmxheW91dEluZm8ucmVjdC53aWR0aCB8fCBub2RlICE9PSBwcmV2aW91c0xheW91dE5vZGUubm9kZSB8fCBwcmV2aW91c0xheW91dE5vZGUubGF5b3V0SW5mby5lc3RpbWF0ZWRTaXplO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZWN0SGVpZ2h0ID0gdGhpcy5lc3RpbWF0ZWRSb3dIZWlnaHQ7XG4gICAgICAgICAgICAgICAgaXNFc3RpbWF0ZWQgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChyZWN0SGVpZ2h0ID09IG51bGwpIHJlY3RIZWlnaHQgPSAkNjFlZjYwZmM5YjEwNDFmNCR2YXIkREVGQVVMVF9IRUlHSFQ7XG4gICAgICAgIGxldCByZWN0ID0gbmV3ICgwLCAkaW1nMjYkUmVjdCkoeCwgeSwgd2lkdGgsIHJlY3RIZWlnaHQpO1xuICAgICAgICBsZXQgbGF5b3V0SW5mbyA9IG5ldyAoMCwgJGltZzI2JExheW91dEluZm8pKG5vZGUudHlwZSwgbm9kZS5rZXksIHJlY3QpO1xuICAgICAgICBsYXlvdXRJbmZvLmVzdGltYXRlZFNpemUgPSBpc0VzdGltYXRlZDtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGxheW91dEluZm86IGxheW91dEluZm8sXG4gICAgICAgICAgICBjaGlsZHJlbjogW10sXG4gICAgICAgICAgICB2YWxpZFJlY3Q6IGxheW91dEluZm8ucmVjdCxcbiAgICAgICAgICAgIG5vZGU6IG5vZGVcbiAgICAgICAgfTtcbiAgICB9XG4gICAgdXBkYXRlSXRlbVNpemUoa2V5LCBzaXplKSB7XG4gICAgICAgIGxldCBsYXlvdXROb2RlID0gdGhpcy5sYXlvdXROb2Rlcy5nZXQoa2V5KTtcbiAgICAgICAgLy8gSWYgbm8gbGF5b3V0SW5mbywgaXRlbSBoYXMgYmVlbiBkZWxldGVkL3JlbW92ZWQuXG4gICAgICAgIGlmICghbGF5b3V0Tm9kZSkgcmV0dXJuIGZhbHNlO1xuICAgICAgICBsZXQgY29sbGVjdGlvbiA9IHRoaXMudmlydHVhbGl6ZXIuY29sbGVjdGlvbjtcbiAgICAgICAgbGV0IGxheW91dEluZm8gPSBsYXlvdXROb2RlLmxheW91dEluZm87XG4gICAgICAgIGxheW91dEluZm8uZXN0aW1hdGVkU2l6ZSA9IGZhbHNlO1xuICAgICAgICBpZiAobGF5b3V0SW5mby5yZWN0LmhlaWdodCAhPT0gc2l6ZS5oZWlnaHQpIHtcbiAgICAgICAgICAgIC8vIENvcHkgbGF5b3V0IGluZm8gcmF0aGVyIHRoYW4gbXV0YXRpbmcgc28gdGhhdCBsYXRlciBjYWNoZXMgYXJlIGludmFsaWRhdGVkLlxuICAgICAgICAgICAgbGV0IG5ld0xheW91dEluZm8gPSBsYXlvdXRJbmZvLmNvcHkoKTtcbiAgICAgICAgICAgIG5ld0xheW91dEluZm8ucmVjdC5oZWlnaHQgPSBzaXplLmhlaWdodDtcbiAgICAgICAgICAgIGxheW91dE5vZGUubGF5b3V0SW5mbyA9IG5ld0xheW91dEluZm87XG4gICAgICAgICAgICAvLyBJdGVtcyBhZnRlciB0aGlzIGxheW91dEluZm8gd2lsbCBuZWVkIHRvIGJlIHJlcG9zaXRpb25lZCB0byBhY2NvdW50IGZvciB0aGUgbmV3IGhlaWdodC5cbiAgICAgICAgICAgIC8vIEFkanVzdCB0aGUgdmFsaWRSZWN0IHNvIHRoYXQgb25seSBpdGVtcyBhYm92ZSByZW1haW4gdmFsaWQuXG4gICAgICAgICAgICB0aGlzLnZhbGlkUmVjdC5oZWlnaHQgPSBNYXRoLm1pbih0aGlzLnZhbGlkUmVjdC5oZWlnaHQsIGxheW91dEluZm8ucmVjdC55IC0gdGhpcy52YWxpZFJlY3QueSk7XG4gICAgICAgICAgICAvLyBUaGUgcmVxdWVzdGVkUmVjdCBhbHNvIG5lZWRzIHRvIGJlIGFkanVzdGVkIHRvIGFjY291bnQgZm9yIHRoZSBoZWlnaHQgZGlmZmVyZW5jZS5cbiAgICAgICAgICAgIHRoaXMucmVxdWVzdGVkUmVjdC5oZWlnaHQgKz0gbmV3TGF5b3V0SW5mby5yZWN0LmhlaWdodCAtIGxheW91dEluZm8ucmVjdC5oZWlnaHQ7XG4gICAgICAgICAgICAvLyBJbnZhbGlkYXRlIGxheW91dCBmb3IgdGhpcyBsYXlvdXQgbm9kZSBhbmQgYWxsIHBhcmVudHNcbiAgICAgICAgICAgIHRoaXMudXBkYXRlTGF5b3V0Tm9kZShrZXksIGxheW91dEluZm8sIG5ld0xheW91dEluZm8pO1xuICAgICAgICAgICAgbGV0IG5vZGUgPSBsYXlvdXRJbmZvLnBhcmVudEtleSAhPSBudWxsID8gY29sbGVjdGlvbi5nZXRJdGVtKGxheW91dEluZm8ucGFyZW50S2V5KSA6IG51bGw7XG4gICAgICAgICAgICB3aGlsZShub2RlKXtcbiAgICAgICAgICAgICAgICB0aGlzLnVwZGF0ZUxheW91dE5vZGUobm9kZS5rZXksIGxheW91dEluZm8sIG5ld0xheW91dEluZm8pO1xuICAgICAgICAgICAgICAgIG5vZGUgPSBub2RlLnBhcmVudEtleSAhPSBudWxsID8gY29sbGVjdGlvbi5nZXRJdGVtKG5vZGUucGFyZW50S2V5KSA6IG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHVwZGF0ZUxheW91dE5vZGUoa2V5LCBvbGRMYXlvdXRJbmZvLCBuZXdMYXlvdXRJbmZvKSB7XG4gICAgICAgIGxldCBuID0gdGhpcy5sYXlvdXROb2Rlcy5nZXQoa2V5KTtcbiAgICAgICAgaWYgKG4pIHtcbiAgICAgICAgICAgIC8vIEludmFsaWRhdGUgYnkgaW50ZXJzZWN0aW5nIHRoZSB2YWxpZFJlY3Qgb2YgdGhpcyBub2RlIHdpdGggdGhlIG92ZXJhbGwgdmFsaWRSZWN0LlxuICAgICAgICAgICAgbi52YWxpZFJlY3QgPSBuLnZhbGlkUmVjdC5pbnRlcnNlY3Rpb24odGhpcy52YWxpZFJlY3QpO1xuICAgICAgICAgICAgLy8gUmVwbGFjZSBsYXlvdXQgaW5mbyBpbiBMYXlvdXROb2RlXG4gICAgICAgICAgICBpZiAobi5sYXlvdXRJbmZvID09PSBvbGRMYXlvdXRJbmZvKSBuLmxheW91dEluZm8gPSBuZXdMYXlvdXRJbmZvO1xuICAgICAgICB9XG4gICAgfVxuICAgIGdldENvbnRlbnRTaXplKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5jb250ZW50U2l6ZTtcbiAgICB9XG4gICAgZ2V0RHJvcFRhcmdldEZyb21Qb2ludCh4LCB5LCBpc1ZhbGlkRHJvcFRhcmdldCkge1xuICAgICAgICB4ICs9IHRoaXMudmlydHVhbGl6ZXIudmlzaWJsZVJlY3QueDtcbiAgICAgICAgeSArPSB0aGlzLnZpcnR1YWxpemVyLnZpc2libGVSZWN0Lnk7XG4gICAgICAgIC8vIEZpbmQgdGhlIGNsb3Nlc3QgaXRlbSB3aXRoaW4gb24gZWl0aGVyIHNpZGUgb2YgdGhlIHBvaW50IHVzaW5nIHRoZSBnYXAgd2lkdGguXG4gICAgICAgIGxldCBzZWFyY2hSZWN0ID0gbmV3ICgwLCAkaW1nMjYkUmVjdCkoeCwgTWF0aC5tYXgoMCwgeSAtIHRoaXMuZ2FwKSwgMSwgdGhpcy5nYXAgKiAyKTtcbiAgICAgICAgbGV0IGNhbmRpZGF0ZXMgPSB0aGlzLmdldFZpc2libGVMYXlvdXRJbmZvcyhzZWFyY2hSZWN0KTtcbiAgICAgICAgbGV0IGtleSA9IG51bGw7XG4gICAgICAgIGxldCBtaW5EaXN0YW5jZSA9IEluZmluaXR5O1xuICAgICAgICBmb3IgKGxldCBjYW5kaWRhdGUgb2YgY2FuZGlkYXRlcyl7XG4gICAgICAgICAgICAvLyBJZ25vcmUgaXRlbXMgb3V0c2lkZSB0aGUgc2VhcmNoIHJlY3QsIGUuZy4gcGVyc2lzdGVkIGtleXMuXG4gICAgICAgICAgICBpZiAoIWNhbmRpZGF0ZS5yZWN0LmludGVyc2VjdHMoc2VhcmNoUmVjdCkpIGNvbnRpbnVlO1xuICAgICAgICAgICAgbGV0IHlEaXN0ID0gTWF0aC5hYnMoY2FuZGlkYXRlLnJlY3QueSAtIHkpO1xuICAgICAgICAgICAgbGV0IG1heFlEaXN0ID0gTWF0aC5hYnMoY2FuZGlkYXRlLnJlY3QubWF4WSAtIHkpO1xuICAgICAgICAgICAgbGV0IGRpc3QgPSBNYXRoLm1pbih5RGlzdCwgbWF4WURpc3QpO1xuICAgICAgICAgICAgaWYgKGRpc3QgPCBtaW5EaXN0YW5jZSkge1xuICAgICAgICAgICAgICAgIG1pbkRpc3RhbmNlID0gZGlzdDtcbiAgICAgICAgICAgICAgICBrZXkgPSBjYW5kaWRhdGUua2V5O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChrZXkgPT0gbnVsbCB8fCB0aGlzLnZpcnR1YWxpemVyLmNvbGxlY3Rpb24uc2l6ZSA9PT0gMCkgcmV0dXJuIHtcbiAgICAgICAgICAgIHR5cGU6ICdyb290J1xuICAgICAgICB9O1xuICAgICAgICBsZXQgbGF5b3V0SW5mbyA9IHRoaXMuZ2V0TGF5b3V0SW5mbyhrZXkpO1xuICAgICAgICBpZiAoIWxheW91dEluZm8pIHJldHVybiBudWxsO1xuICAgICAgICBsZXQgcmVjdCA9IGxheW91dEluZm8ucmVjdDtcbiAgICAgICAgbGV0IHRhcmdldCA9IHtcbiAgICAgICAgICAgIHR5cGU6ICdpdGVtJyxcbiAgICAgICAgICAgIGtleTogbGF5b3V0SW5mby5rZXksXG4gICAgICAgICAgICBkcm9wUG9zaXRpb246ICdvbidcbiAgICAgICAgfTtcbiAgICAgICAgLy8gSWYgZHJvcHBpbmcgb24gdGhlIGl0ZW0gaXNuJ3QgYWNjZXB0ZWQsIHRyeSB0aGUgdGFyZ2V0IGJlZm9yZSBvciBhZnRlciBkZXBlbmRpbmcgb24gdGhlIHkgcG9zaXRpb24uXG4gICAgICAgIC8vIE90aGVyd2lzZSwgaWYgZHJvcHBpbmcgb24gdGhlIGl0ZW0gaXMgYWNjZXB0ZWQsIHN0aWxsIHRyeSB0aGUgYmVmb3JlL2FmdGVyIHBvc2l0aW9ucyBpZiB3aXRoaW4gMTBweFxuICAgICAgICAvLyBvZiB0aGUgdG9wIG9yIGJvdHRvbSBvZiB0aGUgaXRlbS5cbiAgICAgICAgaWYgKCFpc1ZhbGlkRHJvcFRhcmdldCh0YXJnZXQpKSB7XG4gICAgICAgICAgICBpZiAoeSA8PSByZWN0LnkgKyByZWN0LmhlaWdodCAvIDIgJiYgaXNWYWxpZERyb3BUYXJnZXQoe1xuICAgICAgICAgICAgICAgIC4uLnRhcmdldCxcbiAgICAgICAgICAgICAgICBkcm9wUG9zaXRpb246ICdiZWZvcmUnXG4gICAgICAgICAgICB9KSkgdGFyZ2V0LmRyb3BQb3NpdGlvbiA9ICdiZWZvcmUnO1xuICAgICAgICAgICAgZWxzZSBpZiAoaXNWYWxpZERyb3BUYXJnZXQoe1xuICAgICAgICAgICAgICAgIC4uLnRhcmdldCxcbiAgICAgICAgICAgICAgICBkcm9wUG9zaXRpb246ICdhZnRlcidcbiAgICAgICAgICAgIH0pKSB0YXJnZXQuZHJvcFBvc2l0aW9uID0gJ2FmdGVyJztcbiAgICAgICAgfSBlbHNlIGlmICh5IDw9IHJlY3QueSArIDEwICYmIGlzVmFsaWREcm9wVGFyZ2V0KHtcbiAgICAgICAgICAgIC4uLnRhcmdldCxcbiAgICAgICAgICAgIGRyb3BQb3NpdGlvbjogJ2JlZm9yZSdcbiAgICAgICAgfSkpIHRhcmdldC5kcm9wUG9zaXRpb24gPSAnYmVmb3JlJztcbiAgICAgICAgZWxzZSBpZiAoeSA+PSByZWN0Lm1heFkgLSAxMCAmJiBpc1ZhbGlkRHJvcFRhcmdldCh7XG4gICAgICAgICAgICAuLi50YXJnZXQsXG4gICAgICAgICAgICBkcm9wUG9zaXRpb246ICdhZnRlcidcbiAgICAgICAgfSkpIHRhcmdldC5kcm9wUG9zaXRpb24gPSAnYWZ0ZXInO1xuICAgICAgICByZXR1cm4gdGFyZ2V0O1xuICAgIH1cbiAgICBnZXREcm9wVGFyZ2V0TGF5b3V0SW5mbyh0YXJnZXQpIHtcbiAgICAgICAgbGV0IGxheW91dEluZm8gPSB0aGlzLmdldExheW91dEluZm8odGFyZ2V0LmtleSk7XG4gICAgICAgIGxldCByZWN0O1xuICAgICAgICBpZiAodGFyZ2V0LmRyb3BQb3NpdGlvbiA9PT0gJ2JlZm9yZScpIHJlY3QgPSBuZXcgKDAsICRpbWcyNiRSZWN0KShsYXlvdXRJbmZvLnJlY3QueCwgbGF5b3V0SW5mby5yZWN0LnkgLSB0aGlzLmRyb3BJbmRpY2F0b3JUaGlja25lc3MgLyAyLCBsYXlvdXRJbmZvLnJlY3Qud2lkdGgsIHRoaXMuZHJvcEluZGljYXRvclRoaWNrbmVzcyk7XG4gICAgICAgIGVsc2UgaWYgKHRhcmdldC5kcm9wUG9zaXRpb24gPT09ICdhZnRlcicpIHJlY3QgPSBuZXcgKDAsICRpbWcyNiRSZWN0KShsYXlvdXRJbmZvLnJlY3QueCwgbGF5b3V0SW5mby5yZWN0Lm1heFkgLSB0aGlzLmRyb3BJbmRpY2F0b3JUaGlja25lc3MgLyAyLCBsYXlvdXRJbmZvLnJlY3Qud2lkdGgsIHRoaXMuZHJvcEluZGljYXRvclRoaWNrbmVzcyk7XG4gICAgICAgIGVsc2UgcmVjdCA9IGxheW91dEluZm8ucmVjdDtcbiAgICAgICAgcmV0dXJuIG5ldyAoMCwgJGltZzI2JExheW91dEluZm8pKCdkcm9wSW5kaWNhdG9yJywgdGFyZ2V0LmtleSArICc6JyArIHRhcmdldC5kcm9wUG9zaXRpb24sIHJlY3QpO1xuICAgIH1cbiAgICAvKipcbiAgICogQ3JlYXRlcyBhIG5ldyBMaXN0TGF5b3V0IHdpdGggb3B0aW9ucy4gU2VlIHRoZSBsaXN0IG9mIHByb3BlcnRpZXMgYmVsb3cgZm9yIGEgZGVzY3JpcHRpb25cbiAgICogb2YgdGhlIG9wdGlvbnMgdGhhdCBjYW4gYmUgcHJvdmlkZWQuXG4gICAqLyBjb25zdHJ1Y3RvcihvcHRpb25zID0ge30pe1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB2YXIgX29wdGlvbnNfcm93SGVpZ2h0O1xuICAgICAgICB0aGlzLnJvd0hlaWdodCA9IChfb3B0aW9uc19yb3dIZWlnaHQgPSBvcHRpb25zLnJvd0hlaWdodCkgIT09IG51bGwgJiYgX29wdGlvbnNfcm93SGVpZ2h0ICE9PSB2b2lkIDAgPyBfb3B0aW9uc19yb3dIZWlnaHQgOiBudWxsO1xuICAgICAgICB2YXIgX29wdGlvbnNfZXN0aW1hdGVkUm93SGVpZ2h0O1xuICAgICAgICB0aGlzLmVzdGltYXRlZFJvd0hlaWdodCA9IChfb3B0aW9uc19lc3RpbWF0ZWRSb3dIZWlnaHQgPSBvcHRpb25zLmVzdGltYXRlZFJvd0hlaWdodCkgIT09IG51bGwgJiYgX29wdGlvbnNfZXN0aW1hdGVkUm93SGVpZ2h0ICE9PSB2b2lkIDAgPyBfb3B0aW9uc19lc3RpbWF0ZWRSb3dIZWlnaHQgOiBudWxsO1xuICAgICAgICB2YXIgX29wdGlvbnNfaGVhZGluZ0hlaWdodDtcbiAgICAgICAgdGhpcy5oZWFkaW5nSGVpZ2h0ID0gKF9vcHRpb25zX2hlYWRpbmdIZWlnaHQgPSBvcHRpb25zLmhlYWRpbmdIZWlnaHQpICE9PSBudWxsICYmIF9vcHRpb25zX2hlYWRpbmdIZWlnaHQgIT09IHZvaWQgMCA/IF9vcHRpb25zX2hlYWRpbmdIZWlnaHQgOiBudWxsO1xuICAgICAgICB2YXIgX29wdGlvbnNfZXN0aW1hdGVkSGVhZGluZ0hlaWdodDtcbiAgICAgICAgdGhpcy5lc3RpbWF0ZWRIZWFkaW5nSGVpZ2h0ID0gKF9vcHRpb25zX2VzdGltYXRlZEhlYWRpbmdIZWlnaHQgPSBvcHRpb25zLmVzdGltYXRlZEhlYWRpbmdIZWlnaHQpICE9PSBudWxsICYmIF9vcHRpb25zX2VzdGltYXRlZEhlYWRpbmdIZWlnaHQgIT09IHZvaWQgMCA/IF9vcHRpb25zX2VzdGltYXRlZEhlYWRpbmdIZWlnaHQgOiBudWxsO1xuICAgICAgICB2YXIgX29wdGlvbnNfbG9hZGVySGVpZ2h0O1xuICAgICAgICB0aGlzLmxvYWRlckhlaWdodCA9IChfb3B0aW9uc19sb2FkZXJIZWlnaHQgPSBvcHRpb25zLmxvYWRlckhlaWdodCkgIT09IG51bGwgJiYgX29wdGlvbnNfbG9hZGVySGVpZ2h0ICE9PSB2b2lkIDAgPyBfb3B0aW9uc19sb2FkZXJIZWlnaHQgOiBudWxsO1xuICAgICAgICB0aGlzLmRyb3BJbmRpY2F0b3JUaGlja25lc3MgPSBvcHRpb25zLmRyb3BJbmRpY2F0b3JUaGlja25lc3MgfHwgMjtcbiAgICAgICAgdGhpcy5nYXAgPSBvcHRpb25zLmdhcCB8fCAwO1xuICAgICAgICB0aGlzLnBhZGRpbmcgPSBvcHRpb25zLnBhZGRpbmcgfHwgMDtcbiAgICAgICAgdGhpcy5sYXlvdXROb2RlcyA9IG5ldyBNYXAoKTtcbiAgICAgICAgdGhpcy5yb290Tm9kZXMgPSBbXTtcbiAgICAgICAgdGhpcy5sYXN0Q29sbGVjdGlvbiA9IG51bGw7XG4gICAgICAgIHRoaXMuaW52YWxpZGF0ZUV2ZXJ5dGhpbmcgPSBmYWxzZTtcbiAgICAgICAgdGhpcy52YWxpZFJlY3QgPSBuZXcgKDAsICRpbWcyNiRSZWN0KSgpO1xuICAgICAgICB0aGlzLnJlcXVlc3RlZFJlY3QgPSBuZXcgKDAsICRpbWcyNiRSZWN0KSgpO1xuICAgICAgICB0aGlzLmNvbnRlbnRTaXplID0gbmV3ICgwLCAkaW1nMjYkU2l6ZSkoKTtcbiAgICB9XG59XG5cblxuZXhwb3J0IHskNjFlZjYwZmM5YjEwNDFmNCRleHBvcnQkY2FjYmIzOTI0MTU1ZDY4ZSBhcyBMaXN0TGF5b3V0fTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUxpc3RMYXlvdXQubW9kdWxlLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(pages-dir-node)/../../../../node_modules/.pnpm/@react-stately+layout@4.2.1_react-dom@19.0.0_react@19.0.0__react@19.0.0/node_modules/@react-stately/layout/dist/ListLayout.mjs\n");

/***/ }),

/***/ "(pages-dir-node)/../../../../node_modules/.pnpm/@react-stately+layout@4.2.1_react-dom@19.0.0_react@19.0.0__react@19.0.0/node_modules/@react-stately/layout/dist/TableLayout.mjs":
/*!**********************************************************************************************************************************************************************!*\
  !*** ../../../../node_modules/.pnpm/@react-stately+layout@4.2.1_react-dom@19.0.0_react@19.0.0__react@19.0.0/node_modules/@react-stately/layout/dist/TableLayout.mjs ***!
  \**********************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   TableLayout: () => (/* binding */ $a152112e902709bf$export$62444c3c724b1b20)\n/* harmony export */ });\n/* harmony import */ var _ListLayout_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ListLayout.mjs */ \"(pages-dir-node)/../../../../node_modules/.pnpm/@react-stately+layout@4.2.1_react-dom@19.0.0_react@19.0.0__react@19.0.0/node_modules/@react-stately/layout/dist/ListLayout.mjs\");\n/* harmony import */ var _react_stately_collections__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @react-stately/collections */ \"(pages-dir-node)/../../../../node_modules/.pnpm/@react-stately+collections@3.12.2_react@19.0.0/node_modules/@react-stately/collections/dist/import.mjs\");\n/* harmony import */ var _react_stately_virtualizer__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @react-stately/virtualizer */ \"(pages-dir-node)/../../../../node_modules/.pnpm/@react-stately+virtualizer@4.3.1_react-dom@19.0.0_react@19.0.0__react@19.0.0/node_modules/@react-stately/virtualizer/dist/import.mjs\");\n/* harmony import */ var _react_stately_table__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @react-stately/table */ \"(pages-dir-node)/../../../../node_modules/.pnpm/@react-stately+table@3.14.0_react@19.0.0/node_modules/@react-stately/table/dist/import.mjs\");\n\n\n\n\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */ \n\n\n\nconst $a152112e902709bf$var$DEFAULT_ROW_HEIGHT = 48;\nclass $a152112e902709bf$export$62444c3c724b1b20 extends (0, _ListLayout_mjs__WEBPACK_IMPORTED_MODULE_0__.ListLayout) {\n    // Backward compatibility for subclassing.\n    get collection() {\n        return this.virtualizer.collection;\n    }\n    columnsChanged(newCollection, oldCollection) {\n        return !oldCollection || newCollection.columns !== oldCollection.columns && newCollection.columns.length !== oldCollection.columns.length || newCollection.columns.some((c, i)=>c.key !== oldCollection.columns[i].key || c.props.width !== oldCollection.columns[i].props.width || c.props.minWidth !== oldCollection.columns[i].props.minWidth || c.props.maxWidth !== oldCollection.columns[i].props.maxWidth);\n    }\n    shouldInvalidateLayoutOptions(newOptions, oldOptions) {\n        return newOptions.columnWidths !== oldOptions.columnWidths || super.shouldInvalidateLayoutOptions(newOptions, oldOptions);\n    }\n    update(invalidationContext) {\n        var _invalidationContext_layoutOptions;\n        let newCollection = this.virtualizer.collection;\n        // If columnWidths were provided via layoutOptions, update those.\n        // Otherwise, calculate column widths ourselves.\n        if ((_invalidationContext_layoutOptions = invalidationContext.layoutOptions) === null || _invalidationContext_layoutOptions === void 0 ? void 0 : _invalidationContext_layoutOptions.columnWidths) {\n            if (invalidationContext.layoutOptions.columnWidths !== this.columnWidths) {\n                this.columnWidths = invalidationContext.layoutOptions.columnWidths;\n                invalidationContext.sizeChanged = true;\n            }\n        } else if (invalidationContext.sizeChanged || this.columnsChanged(newCollection, this.lastCollection)) {\n            let columnLayout = new (0, _react_stately_table__WEBPACK_IMPORTED_MODULE_1__.TableColumnLayout)({});\n            this.columnWidths = columnLayout.buildColumnWidths(this.virtualizer.visibleRect.width - this.padding * 2, newCollection, new Map());\n            invalidationContext.sizeChanged = true;\n        }\n        super.update(invalidationContext);\n    }\n    buildCollection() {\n        this.stickyColumnIndices = [];\n        let collection = this.virtualizer.collection;\n        for (let column of collection.columns)// The selection cell and any other sticky columns always need to be visible.\n        // In addition, row headers need to be in the DOM for accessibility labeling.\n        if (this.isStickyColumn(column) || collection.rowHeaderColumnKeys.has(column.key)) this.stickyColumnIndices.push(column.index);\n        let header = this.buildTableHeader();\n        this.layoutNodes.set(header.layoutInfo.key, header);\n        let body = this.buildBody(header.layoutInfo.rect.maxY + this.gap);\n        this.lastPersistedKeys = null;\n        body.layoutInfo.rect.width = Math.max(header.layoutInfo.rect.width, body.layoutInfo.rect.width);\n        this.contentSize = new (0, _react_stately_virtualizer__WEBPACK_IMPORTED_MODULE_2__.Size)(body.layoutInfo.rect.width + this.padding * 2, body.layoutInfo.rect.maxY + this.padding);\n        return [\n            header,\n            body\n        ];\n    }\n    buildTableHeader() {\n        var _collection_head;\n        let collection = this.virtualizer.collection;\n        let rect = new (0, _react_stately_virtualizer__WEBPACK_IMPORTED_MODULE_2__.Rect)(this.padding, this.padding, 0, 0);\n        var _collection_head_key;\n        let layoutInfo = new (0, _react_stately_virtualizer__WEBPACK_IMPORTED_MODULE_2__.LayoutInfo)('header', (_collection_head_key = (_collection_head = collection.head) === null || _collection_head === void 0 ? void 0 : _collection_head.key) !== null && _collection_head_key !== void 0 ? _collection_head_key : 'header', rect);\n        layoutInfo.isSticky = true;\n        layoutInfo.zIndex = 1;\n        let y = this.padding;\n        let width = 0;\n        let children = [];\n        for (let headerRow of collection.headerRows){\n            let layoutNode = this.buildChild(headerRow, this.padding, y, layoutInfo.key);\n            layoutNode.layoutInfo.parentKey = layoutInfo.key;\n            y = layoutNode.layoutInfo.rect.maxY;\n            width = Math.max(width, layoutNode.layoutInfo.rect.width);\n            layoutNode.index = children.length;\n            children.push(layoutNode);\n        }\n        rect.width = width;\n        rect.height = y - this.padding;\n        return {\n            layoutInfo: layoutInfo,\n            children: children,\n            validRect: layoutInfo.rect,\n            node: collection.head\n        };\n    }\n    buildHeaderRow(headerRow, x, y) {\n        let rect = new (0, _react_stately_virtualizer__WEBPACK_IMPORTED_MODULE_2__.Rect)(x, y, 0, 0);\n        let row = new (0, _react_stately_virtualizer__WEBPACK_IMPORTED_MODULE_2__.LayoutInfo)('headerrow', headerRow.key, rect);\n        let height = 0;\n        let columns = [];\n        for (let cell of (0, _react_stately_collections__WEBPACK_IMPORTED_MODULE_3__.getChildNodes)(headerRow, this.virtualizer.collection)){\n            let layoutNode = this.buildChild(cell, x, y, row.key);\n            layoutNode.layoutInfo.parentKey = row.key;\n            x = layoutNode.layoutInfo.rect.maxX;\n            height = Math.max(height, layoutNode.layoutInfo.rect.height);\n            layoutNode.index = columns.length;\n            columns.push(layoutNode);\n        }\n        for (let [i, layout] of columns.entries())layout.layoutInfo.zIndex = columns.length - i + 1;\n        this.setChildHeights(columns, height);\n        rect.height = height;\n        rect.width = x - rect.x;\n        return {\n            layoutInfo: row,\n            children: columns,\n            validRect: rect,\n            node: headerRow\n        };\n    }\n    setChildHeights(children, height) {\n        for (let child of children)if (child.layoutInfo.rect.height !== height) {\n            // Need to copy the layout info before we mutate it.\n            child.layoutInfo = child.layoutInfo.copy();\n            child.layoutInfo.rect.height = height;\n        }\n    }\n    // used to get the column widths when rendering to the DOM\n    getRenderedColumnWidth(node) {\n        let collection = this.virtualizer.collection;\n        var _node_colSpan;\n        let colSpan = (_node_colSpan = node.colSpan) !== null && _node_colSpan !== void 0 ? _node_colSpan : 1;\n        var _node_colIndex;\n        let colIndex = (_node_colIndex = node.colIndex) !== null && _node_colIndex !== void 0 ? _node_colIndex : node.index;\n        let width = 0;\n        for(let i = colIndex; i < colIndex + colSpan; i++){\n            let column = collection.columns[i];\n            var _this_columnWidths_get;\n            if ((column === null || column === void 0 ? void 0 : column.key) != null) width += (_this_columnWidths_get = this.columnWidths.get(column.key)) !== null && _this_columnWidths_get !== void 0 ? _this_columnWidths_get : 0;\n        }\n        return width;\n    }\n    getEstimatedHeight(node, width, height, estimatedHeight) {\n        let isEstimated = false;\n        // If no explicit height is available, use an estimated height.\n        if (height == null) {\n            // If a previous version of this layout info exists, reuse its height.\n            // Mark as estimated if the size of the overall collection view changed,\n            // or the content of the item changed.\n            let previousLayoutNode = this.layoutNodes.get(node.key);\n            if (previousLayoutNode) {\n                height = previousLayoutNode.layoutInfo.rect.height;\n                isEstimated = node !== previousLayoutNode.node || width !== previousLayoutNode.layoutInfo.rect.width || previousLayoutNode.layoutInfo.estimatedSize;\n            } else {\n                height = estimatedHeight !== null && estimatedHeight !== void 0 ? estimatedHeight : $a152112e902709bf$var$DEFAULT_ROW_HEIGHT;\n                isEstimated = true;\n            }\n        }\n        return {\n            height: height,\n            isEstimated: isEstimated\n        };\n    }\n    getEstimatedRowHeight() {\n        var _this_rowHeight, _ref;\n        return (_ref = (_this_rowHeight = this.rowHeight) !== null && _this_rowHeight !== void 0 ? _this_rowHeight : this.estimatedRowHeight) !== null && _ref !== void 0 ? _ref : $a152112e902709bf$var$DEFAULT_ROW_HEIGHT;\n    }\n    buildColumn(node, x, y) {\n        let width = this.getRenderedColumnWidth(node);\n        var _this_headingHeight, _this_estimatedHeadingHeight;\n        let { height: height, isEstimated: isEstimated } = this.getEstimatedHeight(node, width, (_this_headingHeight = this.headingHeight) !== null && _this_headingHeight !== void 0 ? _this_headingHeight : this.rowHeight, (_this_estimatedHeadingHeight = this.estimatedHeadingHeight) !== null && _this_estimatedHeadingHeight !== void 0 ? _this_estimatedHeadingHeight : this.estimatedRowHeight);\n        let rect = new (0, _react_stately_virtualizer__WEBPACK_IMPORTED_MODULE_2__.Rect)(x, y, width, height);\n        let layoutInfo = new (0, _react_stately_virtualizer__WEBPACK_IMPORTED_MODULE_2__.LayoutInfo)(node.type, node.key, rect);\n        layoutInfo.isSticky = this.isStickyColumn(node);\n        layoutInfo.zIndex = layoutInfo.isSticky ? 2 : 1;\n        layoutInfo.estimatedSize = isEstimated;\n        return {\n            layoutInfo: layoutInfo,\n            children: [],\n            validRect: layoutInfo.rect,\n            node: node\n        };\n    }\n    // For subclasses.\n    // eslint-disable-next-line\n    isStickyColumn(node) {\n        return false;\n    }\n    buildBody(y) {\n        let collection = this.virtualizer.collection;\n        let rect = new (0, _react_stately_virtualizer__WEBPACK_IMPORTED_MODULE_2__.Rect)(this.padding, y, 0, 0);\n        let layoutInfo = new (0, _react_stately_virtualizer__WEBPACK_IMPORTED_MODULE_2__.LayoutInfo)('rowgroup', collection.body.key, rect);\n        let startY = y;\n        let skipped = 0;\n        let width = 0;\n        let children = [];\n        let rowHeight = this.getEstimatedRowHeight() + this.gap;\n        for (let node of (0, _react_stately_collections__WEBPACK_IMPORTED_MODULE_3__.getChildNodes)(collection.body, collection)){\n            // Skip rows before the valid rectangle unless they are already cached.\n            if (y + rowHeight < this.requestedRect.y && !this.isValid(node, y)) {\n                y += rowHeight;\n                skipped++;\n                continue;\n            }\n            let layoutNode = this.buildChild(node, this.padding, y, layoutInfo.key);\n            layoutNode.layoutInfo.parentKey = layoutInfo.key;\n            layoutNode.index = children.length;\n            y = layoutNode.layoutInfo.rect.maxY + this.gap;\n            width = Math.max(width, layoutNode.layoutInfo.rect.width);\n            children.push(layoutNode);\n            if (y > this.requestedRect.maxY) {\n                // Estimate the remaining height for rows that we don't need to layout right now.\n                y += (collection.size - (skipped + children.length)) * rowHeight;\n                break;\n            }\n        }\n        if (children.length === 0) y = this.virtualizer.visibleRect.maxY;\n        else y -= this.gap;\n        rect.width = width;\n        rect.height = y - startY;\n        return {\n            layoutInfo: layoutInfo,\n            children: children,\n            validRect: layoutInfo.rect.intersection(this.requestedRect),\n            node: collection.body\n        };\n    }\n    buildNode(node, x, y) {\n        switch(node.type){\n            case 'headerrow':\n                return this.buildHeaderRow(node, x, y);\n            case 'item':\n                return this.buildRow(node, x, y);\n            case 'column':\n            case 'placeholder':\n                return this.buildColumn(node, x, y);\n            case 'cell':\n                return this.buildCell(node, x, y);\n            case 'loader':\n                return this.buildLoader(node, x, y);\n            default:\n                throw new Error('Unknown node type ' + node.type);\n        }\n    }\n    buildRow(node, x, y) {\n        var _collection_head;\n        let collection = this.virtualizer.collection;\n        let rect = new (0, _react_stately_virtualizer__WEBPACK_IMPORTED_MODULE_2__.Rect)(x, y, 0, 0);\n        let layoutInfo = new (0, _react_stately_virtualizer__WEBPACK_IMPORTED_MODULE_2__.LayoutInfo)('row', node.key, rect);\n        let children = [];\n        let height = 0;\n        for (let child of (0, _react_stately_collections__WEBPACK_IMPORTED_MODULE_3__.getChildNodes)(node, collection))if (child.type === 'cell') {\n            if (x > this.requestedRect.maxX) {\n                // Adjust existing cached layoutInfo to ensure that it is out of view.\n                // This can happen due to column resizing.\n                let layoutNode = this.layoutNodes.get(child.key);\n                if (layoutNode) {\n                    layoutNode.layoutInfo.rect.x = x;\n                    x += layoutNode.layoutInfo.rect.width;\n                } else break;\n            } else {\n                let layoutNode = this.buildChild(child, x, y, layoutInfo.key);\n                x = layoutNode.layoutInfo.rect.maxX;\n                height = Math.max(height, layoutNode.layoutInfo.rect.height);\n                layoutNode.index = children.length;\n                children.push(layoutNode);\n            }\n        }\n        this.setChildHeights(children, height);\n        var _collection_head_key;\n        rect.width = this.layoutNodes.get((_collection_head_key = (_collection_head = collection.head) === null || _collection_head === void 0 ? void 0 : _collection_head.key) !== null && _collection_head_key !== void 0 ? _collection_head_key : 'header').layoutInfo.rect.width;\n        rect.height = height;\n        return {\n            layoutInfo: layoutInfo,\n            children: children,\n            validRect: rect.intersection(this.requestedRect),\n            node: node\n        };\n    }\n    buildCell(node, x, y) {\n        let width = this.getRenderedColumnWidth(node);\n        let { height: height, isEstimated: isEstimated } = this.getEstimatedHeight(node, width, this.rowHeight, this.estimatedRowHeight);\n        let rect = new (0, _react_stately_virtualizer__WEBPACK_IMPORTED_MODULE_2__.Rect)(x, y, width, height);\n        let layoutInfo = new (0, _react_stately_virtualizer__WEBPACK_IMPORTED_MODULE_2__.LayoutInfo)(node.type, node.key, rect);\n        layoutInfo.isSticky = this.isStickyColumn(node);\n        layoutInfo.zIndex = layoutInfo.isSticky ? 2 : 1;\n        layoutInfo.estimatedSize = isEstimated;\n        return {\n            layoutInfo: layoutInfo,\n            children: [],\n            validRect: rect,\n            node: node\n        };\n    }\n    getVisibleLayoutInfos(rect) {\n        // Adjust rect to keep number of visible rows consistent.\n        // (only if height > 1 for getDropTargetFromPoint)\n        if (rect.height > 1) {\n            let rowHeight = this.getEstimatedRowHeight();\n            rect.y = Math.floor(rect.y / rowHeight) * rowHeight;\n            rect.height = Math.ceil(rect.height / rowHeight) * rowHeight;\n        }\n        // If layout hasn't yet been done for the requested rect, union the\n        // new rect with the existing valid rect, and recompute.\n        this.layoutIfNeeded(rect);\n        let res = [];\n        this.buildPersistedIndices();\n        for (let node of this.rootNodes){\n            res.push(node.layoutInfo);\n            this.addVisibleLayoutInfos(res, node, rect);\n        }\n        return res;\n    }\n    addVisibleLayoutInfos(res, node, rect) {\n        if (!node.children || node.children.length === 0) return;\n        switch(node.layoutInfo.type){\n            case 'header':\n                for (let child of node.children){\n                    res.push(child.layoutInfo);\n                    this.addVisibleLayoutInfos(res, child, rect);\n                }\n                break;\n            case 'rowgroup':\n                {\n                    let firstVisibleRow = this.binarySearch(node.children, rect.topLeft, 'y');\n                    let lastVisibleRow = this.binarySearch(node.children, rect.bottomRight, 'y');\n                    // Add persisted rows before the visible rows.\n                    let persistedRowIndices = this.persistedIndices.get(node.layoutInfo.key);\n                    let persistIndex = 0;\n                    while(persistedRowIndices && persistIndex < persistedRowIndices.length && persistedRowIndices[persistIndex] < firstVisibleRow){\n                        let idx = persistedRowIndices[persistIndex];\n                        if (idx < node.children.length) {\n                            res.push(node.children[idx].layoutInfo);\n                            this.addVisibleLayoutInfos(res, node.children[idx], rect);\n                        }\n                        persistIndex++;\n                    }\n                    for(let i = firstVisibleRow; i <= lastVisibleRow; i++){\n                        // Skip persisted rows that overlap with visible cells.\n                        while(persistedRowIndices && persistIndex < persistedRowIndices.length && persistedRowIndices[persistIndex] < i)persistIndex++;\n                        res.push(node.children[i].layoutInfo);\n                        this.addVisibleLayoutInfos(res, node.children[i], rect);\n                    }\n                    // Add persisted rows after the visible rows.\n                    while(persistedRowIndices && persistIndex < persistedRowIndices.length){\n                        let idx = persistedRowIndices[persistIndex++];\n                        if (idx < node.children.length) {\n                            res.push(node.children[idx].layoutInfo);\n                            this.addVisibleLayoutInfos(res, node.children[idx], rect);\n                        }\n                    }\n                    break;\n                }\n            case 'headerrow':\n            case 'row':\n                {\n                    let firstVisibleCell = this.binarySearch(node.children, rect.topLeft, 'x');\n                    let lastVisibleCell = this.binarySearch(node.children, rect.topRight, 'x');\n                    let stickyIndex = 0;\n                    // Add persisted/sticky cells before the visible cells.\n                    let persistedCellIndices = this.persistedIndices.get(node.layoutInfo.key) || this.stickyColumnIndices;\n                    while(stickyIndex < persistedCellIndices.length && persistedCellIndices[stickyIndex] < firstVisibleCell){\n                        let idx = persistedCellIndices[stickyIndex];\n                        if (idx < node.children.length) res.push(node.children[idx].layoutInfo);\n                        stickyIndex++;\n                    }\n                    for(let i = firstVisibleCell; i <= lastVisibleCell; i++){\n                        // Skip sticky cells that overlap with visible cells.\n                        while(stickyIndex < persistedCellIndices.length && persistedCellIndices[stickyIndex] < i)stickyIndex++;\n                        res.push(node.children[i].layoutInfo);\n                    }\n                    // Add any remaining sticky cells after the visible cells.\n                    while(stickyIndex < persistedCellIndices.length){\n                        let idx = persistedCellIndices[stickyIndex++];\n                        if (idx < node.children.length) res.push(node.children[idx].layoutInfo);\n                    }\n                    break;\n                }\n            default:\n                throw new Error('Unknown node type ' + node.layoutInfo.type);\n        }\n    }\n    binarySearch(items, point, axis) {\n        let low = 0;\n        let high = items.length - 1;\n        while(low <= high){\n            let mid = low + high >> 1;\n            let item = items[mid];\n            if (axis === 'x' && item.layoutInfo.rect.maxX <= point.x || axis === 'y' && item.layoutInfo.rect.maxY <= point.y) low = mid + 1;\n            else if (axis === 'x' && item.layoutInfo.rect.x > point.x || axis === 'y' && item.layoutInfo.rect.y > point.y) high = mid - 1;\n            else return mid;\n        }\n        return Math.max(0, Math.min(items.length - 1, low));\n    }\n    buildPersistedIndices() {\n        if (this.virtualizer.persistedKeys === this.lastPersistedKeys) return;\n        this.lastPersistedKeys = this.virtualizer.persistedKeys;\n        this.persistedIndices.clear();\n        // Build a map of parentKey => indices of children to persist.\n        for (let key of this.virtualizer.persistedKeys){\n            var _this_layoutNodes_get;\n            let layoutInfo = (_this_layoutNodes_get = this.layoutNodes.get(key)) === null || _this_layoutNodes_get === void 0 ? void 0 : _this_layoutNodes_get.layoutInfo;\n            // Walk up ancestors so parents are also persisted if children are.\n            while(layoutInfo && layoutInfo.parentKey){\n                var _this_layoutNodes_get1, _this_layoutNodes_get2;\n                let collectionNode = this.virtualizer.collection.getItem(layoutInfo.key);\n                let indices = this.persistedIndices.get(layoutInfo.parentKey);\n                if (!indices) {\n                    // stickyColumnIndices are always persisted along with any cells from persistedKeys.\n                    indices = (collectionNode === null || collectionNode === void 0 ? void 0 : collectionNode.type) === 'cell' || (collectionNode === null || collectionNode === void 0 ? void 0 : collectionNode.type) === 'column' ? [\n                        ...this.stickyColumnIndices\n                    ] : [];\n                    this.persistedIndices.set(layoutInfo.parentKey, indices);\n                }\n                let index = (_this_layoutNodes_get1 = this.layoutNodes.get(layoutInfo.key)) === null || _this_layoutNodes_get1 === void 0 ? void 0 : _this_layoutNodes_get1.index;\n                if (index != null && !indices.includes(index)) indices.push(index);\n                layoutInfo = (_this_layoutNodes_get2 = this.layoutNodes.get(layoutInfo.parentKey)) === null || _this_layoutNodes_get2 === void 0 ? void 0 : _this_layoutNodes_get2.layoutInfo;\n            }\n        }\n        for (let indices of this.persistedIndices.values())indices.sort((a, b)=>a - b);\n    }\n    getDropTargetFromPoint(x, y, isValidDropTarget) {\n        x += this.virtualizer.visibleRect.x;\n        y += this.virtualizer.visibleRect.y;\n        // Find the closest item within on either side of the point using the gap width.\n        let searchRect = new (0, _react_stately_virtualizer__WEBPACK_IMPORTED_MODULE_2__.Rect)(x, Math.max(0, y - this.gap), 1, this.gap * 2);\n        let candidates = this.getVisibleLayoutInfos(searchRect);\n        let key = null;\n        let minDistance = Infinity;\n        for (let candidate of candidates){\n            // Ignore items outside the search rect, e.g. persisted keys.\n            if (candidate.type !== 'row' || !candidate.rect.intersects(searchRect)) continue;\n            let yDist = Math.abs(candidate.rect.y - y);\n            let maxYDist = Math.abs(candidate.rect.maxY - y);\n            let dist = Math.min(yDist, maxYDist);\n            if (dist < minDistance) {\n                minDistance = dist;\n                key = candidate.key;\n            }\n        }\n        if (key == null || this.virtualizer.collection.size === 0) return {\n            type: 'root'\n        };\n        let layoutInfo = this.getLayoutInfo(key);\n        if (!layoutInfo) return null;\n        let rect = layoutInfo.rect;\n        let target = {\n            type: 'item',\n            key: layoutInfo.key,\n            dropPosition: 'on'\n        };\n        // If dropping on the item isn't accepted, try the target before or after depending on the y position.\n        // Otherwise, if dropping on the item is accepted, still try the before/after positions if within 10px\n        // of the top or bottom of the item.\n        if (!isValidDropTarget(target)) {\n            if (y <= rect.y + rect.height / 2 && isValidDropTarget({\n                ...target,\n                dropPosition: 'before'\n            })) target.dropPosition = 'before';\n            else if (isValidDropTarget({\n                ...target,\n                dropPosition: 'after'\n            })) target.dropPosition = 'after';\n        } else if (y <= rect.y + 10 && isValidDropTarget({\n            ...target,\n            dropPosition: 'before'\n        })) target.dropPosition = 'before';\n        else if (y >= rect.maxY - 10 && isValidDropTarget({\n            ...target,\n            dropPosition: 'after'\n        })) target.dropPosition = 'after';\n        return target;\n    }\n    getDropTargetLayoutInfo(target) {\n        let layoutInfo = super.getDropTargetLayoutInfo(target);\n        layoutInfo.parentKey = this.virtualizer.collection.body.key;\n        return layoutInfo;\n    }\n    constructor(options){\n        super(options), this.lastCollection = null, this.columnWidths = new Map(), this.lastPersistedKeys = null, this.persistedIndices = new Map();\n        this.stickyColumnIndices = [];\n    }\n}\n\n\n\n//# sourceMappingURL=TableLayout.module.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(pages-dir-node)/../../../../node_modules/.pnpm/@react-stately+layout@4.2.1_react-dom@19.0.0_react@19.0.0__react@19.0.0/node_modules/@react-stately/layout/dist/TableLayout.mjs\n");

/***/ }),

/***/ "(pages-dir-node)/../../../../node_modules/.pnpm/@react-stately+layout@4.2.1_react-dom@19.0.0_react@19.0.0__react@19.0.0/node_modules/@react-stately/layout/dist/WaterfallLayout.mjs":
/*!**************************************************************************************************************************************************************************!*\
  !*** ../../../../node_modules/.pnpm/@react-stately+layout@4.2.1_react-dom@19.0.0_react@19.0.0__react@19.0.0/node_modules/@react-stately/layout/dist/WaterfallLayout.mjs ***!
  \**************************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   WaterfallLayout: () => (/* binding */ $f483179558aa907f$export$e9f7cda058ba8df8)\n/* harmony export */ });\n/* harmony import */ var _react_stately_virtualizer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @react-stately/virtualizer */ \"(pages-dir-node)/../../../../node_modules/.pnpm/@react-stately+virtualizer@4.3.1_react-dom@19.0.0_react@19.0.0__react@19.0.0/node_modules/@react-stately/virtualizer/dist/import.mjs\");\n\n\n/*\n * Copyright 2024 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */ \nclass $f483179558aa907f$var$WaterfallLayoutInfo extends (0, _react_stately_virtualizer__WEBPACK_IMPORTED_MODULE_0__.LayoutInfo) {\n    copy() {\n        let res = super.copy();\n        res.column = this.column;\n        return res;\n    }\n    constructor(...args){\n        super(...args), this.column = 0;\n    }\n}\nconst $f483179558aa907f$var$DEFAULT_OPTIONS = {\n    minItemSize: new (0, _react_stately_virtualizer__WEBPACK_IMPORTED_MODULE_0__.Size)(200, 200),\n    maxItemSize: new (0, _react_stately_virtualizer__WEBPACK_IMPORTED_MODULE_0__.Size)(Infinity, Infinity),\n    minSpace: new (0, _react_stately_virtualizer__WEBPACK_IMPORTED_MODULE_0__.Size)(18, 18),\n    maxColumns: Infinity,\n    dropIndicatorThickness: 2\n};\nclass $f483179558aa907f$export$e9f7cda058ba8df8 extends (0, _react_stately_virtualizer__WEBPACK_IMPORTED_MODULE_0__.Layout) {\n    shouldInvalidateLayoutOptions(newOptions, oldOptions) {\n        return newOptions.maxColumns !== oldOptions.maxColumns || newOptions.dropIndicatorThickness !== oldOptions.dropIndicatorThickness || !(newOptions.minItemSize || $f483179558aa907f$var$DEFAULT_OPTIONS.minItemSize).equals(oldOptions.minItemSize || $f483179558aa907f$var$DEFAULT_OPTIONS.minItemSize) || !(newOptions.maxItemSize || $f483179558aa907f$var$DEFAULT_OPTIONS.maxItemSize).equals(oldOptions.maxItemSize || $f483179558aa907f$var$DEFAULT_OPTIONS.maxItemSize) || !(newOptions.minSpace || $f483179558aa907f$var$DEFAULT_OPTIONS.minSpace).equals(oldOptions.minSpace || $f483179558aa907f$var$DEFAULT_OPTIONS.minSpace);\n    }\n    update(invalidationContext) {\n        let { minItemSize: minItemSize = $f483179558aa907f$var$DEFAULT_OPTIONS.minItemSize, maxItemSize: maxItemSize = $f483179558aa907f$var$DEFAULT_OPTIONS.maxItemSize, minSpace: minSpace = $f483179558aa907f$var$DEFAULT_OPTIONS.minSpace, maxColumns: maxColumns = $f483179558aa907f$var$DEFAULT_OPTIONS.maxColumns, dropIndicatorThickness: dropIndicatorThickness = $f483179558aa907f$var$DEFAULT_OPTIONS.dropIndicatorThickness } = invalidationContext.layoutOptions || {};\n        this.dropIndicatorThickness = dropIndicatorThickness;\n        let visibleWidth = this.virtualizer.visibleRect.width;\n        // The max item width is always the entire viewport.\n        // If the max item height is infinity, scale in proportion to the max width.\n        let maxItemWidth = Math.min(maxItemSize.width, visibleWidth);\n        let maxItemHeight = Number.isFinite(maxItemSize.height) ? maxItemSize.height : Math.floor(minItemSize.height / minItemSize.width * maxItemWidth);\n        // Compute the number of rows and columns needed to display the content\n        let columns = Math.floor(visibleWidth / (minItemSize.width + minSpace.width));\n        let numColumns = Math.max(1, Math.min(maxColumns, columns));\n        // Compute the available width (minus the space between items)\n        let width = visibleWidth - minSpace.width * Math.max(0, numColumns);\n        // Compute the item width based on the space available\n        let itemWidth = Math.floor(width / numColumns);\n        itemWidth = Math.max(minItemSize.width, Math.min(maxItemWidth, itemWidth));\n        // Compute the item height, which is proportional to the item width\n        let t = (itemWidth - minItemSize.width) / Math.max(1, maxItemWidth - minItemSize.width);\n        let itemHeight = minItemSize.height + Math.floor((maxItemHeight - minItemSize.height) * t);\n        itemHeight = Math.max(minItemSize.height, Math.min(maxItemHeight, itemHeight));\n        // Compute the horizontal spacing and content height\n        let horizontalSpacing = Math.floor((visibleWidth - numColumns * itemWidth) / (numColumns + 1));\n        // Setup an array of column heights\n        let columnHeights = Array(numColumns).fill(minSpace.height);\n        let newLayoutInfos = new Map();\n        let addNode = (key, node)=>{\n            let oldLayoutInfo = this.layoutInfos.get(key);\n            let height = itemHeight;\n            let estimatedSize = true;\n            if (oldLayoutInfo) {\n                height = oldLayoutInfo.rect.height;\n                estimatedSize = invalidationContext.sizeChanged || oldLayoutInfo.estimatedSize || oldLayoutInfo.content !== node;\n            }\n            // Figure out which column to place the item in, and compute its position.\n            // Preserve the previous column index so items don't jump around during resizing unless the number of columns changed.\n            let prevColumn = numColumns === this.numColumns && oldLayoutInfo && oldLayoutInfo.rect.y < this.virtualizer.visibleRect.maxY ? oldLayoutInfo.column : undefined;\n            let column = prevColumn !== null && prevColumn !== void 0 ? prevColumn : columnHeights.reduce((minIndex, h, i)=>h < columnHeights[minIndex] ? i : minIndex, 0);\n            let x = horizontalSpacing + column * (itemWidth + horizontalSpacing);\n            let y = columnHeights[column];\n            let rect = new (0, _react_stately_virtualizer__WEBPACK_IMPORTED_MODULE_0__.Rect)(x, y, itemWidth, height);\n            let layoutInfo = new $f483179558aa907f$var$WaterfallLayoutInfo(node.type, key, rect);\n            layoutInfo.estimatedSize = estimatedSize;\n            layoutInfo.allowOverflow = true;\n            layoutInfo.content = node;\n            layoutInfo.column = column;\n            newLayoutInfos.set(key, layoutInfo);\n            columnHeights[column] += layoutInfo.rect.height + minSpace.height;\n        };\n        let skeletonCount = 0;\n        for (let node of this.virtualizer.collection)if (node.type === 'skeleton') {\n            // Add skeleton cards until every column has at least one, and we fill the viewport.\n            let startingHeights = [\n                ...columnHeights\n            ];\n            while(!columnHeights.every((h, i)=>h !== startingHeights[i]) || Math.min(...columnHeights) < this.virtualizer.visibleRect.height){\n                var _this_layoutInfos_get;\n                let key = `${node.key}-${skeletonCount++}`;\n                let content = ((_this_layoutInfos_get = this.layoutInfos.get(key)) === null || _this_layoutInfos_get === void 0 ? void 0 : _this_layoutInfos_get.content) || {\n                    ...node\n                };\n                addNode(key, content);\n            }\n            break;\n        } else addNode(node.key, node);\n        // Reset all columns to the maximum for the next section\n        let maxHeight = Math.max(...columnHeights);\n        this.contentSize = new (0, _react_stately_virtualizer__WEBPACK_IMPORTED_MODULE_0__.Size)(this.virtualizer.visibleRect.width, maxHeight);\n        this.layoutInfos = newLayoutInfos;\n        this.numColumns = numColumns;\n    }\n    getLayoutInfo(key) {\n        return this.layoutInfos.get(key);\n    }\n    getContentSize() {\n        return this.contentSize;\n    }\n    getVisibleLayoutInfos(rect) {\n        let layoutInfos = [];\n        for (let layoutInfo of this.layoutInfos.values())if (layoutInfo.rect.intersects(rect) || this.virtualizer.isPersistedKey(layoutInfo.key)) layoutInfos.push(layoutInfo);\n        return layoutInfos;\n    }\n    updateItemSize(key, size) {\n        let layoutInfo = this.layoutInfos.get(key);\n        if (!size || !layoutInfo) return false;\n        if (size.height !== layoutInfo.rect.height) {\n            let newLayoutInfo = layoutInfo.copy();\n            newLayoutInfo.rect.height = size.height;\n            newLayoutInfo.estimatedSize = false;\n            this.layoutInfos.set(key, newLayoutInfo);\n            return true;\n        }\n        return false;\n    }\n    // Override keyboard navigation to work spatially.\n    getKeyRightOf(key) {\n        let layoutInfo = this.getLayoutInfo(key);\n        if (!layoutInfo) return null;\n        let rect = new (0, _react_stately_virtualizer__WEBPACK_IMPORTED_MODULE_0__.Rect)(layoutInfo.rect.maxX, layoutInfo.rect.y, this.virtualizer.visibleRect.maxX - layoutInfo.rect.maxX, layoutInfo.rect.height);\n        let layoutInfos = this.getVisibleLayoutInfos(rect);\n        let bestKey = null;\n        let bestDistance = Infinity;\n        for (let candidate of layoutInfos){\n            if (candidate.key === key) continue;\n            // Find the closest item in the x direction with the most overlap in the y direction.\n            let deltaX = candidate.rect.x - rect.x;\n            let overlapY = Math.min(candidate.rect.maxY, rect.maxY) - Math.max(candidate.rect.y, rect.y);\n            let distance = deltaX - overlapY;\n            if (distance < bestDistance) {\n                bestDistance = distance;\n                bestKey = candidate.key;\n            }\n        }\n        return bestKey;\n    }\n    getKeyLeftOf(key) {\n        let layoutInfo = this.getLayoutInfo(key);\n        if (!layoutInfo) return null;\n        let rect = new (0, _react_stately_virtualizer__WEBPACK_IMPORTED_MODULE_0__.Rect)(0, layoutInfo.rect.y, layoutInfo.rect.x, layoutInfo.rect.height);\n        let layoutInfos = this.getVisibleLayoutInfos(rect);\n        let bestKey = null;\n        let bestDistance = Infinity;\n        for (let candidate of layoutInfos){\n            if (candidate.key === key) continue;\n            // Find the closest item in the x direction with the most overlap in the y direction.\n            let deltaX = rect.maxX - candidate.rect.maxX;\n            let overlapY = Math.min(candidate.rect.maxY, rect.maxY) - Math.max(candidate.rect.y, rect.y);\n            let distance = deltaX - overlapY;\n            if (distance < bestDistance) {\n                bestDistance = distance;\n                bestKey = candidate.key;\n            }\n        }\n        return bestKey;\n    }\n    // This overrides the default behavior of shift selection to work spatially\n    // rather than following the order of the items in the collection (which may appear unpredictable).\n    getKeyRange(from, to) {\n        let fromLayoutInfo = this.getLayoutInfo(from);\n        let toLayoutInfo = this.getLayoutInfo(to);\n        if (!fromLayoutInfo || !toLayoutInfo) return [];\n        // Find items where half of the area intersects the rectangle\n        // formed from the first item to the last item in the range.\n        let rect = fromLayoutInfo.rect.union(toLayoutInfo.rect);\n        let keys = [];\n        for (let layoutInfo of this.layoutInfos.values())if (rect.intersection(layoutInfo.rect).area > layoutInfo.rect.area / 2) keys.push(layoutInfo.key);\n        return keys;\n    }\n    getDropTargetFromPoint(x, y) {\n        if (this.layoutInfos.size === 0) return {\n            type: 'root'\n        };\n        x += this.virtualizer.visibleRect.x;\n        y += this.virtualizer.visibleRect.y;\n        let key = this.virtualizer.keyAtPoint(new (0, _react_stately_virtualizer__WEBPACK_IMPORTED_MODULE_0__.Point)(x, y));\n        if (key == null) return {\n            type: 'root'\n        };\n        // Only support \"on\" drop position in waterfall layout.\n        // Reordering doesn't make sense because the items don't have a deterministic order.\n        return {\n            type: 'item',\n            key: key,\n            dropPosition: 'on'\n        };\n    }\n    constructor(...args){\n        super(...args), this.contentSize = new (0, _react_stately_virtualizer__WEBPACK_IMPORTED_MODULE_0__.Size)(), this.layoutInfos = new Map(), this.numColumns = 0, this.dropIndicatorThickness = 2;\n    }\n}\n\n\n\n//# sourceMappingURL=WaterfallLayout.module.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(pages-dir-node)/../../../../node_modules/.pnpm/@react-stately+layout@4.2.1_react-dom@19.0.0_react@19.0.0__react@19.0.0/node_modules/@react-stately/layout/dist/WaterfallLayout.mjs\n");

/***/ }),

/***/ "(pages-dir-node)/../../../../node_modules/.pnpm/@react-stately+layout@4.2.1_react-dom@19.0.0_react@19.0.0__react@19.0.0/node_modules/@react-stately/layout/dist/import.mjs":
/*!*****************************************************************************************************************************************************************!*\
  !*** ../../../../node_modules/.pnpm/@react-stately+layout@4.2.1_react-dom@19.0.0_react@19.0.0__react@19.0.0/node_modules/@react-stately/layout/dist/import.mjs ***!
  \*****************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GridLayout: () => (/* reexport safe */ _GridLayout_mjs__WEBPACK_IMPORTED_MODULE_0__.GridLayout),\n/* harmony export */   ListLayout: () => (/* reexport safe */ _ListLayout_mjs__WEBPACK_IMPORTED_MODULE_1__.ListLayout),\n/* harmony export */   TableLayout: () => (/* reexport safe */ _TableLayout_mjs__WEBPACK_IMPORTED_MODULE_2__.TableLayout),\n/* harmony export */   WaterfallLayout: () => (/* reexport safe */ _WaterfallLayout_mjs__WEBPACK_IMPORTED_MODULE_3__.WaterfallLayout)\n/* harmony export */ });\n/* harmony import */ var _GridLayout_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./GridLayout.mjs */ \"(pages-dir-node)/../../../../node_modules/.pnpm/@react-stately+layout@4.2.1_react-dom@19.0.0_react@19.0.0__react@19.0.0/node_modules/@react-stately/layout/dist/GridLayout.mjs\");\n/* harmony import */ var _ListLayout_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ListLayout.mjs */ \"(pages-dir-node)/../../../../node_modules/.pnpm/@react-stately+layout@4.2.1_react-dom@19.0.0_react@19.0.0__react@19.0.0/node_modules/@react-stately/layout/dist/ListLayout.mjs\");\n/* harmony import */ var _TableLayout_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./TableLayout.mjs */ \"(pages-dir-node)/../../../../node_modules/.pnpm/@react-stately+layout@4.2.1_react-dom@19.0.0_react@19.0.0__react@19.0.0/node_modules/@react-stately/layout/dist/TableLayout.mjs\");\n/* harmony import */ var _WaterfallLayout_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./WaterfallLayout.mjs */ \"(pages-dir-node)/../../../../node_modules/.pnpm/@react-stately+layout@4.2.1_react-dom@19.0.0_react@19.0.0__react@19.0.0/node_modules/@react-stately/layout/dist/WaterfallLayout.mjs\");\n\n\n\n\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */ \n\n\n\n\n\n\n//# sourceMappingURL=module.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHBhZ2VzLWRpci1ub2RlKS8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vQHJlYWN0LXN0YXRlbHkrbGF5b3V0QDQuMi4xX3JlYWN0LWRvbUAxOS4wLjBfcmVhY3RAMTkuMC4wX19yZWFjdEAxOS4wLjAvbm9kZV9tb2R1bGVzL0ByZWFjdC1zdGF0ZWx5L2xheW91dC9kaXN0L2ltcG9ydC5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBeUY7QUFDQTtBQUNFO0FBQ1E7O0FBRW5HO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7OztBQU1rUDtBQUNsUCIsInNvdXJjZXMiOlsiL1VzZXJzL2phaW1laXNyYWVsY2FtcGVhcy9rZXlzdG9uZS9ub2RlX21vZHVsZXMvLnBucG0vQHJlYWN0LXN0YXRlbHkrbGF5b3V0QDQuMi4xX3JlYWN0LWRvbUAxOS4wLjBfcmVhY3RAMTkuMC4wX19yZWFjdEAxOS4wLjAvbm9kZV9tb2R1bGVzL0ByZWFjdC1zdGF0ZWx5L2xheW91dC9kaXN0L2ltcG9ydC5tanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtHcmlkTGF5b3V0IGFzICRhNTg1OTJkMjk1YTE3MGE0JGV4cG9ydCQ3ZDJiMTI1NzgxNTRhNzM1fSBmcm9tIFwiLi9HcmlkTGF5b3V0Lm1qc1wiO1xuaW1wb3J0IHtMaXN0TGF5b3V0IGFzICQ2MWVmNjBmYzliMTA0MWY0JGV4cG9ydCRjYWNiYjM5MjQxNTVkNjhlfSBmcm9tIFwiLi9MaXN0TGF5b3V0Lm1qc1wiO1xuaW1wb3J0IHtUYWJsZUxheW91dCBhcyAkYTE1MjExMmU5MDI3MDliZiRleHBvcnQkNjI0NDRjM2M3MjRiMWIyMH0gZnJvbSBcIi4vVGFibGVMYXlvdXQubWpzXCI7XG5pbXBvcnQge1dhdGVyZmFsbExheW91dCBhcyAkZjQ4MzE3OTU1OGFhOTA3ZiRleHBvcnQkZTlmN2NkYTA1OGJhOGRmOH0gZnJvbSBcIi4vV2F0ZXJmYWxsTGF5b3V0Lm1qc1wiO1xuXG4vKlxuICogQ29weXJpZ2h0IDIwMjAgQWRvYmUuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBUaGlzIGZpbGUgaXMgbGljZW5zZWQgdG8geW91IHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuIFlvdSBtYXkgb2J0YWluIGEgY29weVxuICogb2YgdGhlIExpY2Vuc2UgYXQgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlclxuICogdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgUkVQUkVTRU5UQVRJT05TXG4gKiBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2VcbiAqIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi8gXG5cblxuXG5cblxuZXhwb3J0IHskYTU4NTkyZDI5NWExNzBhNCRleHBvcnQkN2QyYjEyNTc4MTU0YTczNSBhcyBHcmlkTGF5b3V0LCAkNjFlZjYwZmM5YjEwNDFmNCRleHBvcnQkY2FjYmIzOTI0MTU1ZDY4ZSBhcyBMaXN0TGF5b3V0LCAkYTE1MjExMmU5MDI3MDliZiRleHBvcnQkNjI0NDRjM2M3MjRiMWIyMCBhcyBUYWJsZUxheW91dCwgJGY0ODMxNzk1NThhYTkwN2YkZXhwb3J0JGU5ZjdjZGEwNThiYThkZjggYXMgV2F0ZXJmYWxsTGF5b3V0fTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW1vZHVsZS5qcy5tYXBcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(pages-dir-node)/../../../../node_modules/.pnpm/@react-stately+layout@4.2.1_react-dom@19.0.0_react@19.0.0__react@19.0.0/node_modules/@react-stately/layout/dist/import.mjs\n");

/***/ }),

/***/ "../../../../node_modules/.pnpm/@react-stately+layout@4.2.1_react-dom@19.0.0_react@19.0.0__react@19.0.0/node_modules/@react-stately/layout/dist/GridLayout.mjs":
/*!*********************************************************************************************************************************************************************!*\
  !*** ../../../../node_modules/.pnpm/@react-stately+layout@4.2.1_react-dom@19.0.0_react@19.0.0__react@19.0.0/node_modules/@react-stately/layout/dist/GridLayout.mjs ***!
  \*********************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GridLayout: () => (/* binding */ $a58592d295a170a4$export$7d2b12578154a735)\n/* harmony export */ });\n/* harmony import */ var _react_stately_virtualizer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @react-stately/virtualizer */ \"../../../../node_modules/.pnpm/@react-stately+virtualizer@4.3.1_react-dom@19.0.0_react@19.0.0__react@19.0.0/node_modules/@react-stately/virtualizer/dist/import.mjs\");\n\n\n/*\n * Copyright 2024 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */ \nconst $a58592d295a170a4$var$DEFAULT_OPTIONS = {\n    minItemSize: new (0, _react_stately_virtualizer__WEBPACK_IMPORTED_MODULE_0__.Size)(200, 200),\n    maxItemSize: new (0, _react_stately_virtualizer__WEBPACK_IMPORTED_MODULE_0__.Size)(Infinity, Infinity),\n    preserveAspectRatio: false,\n    minSpace: new (0, _react_stately_virtualizer__WEBPACK_IMPORTED_MODULE_0__.Size)(18, 18),\n    maxColumns: Infinity,\n    dropIndicatorThickness: 2\n};\nclass $a58592d295a170a4$export$7d2b12578154a735 extends (0, _react_stately_virtualizer__WEBPACK_IMPORTED_MODULE_0__.Layout) {\n    shouldInvalidateLayoutOptions(newOptions, oldOptions) {\n        return newOptions.maxColumns !== oldOptions.maxColumns || newOptions.dropIndicatorThickness !== oldOptions.dropIndicatorThickness || newOptions.preserveAspectRatio !== oldOptions.preserveAspectRatio || !(newOptions.minItemSize || $a58592d295a170a4$var$DEFAULT_OPTIONS.minItemSize).equals(oldOptions.minItemSize || $a58592d295a170a4$var$DEFAULT_OPTIONS.minItemSize) || !(newOptions.maxItemSize || $a58592d295a170a4$var$DEFAULT_OPTIONS.maxItemSize).equals(oldOptions.maxItemSize || $a58592d295a170a4$var$DEFAULT_OPTIONS.maxItemSize) || !(newOptions.minSpace || $a58592d295a170a4$var$DEFAULT_OPTIONS.minSpace).equals(oldOptions.minSpace || $a58592d295a170a4$var$DEFAULT_OPTIONS.minSpace);\n    }\n    update(invalidationContext) {\n        let { minItemSize: minItemSize = $a58592d295a170a4$var$DEFAULT_OPTIONS.minItemSize, maxItemSize: maxItemSize = $a58592d295a170a4$var$DEFAULT_OPTIONS.maxItemSize, preserveAspectRatio: preserveAspectRatio = $a58592d295a170a4$var$DEFAULT_OPTIONS.preserveAspectRatio, minSpace: minSpace = $a58592d295a170a4$var$DEFAULT_OPTIONS.minSpace, maxColumns: maxColumns = $a58592d295a170a4$var$DEFAULT_OPTIONS.maxColumns, dropIndicatorThickness: dropIndicatorThickness = $a58592d295a170a4$var$DEFAULT_OPTIONS.dropIndicatorThickness } = invalidationContext.layoutOptions || {};\n        this.dropIndicatorThickness = dropIndicatorThickness;\n        let visibleWidth = this.virtualizer.visibleRect.width;\n        // The max item width is always the entire viewport.\n        // If the max item height is infinity, scale in proportion to the max width.\n        let maxItemWidth = Math.min(maxItemSize.width, visibleWidth);\n        let maxItemHeight = Number.isFinite(maxItemSize.height) ? maxItemSize.height : Math.floor(minItemSize.height / minItemSize.width * maxItemWidth);\n        // Compute the number of rows and columns needed to display the content\n        let columns = Math.floor(visibleWidth / (minItemSize.width + minSpace.width));\n        let numColumns = Math.max(1, Math.min(maxColumns, columns));\n        this.numColumns = numColumns;\n        // Compute the available width (minus the space between items)\n        let width = visibleWidth - minSpace.width * Math.max(0, numColumns);\n        // Compute the item width based on the space available\n        let itemWidth = Math.floor(width / numColumns);\n        itemWidth = Math.max(minItemSize.width, Math.min(maxItemWidth, itemWidth));\n        // Compute the item height, which is proportional to the item width\n        let t = (itemWidth - minItemSize.width) / Math.max(1, maxItemWidth - minItemSize.width);\n        let itemHeight = minItemSize.height + Math.floor((maxItemHeight - minItemSize.height) * t);\n        itemHeight = Math.max(minItemSize.height, Math.min(maxItemHeight, itemHeight));\n        // Compute the horizontal spacing and content height\n        let horizontalSpacing = Math.floor((visibleWidth - numColumns * itemWidth) / (numColumns + 1));\n        this.gap = new (0, _react_stately_virtualizer__WEBPACK_IMPORTED_MODULE_0__.Size)(horizontalSpacing, minSpace.height);\n        let rows = Math.ceil(this.virtualizer.collection.size / numColumns);\n        let iterator = this.virtualizer.collection[Symbol.iterator]();\n        let y = rows > 0 ? minSpace.height : 0;\n        let newLayoutInfos = new Map();\n        let skeleton = null;\n        let skeletonCount = 0;\n        for(let row = 0; row < rows; row++){\n            let maxHeight = 0;\n            let rowLayoutInfos = [];\n            for(let col = 0; col < numColumns; col++){\n                // Repeat skeleton until the end of the current row.\n                let node = skeleton || iterator.next().value;\n                if (!node) break;\n                if (node.type === 'skeleton') skeleton = node;\n                let key = skeleton ? `${skeleton.key}-${skeletonCount++}` : node.key;\n                let oldLayoutInfo = this.layoutInfos.get(key);\n                let content = node;\n                if (skeleton) content = oldLayoutInfo && oldLayoutInfo.content.key === key ? oldLayoutInfo.content : {\n                    ...skeleton,\n                    key: key\n                };\n                let x = horizontalSpacing + col * (itemWidth + horizontalSpacing);\n                let height = itemHeight;\n                let estimatedSize = !preserveAspectRatio;\n                if (oldLayoutInfo && estimatedSize) {\n                    height = oldLayoutInfo.rect.height;\n                    estimatedSize = invalidationContext.layoutOptionsChanged || invalidationContext.sizeChanged || oldLayoutInfo.estimatedSize || oldLayoutInfo.content !== content;\n                }\n                let rect = new (0, _react_stately_virtualizer__WEBPACK_IMPORTED_MODULE_0__.Rect)(x, y, itemWidth, height);\n                let layoutInfo = new (0, _react_stately_virtualizer__WEBPACK_IMPORTED_MODULE_0__.LayoutInfo)(node.type, key, rect);\n                layoutInfo.estimatedSize = estimatedSize;\n                layoutInfo.allowOverflow = true;\n                layoutInfo.content = content;\n                newLayoutInfos.set(key, layoutInfo);\n                rowLayoutInfos.push(layoutInfo);\n                maxHeight = Math.max(maxHeight, layoutInfo.rect.height);\n            }\n            for (let layoutInfo of rowLayoutInfos)layoutInfo.rect.height = maxHeight;\n            y += maxHeight + minSpace.height;\n            // Keep adding skeleton rows until we fill the viewport\n            if (skeleton && row === rows - 1 && y < this.virtualizer.visibleRect.height) rows++;\n        }\n        this.layoutInfos = newLayoutInfos;\n        this.contentSize = new (0, _react_stately_virtualizer__WEBPACK_IMPORTED_MODULE_0__.Size)(this.virtualizer.visibleRect.width, y);\n    }\n    getLayoutInfo(key) {\n        return this.layoutInfos.get(key);\n    }\n    getContentSize() {\n        return this.contentSize;\n    }\n    getVisibleLayoutInfos(rect) {\n        let layoutInfos = [];\n        for (let layoutInfo of this.layoutInfos.values())if (layoutInfo.rect.intersects(rect) || this.virtualizer.isPersistedKey(layoutInfo.key)) layoutInfos.push(layoutInfo);\n        return layoutInfos;\n    }\n    updateItemSize(key, size) {\n        let layoutInfo = this.layoutInfos.get(key);\n        if (!size || !layoutInfo) return false;\n        if (size.height !== layoutInfo.rect.height) {\n            let newLayoutInfo = layoutInfo.copy();\n            newLayoutInfo.rect.height = size.height;\n            newLayoutInfo.estimatedSize = false;\n            this.layoutInfos.set(key, newLayoutInfo);\n            return true;\n        }\n        return false;\n    }\n    getDropTargetFromPoint(x, y, isValidDropTarget) {\n        if (this.layoutInfos.size === 0) return {\n            type: 'root'\n        };\n        x += this.virtualizer.visibleRect.x;\n        y += this.virtualizer.visibleRect.y;\n        // Find the closest item within on either side of the point using the gap width.\n        let key = null;\n        if (this.numColumns === 1) {\n            let searchRect = new (0, _react_stately_virtualizer__WEBPACK_IMPORTED_MODULE_0__.Rect)(x, Math.max(0, y - this.gap.height), 1, this.gap.height * 2);\n            let candidates = this.getVisibleLayoutInfos(searchRect);\n            let minDistance = Infinity;\n            for (let candidate of candidates){\n                // Ignore items outside the search rect, e.g. persisted keys.\n                if (!candidate.rect.intersects(searchRect)) continue;\n                let yDist = Math.abs(candidate.rect.y - y);\n                let maxYDist = Math.abs(candidate.rect.maxY - y);\n                let dist = Math.min(yDist, maxYDist);\n                if (dist < minDistance) {\n                    minDistance = dist;\n                    key = candidate.key;\n                }\n            }\n        } else {\n            let searchRect = new (0, _react_stately_virtualizer__WEBPACK_IMPORTED_MODULE_0__.Rect)(Math.max(0, x - this.gap.width), y, this.gap.width * 2, 1);\n            let candidates = this.getVisibleLayoutInfos(searchRect);\n            let minDistance = Infinity;\n            for (let candidate of candidates){\n                // Ignore items outside the search rect, e.g. persisted keys.\n                if (!candidate.rect.intersects(searchRect)) continue;\n                let xDist = Math.abs(candidate.rect.x - x);\n                let maxXDist = Math.abs(candidate.rect.maxX - x);\n                let dist = Math.min(xDist, maxXDist);\n                if (dist < minDistance) {\n                    minDistance = dist;\n                    key = candidate.key;\n                }\n            }\n        }\n        let layoutInfo = key != null ? this.getLayoutInfo(key) : null;\n        if (!layoutInfo) return {\n            type: 'root'\n        };\n        let target = {\n            type: 'item',\n            key: layoutInfo.key,\n            dropPosition: 'on'\n        };\n        let pos = this.numColumns === 1 ? y : x;\n        let layoutInfoPos = this.numColumns === 1 ? layoutInfo.rect.y : layoutInfo.rect.x;\n        let size = this.numColumns === 1 ? layoutInfo.rect.height : layoutInfo.rect.width;\n        if (isValidDropTarget(target)) {\n            // If dropping on the item is accepted, try the before/after positions\n            // if within 5px of the start or end of the item.\n            if (pos < layoutInfoPos + 5) target.dropPosition = 'before';\n            else if (pos > layoutInfoPos + size - 5) target.dropPosition = 'after';\n        } else {\n            // If dropping on the item isn't accepted, try the target before or after depending on the position.\n            let mid = layoutInfoPos + size / 2;\n            if (pos <= mid && isValidDropTarget({\n                ...target,\n                dropPosition: 'before'\n            })) target.dropPosition = 'before';\n            else if (pos >= mid && isValidDropTarget({\n                ...target,\n                dropPosition: 'after'\n            })) target.dropPosition = 'after';\n        }\n        return target;\n    }\n    getDropTargetLayoutInfo(target) {\n        let layoutInfo = this.getLayoutInfo(target.key);\n        let rect;\n        if (this.numColumns === 1) // Flip from vertical to horizontal if only one column is visible.\n        rect = new (0, _react_stately_virtualizer__WEBPACK_IMPORTED_MODULE_0__.Rect)(layoutInfo.rect.x, target.dropPosition === 'before' ? layoutInfo.rect.y - this.gap.height / 2 - this.dropIndicatorThickness / 2 : layoutInfo.rect.maxY + this.gap.height / 2 - this.dropIndicatorThickness / 2, layoutInfo.rect.width, this.dropIndicatorThickness);\n        else rect = new (0, _react_stately_virtualizer__WEBPACK_IMPORTED_MODULE_0__.Rect)(target.dropPosition === 'before' ? layoutInfo.rect.x - this.gap.width / 2 - this.dropIndicatorThickness / 2 : layoutInfo.rect.maxX + this.gap.width / 2 - this.dropIndicatorThickness / 2, layoutInfo.rect.y, this.dropIndicatorThickness, layoutInfo.rect.height);\n        return new (0, _react_stately_virtualizer__WEBPACK_IMPORTED_MODULE_0__.LayoutInfo)('dropIndicator', target.key + ':' + target.dropPosition, rect);\n    }\n    constructor(...args){\n        super(...args), this.gap = $a58592d295a170a4$var$DEFAULT_OPTIONS.minSpace, this.dropIndicatorThickness = 2, this.numColumns = 0, this.contentSize = new (0, _react_stately_virtualizer__WEBPACK_IMPORTED_MODULE_0__.Size)(), this.layoutInfos = new Map();\n    }\n}\n\n\n\n//# sourceMappingURL=GridLayout.module.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../../../node_modules/.pnpm/@react-stately+layout@4.2.1_react-dom@19.0.0_react@19.0.0__react@19.0.0/node_modules/@react-stately/layout/dist/GridLayout.mjs\n");

/***/ }),

/***/ "../../../../node_modules/.pnpm/@react-stately+layout@4.2.1_react-dom@19.0.0_react@19.0.0__react@19.0.0/node_modules/@react-stately/layout/dist/ListLayout.mjs":
/*!*********************************************************************************************************************************************************************!*\
  !*** ../../../../node_modules/.pnpm/@react-stately+layout@4.2.1_react-dom@19.0.0_react@19.0.0__react@19.0.0/node_modules/@react-stately/layout/dist/ListLayout.mjs ***!
  \*********************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ListLayout: () => (/* binding */ $61ef60fc9b1041f4$export$cacbb3924155d68e)\n/* harmony export */ });\n/* harmony import */ var _react_stately_collections__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @react-stately/collections */ \"../../../../node_modules/.pnpm/@react-stately+collections@3.12.2_react@19.0.0/node_modules/@react-stately/collections/dist/import.mjs\");\n/* harmony import */ var _react_stately_virtualizer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @react-stately/virtualizer */ \"../../../../node_modules/.pnpm/@react-stately+virtualizer@4.3.1_react-dom@19.0.0_react@19.0.0__react@19.0.0/node_modules/@react-stately/virtualizer/dist/import.mjs\");\n\n\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */ \n\nconst $61ef60fc9b1041f4$var$DEFAULT_HEIGHT = 48;\nclass $61ef60fc9b1041f4$export$cacbb3924155d68e extends (0, _react_stately_virtualizer__WEBPACK_IMPORTED_MODULE_0__.Layout) {\n    // Backward compatibility for subclassing.\n    get collection() {\n        return this.virtualizer.collection;\n    }\n    getLayoutInfo(key) {\n        var _this_layoutNodes_get;\n        this.ensureLayoutInfo(key);\n        return ((_this_layoutNodes_get = this.layoutNodes.get(key)) === null || _this_layoutNodes_get === void 0 ? void 0 : _this_layoutNodes_get.layoutInfo) || null;\n    }\n    getVisibleLayoutInfos(rect) {\n        // Adjust rect to keep number of visible rows consistent.\n        // (only if height > 1 for getDropTargetFromPoint)\n        if (rect.height > 1) {\n            var _this_rowHeight, _ref;\n            let rowHeight = ((_ref = (_this_rowHeight = this.rowHeight) !== null && _this_rowHeight !== void 0 ? _this_rowHeight : this.estimatedRowHeight) !== null && _ref !== void 0 ? _ref : $61ef60fc9b1041f4$var$DEFAULT_HEIGHT) + this.gap;\n            rect.y = Math.floor(rect.y / rowHeight) * rowHeight;\n            rect.height = Math.ceil(rect.height / rowHeight) * rowHeight;\n        }\n        // If layout hasn't yet been done for the requested rect, union the\n        // new rect with the existing valid rect, and recompute.\n        this.layoutIfNeeded(rect);\n        let res = [];\n        let addNodes = (nodes)=>{\n            for (let node of nodes)if (this.isVisible(node, rect)) {\n                res.push(node.layoutInfo);\n                if (node.children) addNodes(node.children);\n            }\n        };\n        addNodes(this.rootNodes);\n        return res;\n    }\n    layoutIfNeeded(rect) {\n        if (!this.lastCollection) return;\n        if (!this.requestedRect.containsRect(rect)) {\n            this.requestedRect = this.requestedRect.union(rect);\n            this.rootNodes = this.buildCollection();\n        }\n        // Ensure all of the persisted keys are available.\n        for (let key of this.virtualizer.persistedKeys){\n            if (this.ensureLayoutInfo(key)) return;\n        }\n    }\n    ensureLayoutInfo(key) {\n        // If the layout info wasn't found, it might be outside the bounds of the area that we've\n        // computed layout for so far. This can happen when accessing a random key, e.g pressing Home/End.\n        // Compute the full layout and try again.\n        if (!this.layoutNodes.has(key) && this.requestedRect.area < this.contentSize.area && this.lastCollection) {\n            this.requestedRect = new (0, _react_stately_virtualizer__WEBPACK_IMPORTED_MODULE_0__.Rect)(0, 0, Infinity, Infinity);\n            this.rootNodes = this.buildCollection();\n            this.requestedRect = new (0, _react_stately_virtualizer__WEBPACK_IMPORTED_MODULE_0__.Rect)(0, 0, this.contentSize.width, this.contentSize.height);\n            return true;\n        }\n        return false;\n    }\n    isVisible(node, rect) {\n        return node.layoutInfo.rect.intersects(rect) || node.layoutInfo.isSticky || node.layoutInfo.type === 'header' || this.virtualizer.isPersistedKey(node.layoutInfo.key);\n    }\n    shouldInvalidateEverything(invalidationContext) {\n        // Invalidate cache if the size of the collection changed.\n        // In this case, we need to recalculate the entire layout.\n        // Also invalidate if fixed sizes/gaps change.\n        let options = invalidationContext.layoutOptions;\n        var _options_rowHeight, _options_headingHeight, _options_loaderHeight, _options_gap, _options_padding;\n        return invalidationContext.sizeChanged || this.rowHeight !== ((_options_rowHeight = options === null || options === void 0 ? void 0 : options.rowHeight) !== null && _options_rowHeight !== void 0 ? _options_rowHeight : this.rowHeight) || this.headingHeight !== ((_options_headingHeight = options === null || options === void 0 ? void 0 : options.headingHeight) !== null && _options_headingHeight !== void 0 ? _options_headingHeight : this.headingHeight) || this.loaderHeight !== ((_options_loaderHeight = options === null || options === void 0 ? void 0 : options.loaderHeight) !== null && _options_loaderHeight !== void 0 ? _options_loaderHeight : this.loaderHeight) || this.gap !== ((_options_gap = options === null || options === void 0 ? void 0 : options.gap) !== null && _options_gap !== void 0 ? _options_gap : this.gap) || this.padding !== ((_options_padding = options === null || options === void 0 ? void 0 : options.padding) !== null && _options_padding !== void 0 ? _options_padding : this.padding);\n    }\n    shouldInvalidateLayoutOptions(newOptions, oldOptions) {\n        return newOptions.rowHeight !== oldOptions.rowHeight || newOptions.estimatedRowHeight !== oldOptions.estimatedRowHeight || newOptions.headingHeight !== oldOptions.headingHeight || newOptions.estimatedHeadingHeight !== oldOptions.estimatedHeadingHeight || newOptions.loaderHeight !== oldOptions.loaderHeight || newOptions.dropIndicatorThickness !== oldOptions.dropIndicatorThickness || newOptions.gap !== oldOptions.gap || newOptions.padding !== oldOptions.padding;\n    }\n    update(invalidationContext) {\n        let collection = this.virtualizer.collection;\n        // Reset valid rect if we will have to invalidate everything.\n        // Otherwise we can reuse cached layout infos outside the current visible rect.\n        this.invalidateEverything = this.shouldInvalidateEverything(invalidationContext);\n        if (this.invalidateEverything) {\n            this.requestedRect = this.virtualizer.visibleRect.copy();\n            this.layoutNodes.clear();\n        }\n        let options = invalidationContext.layoutOptions;\n        var _options_rowHeight;\n        this.rowHeight = (_options_rowHeight = options === null || options === void 0 ? void 0 : options.rowHeight) !== null && _options_rowHeight !== void 0 ? _options_rowHeight : this.rowHeight;\n        var _options_estimatedRowHeight;\n        this.estimatedRowHeight = (_options_estimatedRowHeight = options === null || options === void 0 ? void 0 : options.estimatedRowHeight) !== null && _options_estimatedRowHeight !== void 0 ? _options_estimatedRowHeight : this.estimatedRowHeight;\n        var _options_headingHeight;\n        this.headingHeight = (_options_headingHeight = options === null || options === void 0 ? void 0 : options.headingHeight) !== null && _options_headingHeight !== void 0 ? _options_headingHeight : this.headingHeight;\n        var _options_estimatedHeadingHeight;\n        this.estimatedHeadingHeight = (_options_estimatedHeadingHeight = options === null || options === void 0 ? void 0 : options.estimatedHeadingHeight) !== null && _options_estimatedHeadingHeight !== void 0 ? _options_estimatedHeadingHeight : this.estimatedHeadingHeight;\n        var _options_loaderHeight;\n        this.loaderHeight = (_options_loaderHeight = options === null || options === void 0 ? void 0 : options.loaderHeight) !== null && _options_loaderHeight !== void 0 ? _options_loaderHeight : this.loaderHeight;\n        var _options_dropIndicatorThickness;\n        this.dropIndicatorThickness = (_options_dropIndicatorThickness = options === null || options === void 0 ? void 0 : options.dropIndicatorThickness) !== null && _options_dropIndicatorThickness !== void 0 ? _options_dropIndicatorThickness : this.dropIndicatorThickness;\n        var _options_gap;\n        this.gap = (_options_gap = options === null || options === void 0 ? void 0 : options.gap) !== null && _options_gap !== void 0 ? _options_gap : this.gap;\n        var _options_padding;\n        this.padding = (_options_padding = options === null || options === void 0 ? void 0 : options.padding) !== null && _options_padding !== void 0 ? _options_padding : this.padding;\n        this.rootNodes = this.buildCollection();\n        // Remove deleted layout nodes\n        if (this.lastCollection && collection !== this.lastCollection) {\n            for (let key of this.lastCollection.getKeys())if (!collection.getItem(key)) {\n                let layoutNode = this.layoutNodes.get(key);\n                if (layoutNode) this.layoutNodes.delete(key);\n            }\n        }\n        this.lastCollection = collection;\n        this.invalidateEverything = false;\n        this.validRect = this.requestedRect.copy();\n    }\n    buildCollection(y = this.padding) {\n        let collection = this.virtualizer.collection;\n        let skipped = 0;\n        let nodes = [];\n        for (let node of collection){\n            var _this_rowHeight, _ref;\n            let rowHeight = ((_ref = (_this_rowHeight = this.rowHeight) !== null && _this_rowHeight !== void 0 ? _this_rowHeight : this.estimatedRowHeight) !== null && _ref !== void 0 ? _ref : $61ef60fc9b1041f4$var$DEFAULT_HEIGHT) + this.gap;\n            // Skip rows before the valid rectangle unless they are already cached.\n            if (node.type === 'item' && y + rowHeight < this.requestedRect.y && !this.isValid(node, y)) {\n                y += rowHeight;\n                skipped++;\n                continue;\n            }\n            let layoutNode = this.buildChild(node, this.padding, y, null);\n            y = layoutNode.layoutInfo.rect.maxY + this.gap;\n            nodes.push(layoutNode);\n            if (node.type === 'item' && y > this.requestedRect.maxY) {\n                y += (collection.size - (nodes.length + skipped)) * rowHeight;\n                break;\n            }\n        }\n        y -= this.gap;\n        y += this.padding;\n        this.contentSize = new (0, _react_stately_virtualizer__WEBPACK_IMPORTED_MODULE_0__.Size)(this.virtualizer.visibleRect.width, y);\n        return nodes;\n    }\n    isValid(node, y) {\n        let cached = this.layoutNodes.get(node.key);\n        return !this.invalidateEverything && cached && cached.node === node && y === cached.layoutInfo.rect.y && cached.layoutInfo.rect.intersects(this.validRect) && cached.validRect.containsRect(cached.layoutInfo.rect.intersection(this.requestedRect));\n    }\n    buildChild(node, x, y, parentKey) {\n        if (this.isValid(node, y)) return this.layoutNodes.get(node.key);\n        let layoutNode = this.buildNode(node, x, y);\n        layoutNode.layoutInfo.parentKey = parentKey !== null && parentKey !== void 0 ? parentKey : null;\n        this.layoutNodes.set(node.key, layoutNode);\n        return layoutNode;\n    }\n    buildNode(node, x, y) {\n        switch(node.type){\n            case 'section':\n                return this.buildSection(node, x, y);\n            case 'item':\n                return this.buildItem(node, x, y);\n            case 'header':\n                return this.buildSectionHeader(node, x, y);\n            case 'loader':\n                return this.buildLoader(node, x, y);\n            default:\n                throw new Error('Unsupported node type: ' + node.type);\n        }\n    }\n    buildLoader(node, x, y) {\n        let rect = new (0, _react_stately_virtualizer__WEBPACK_IMPORTED_MODULE_0__.Rect)(x, y, this.padding, 0);\n        let layoutInfo = new (0, _react_stately_virtualizer__WEBPACK_IMPORTED_MODULE_0__.LayoutInfo)('loader', node.key, rect);\n        rect.width = this.virtualizer.contentSize.width - this.padding - x;\n        rect.height = this.loaderHeight || this.rowHeight || this.estimatedRowHeight || $61ef60fc9b1041f4$var$DEFAULT_HEIGHT;\n        return {\n            layoutInfo: layoutInfo,\n            validRect: rect.intersection(this.requestedRect)\n        };\n    }\n    buildSection(node, x, y) {\n        let collection = this.virtualizer.collection;\n        let width = this.virtualizer.visibleRect.width - this.padding;\n        let rect = new (0, _react_stately_virtualizer__WEBPACK_IMPORTED_MODULE_0__.Rect)(x, y, width - x, 0);\n        let layoutInfo = new (0, _react_stately_virtualizer__WEBPACK_IMPORTED_MODULE_0__.LayoutInfo)(node.type, node.key, rect);\n        let startY = y;\n        let skipped = 0;\n        let children = [];\n        for (let child of (0, _react_stately_collections__WEBPACK_IMPORTED_MODULE_1__.getChildNodes)(node, collection)){\n            var _this_rowHeight, _ref;\n            let rowHeight = ((_ref = (_this_rowHeight = this.rowHeight) !== null && _this_rowHeight !== void 0 ? _this_rowHeight : this.estimatedRowHeight) !== null && _ref !== void 0 ? _ref : $61ef60fc9b1041f4$var$DEFAULT_HEIGHT) + this.gap;\n            // Skip rows before the valid rectangle unless they are already cached.\n            if (y + rowHeight < this.requestedRect.y && !this.isValid(node, y)) {\n                y += rowHeight;\n                skipped++;\n                continue;\n            }\n            let layoutNode = this.buildChild(child, x, y, layoutInfo.key);\n            y = layoutNode.layoutInfo.rect.maxY + this.gap;\n            children.push(layoutNode);\n            if (y > this.requestedRect.maxY) {\n                // Estimate the remaining height for rows that we don't need to layout right now.\n                y += ([\n                    ...(0, _react_stately_collections__WEBPACK_IMPORTED_MODULE_1__.getChildNodes)(node, collection)\n                ].length - (children.length + skipped)) * rowHeight;\n                break;\n            }\n        }\n        y -= this.gap;\n        rect.height = y - startY;\n        return {\n            layoutInfo: layoutInfo,\n            children: children,\n            validRect: layoutInfo.rect.intersection(this.requestedRect),\n            node: node\n        };\n    }\n    buildSectionHeader(node, x, y) {\n        let width = this.virtualizer.visibleRect.width - this.padding;\n        let rectHeight = this.headingHeight;\n        let isEstimated = false;\n        // If no explicit height is available, use an estimated height.\n        if (rectHeight == null) {\n            // If a previous version of this layout info exists, reuse its height.\n            // Mark as estimated if the size of the overall virtualizer changed,\n            // or the content of the item changed.\n            let previousLayoutNode = this.layoutNodes.get(node.key);\n            let previousLayoutInfo = previousLayoutNode === null || previousLayoutNode === void 0 ? void 0 : previousLayoutNode.layoutInfo;\n            if (previousLayoutInfo) {\n                let curNode = this.virtualizer.collection.getItem(node.key);\n                let lastNode = this.lastCollection ? this.lastCollection.getItem(node.key) : null;\n                rectHeight = previousLayoutInfo.rect.height;\n                isEstimated = width !== previousLayoutInfo.rect.width || curNode !== lastNode || previousLayoutInfo.estimatedSize;\n            } else {\n                rectHeight = node.rendered ? this.estimatedHeadingHeight : 0;\n                isEstimated = true;\n            }\n        }\n        if (rectHeight == null) rectHeight = $61ef60fc9b1041f4$var$DEFAULT_HEIGHT;\n        let headerRect = new (0, _react_stately_virtualizer__WEBPACK_IMPORTED_MODULE_0__.Rect)(x, y, width - x, rectHeight);\n        let header = new (0, _react_stately_virtualizer__WEBPACK_IMPORTED_MODULE_0__.LayoutInfo)('header', node.key, headerRect);\n        header.estimatedSize = isEstimated;\n        return {\n            layoutInfo: header,\n            children: [],\n            validRect: header.rect.intersection(this.requestedRect),\n            node: node\n        };\n    }\n    buildItem(node, x, y) {\n        let width = this.virtualizer.visibleRect.width - this.padding - x;\n        let rectHeight = this.rowHeight;\n        let isEstimated = false;\n        // If no explicit height is available, use an estimated height.\n        if (rectHeight == null) {\n            // If a previous version of this layout info exists, reuse its height.\n            // Mark as estimated if the size of the overall virtualizer changed,\n            // or the content of the item changed.\n            let previousLayoutNode = this.layoutNodes.get(node.key);\n            if (previousLayoutNode) {\n                rectHeight = previousLayoutNode.layoutInfo.rect.height;\n                isEstimated = width !== previousLayoutNode.layoutInfo.rect.width || node !== previousLayoutNode.node || previousLayoutNode.layoutInfo.estimatedSize;\n            } else {\n                rectHeight = this.estimatedRowHeight;\n                isEstimated = true;\n            }\n        }\n        if (rectHeight == null) rectHeight = $61ef60fc9b1041f4$var$DEFAULT_HEIGHT;\n        let rect = new (0, _react_stately_virtualizer__WEBPACK_IMPORTED_MODULE_0__.Rect)(x, y, width, rectHeight);\n        let layoutInfo = new (0, _react_stately_virtualizer__WEBPACK_IMPORTED_MODULE_0__.LayoutInfo)(node.type, node.key, rect);\n        layoutInfo.estimatedSize = isEstimated;\n        return {\n            layoutInfo: layoutInfo,\n            children: [],\n            validRect: layoutInfo.rect,\n            node: node\n        };\n    }\n    updateItemSize(key, size) {\n        let layoutNode = this.layoutNodes.get(key);\n        // If no layoutInfo, item has been deleted/removed.\n        if (!layoutNode) return false;\n        let collection = this.virtualizer.collection;\n        let layoutInfo = layoutNode.layoutInfo;\n        layoutInfo.estimatedSize = false;\n        if (layoutInfo.rect.height !== size.height) {\n            // Copy layout info rather than mutating so that later caches are invalidated.\n            let newLayoutInfo = layoutInfo.copy();\n            newLayoutInfo.rect.height = size.height;\n            layoutNode.layoutInfo = newLayoutInfo;\n            // Items after this layoutInfo will need to be repositioned to account for the new height.\n            // Adjust the validRect so that only items above remain valid.\n            this.validRect.height = Math.min(this.validRect.height, layoutInfo.rect.y - this.validRect.y);\n            // The requestedRect also needs to be adjusted to account for the height difference.\n            this.requestedRect.height += newLayoutInfo.rect.height - layoutInfo.rect.height;\n            // Invalidate layout for this layout node and all parents\n            this.updateLayoutNode(key, layoutInfo, newLayoutInfo);\n            let node = layoutInfo.parentKey != null ? collection.getItem(layoutInfo.parentKey) : null;\n            while(node){\n                this.updateLayoutNode(node.key, layoutInfo, newLayoutInfo);\n                node = node.parentKey != null ? collection.getItem(node.parentKey) : null;\n            }\n            return true;\n        }\n        return false;\n    }\n    updateLayoutNode(key, oldLayoutInfo, newLayoutInfo) {\n        let n = this.layoutNodes.get(key);\n        if (n) {\n            // Invalidate by intersecting the validRect of this node with the overall validRect.\n            n.validRect = n.validRect.intersection(this.validRect);\n            // Replace layout info in LayoutNode\n            if (n.layoutInfo === oldLayoutInfo) n.layoutInfo = newLayoutInfo;\n        }\n    }\n    getContentSize() {\n        return this.contentSize;\n    }\n    getDropTargetFromPoint(x, y, isValidDropTarget) {\n        x += this.virtualizer.visibleRect.x;\n        y += this.virtualizer.visibleRect.y;\n        // Find the closest item within on either side of the point using the gap width.\n        let searchRect = new (0, _react_stately_virtualizer__WEBPACK_IMPORTED_MODULE_0__.Rect)(x, Math.max(0, y - this.gap), 1, this.gap * 2);\n        let candidates = this.getVisibleLayoutInfos(searchRect);\n        let key = null;\n        let minDistance = Infinity;\n        for (let candidate of candidates){\n            // Ignore items outside the search rect, e.g. persisted keys.\n            if (!candidate.rect.intersects(searchRect)) continue;\n            let yDist = Math.abs(candidate.rect.y - y);\n            let maxYDist = Math.abs(candidate.rect.maxY - y);\n            let dist = Math.min(yDist, maxYDist);\n            if (dist < minDistance) {\n                minDistance = dist;\n                key = candidate.key;\n            }\n        }\n        if (key == null || this.virtualizer.collection.size === 0) return {\n            type: 'root'\n        };\n        let layoutInfo = this.getLayoutInfo(key);\n        if (!layoutInfo) return null;\n        let rect = layoutInfo.rect;\n        let target = {\n            type: 'item',\n            key: layoutInfo.key,\n            dropPosition: 'on'\n        };\n        // If dropping on the item isn't accepted, try the target before or after depending on the y position.\n        // Otherwise, if dropping on the item is accepted, still try the before/after positions if within 10px\n        // of the top or bottom of the item.\n        if (!isValidDropTarget(target)) {\n            if (y <= rect.y + rect.height / 2 && isValidDropTarget({\n                ...target,\n                dropPosition: 'before'\n            })) target.dropPosition = 'before';\n            else if (isValidDropTarget({\n                ...target,\n                dropPosition: 'after'\n            })) target.dropPosition = 'after';\n        } else if (y <= rect.y + 10 && isValidDropTarget({\n            ...target,\n            dropPosition: 'before'\n        })) target.dropPosition = 'before';\n        else if (y >= rect.maxY - 10 && isValidDropTarget({\n            ...target,\n            dropPosition: 'after'\n        })) target.dropPosition = 'after';\n        return target;\n    }\n    getDropTargetLayoutInfo(target) {\n        let layoutInfo = this.getLayoutInfo(target.key);\n        let rect;\n        if (target.dropPosition === 'before') rect = new (0, _react_stately_virtualizer__WEBPACK_IMPORTED_MODULE_0__.Rect)(layoutInfo.rect.x, layoutInfo.rect.y - this.dropIndicatorThickness / 2, layoutInfo.rect.width, this.dropIndicatorThickness);\n        else if (target.dropPosition === 'after') rect = new (0, _react_stately_virtualizer__WEBPACK_IMPORTED_MODULE_0__.Rect)(layoutInfo.rect.x, layoutInfo.rect.maxY - this.dropIndicatorThickness / 2, layoutInfo.rect.width, this.dropIndicatorThickness);\n        else rect = layoutInfo.rect;\n        return new (0, _react_stately_virtualizer__WEBPACK_IMPORTED_MODULE_0__.LayoutInfo)('dropIndicator', target.key + ':' + target.dropPosition, rect);\n    }\n    /**\n   * Creates a new ListLayout with options. See the list of properties below for a description\n   * of the options that can be provided.\n   */ constructor(options = {}){\n        super();\n        var _options_rowHeight;\n        this.rowHeight = (_options_rowHeight = options.rowHeight) !== null && _options_rowHeight !== void 0 ? _options_rowHeight : null;\n        var _options_estimatedRowHeight;\n        this.estimatedRowHeight = (_options_estimatedRowHeight = options.estimatedRowHeight) !== null && _options_estimatedRowHeight !== void 0 ? _options_estimatedRowHeight : null;\n        var _options_headingHeight;\n        this.headingHeight = (_options_headingHeight = options.headingHeight) !== null && _options_headingHeight !== void 0 ? _options_headingHeight : null;\n        var _options_estimatedHeadingHeight;\n        this.estimatedHeadingHeight = (_options_estimatedHeadingHeight = options.estimatedHeadingHeight) !== null && _options_estimatedHeadingHeight !== void 0 ? _options_estimatedHeadingHeight : null;\n        var _options_loaderHeight;\n        this.loaderHeight = (_options_loaderHeight = options.loaderHeight) !== null && _options_loaderHeight !== void 0 ? _options_loaderHeight : null;\n        this.dropIndicatorThickness = options.dropIndicatorThickness || 2;\n        this.gap = options.gap || 0;\n        this.padding = options.padding || 0;\n        this.layoutNodes = new Map();\n        this.rootNodes = [];\n        this.lastCollection = null;\n        this.invalidateEverything = false;\n        this.validRect = new (0, _react_stately_virtualizer__WEBPACK_IMPORTED_MODULE_0__.Rect)();\n        this.requestedRect = new (0, _react_stately_virtualizer__WEBPACK_IMPORTED_MODULE_0__.Rect)();\n        this.contentSize = new (0, _react_stately_virtualizer__WEBPACK_IMPORTED_MODULE_0__.Size)();\n    }\n}\n\n\n\n//# sourceMappingURL=ListLayout.module.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0ByZWFjdC1zdGF0ZWx5K2xheW91dEA0LjIuMV9yZWFjdC1kb21AMTkuMC4wX3JlYWN0QDE5LjAuMF9fcmVhY3RAMTkuMC4wL25vZGVfbW9kdWxlcy9AcmVhY3Qtc3RhdGVseS9sYXlvdXQvZGlzdC9MaXN0TGF5b3V0Lm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBaUY7QUFDNkQ7O0FBRTlJO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSw0REFBNEQsOERBQWE7QUFDekU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlDQUF5Qyw0REFBVztBQUNwRDtBQUNBLHlDQUF5Qyw0REFBVztBQUNwRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1DQUFtQyw0REFBVztBQUM5QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJCQUEyQiw0REFBVztBQUN0QyxpQ0FBaUMsa0VBQWlCO0FBQ2xEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkJBQTJCLDREQUFXO0FBQ3RDLGlDQUFpQyxrRUFBaUI7QUFDbEQ7QUFDQTtBQUNBO0FBQ0EsOEJBQThCLHFFQUFvQjtBQUNsRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkJBQTJCLHFFQUFvQjtBQUMvQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQ0FBaUMsNERBQVc7QUFDNUMsNkJBQTZCLGtFQUFpQjtBQUM5QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJCQUEyQiw0REFBVztBQUN0QyxpQ0FBaUMsa0VBQWlCO0FBQ2xEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUNBQWlDLDREQUFXO0FBQzVDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiLFVBQVU7QUFDVjtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkRBQTZELDREQUFXO0FBQ3hFLGlFQUFpRSw0REFBVztBQUM1RTtBQUNBLHVCQUF1QixrRUFBaUI7QUFDeEM7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4QkFBOEI7QUFDOUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUNBQWlDLDREQUFXO0FBQzVDLHFDQUFxQyw0REFBVztBQUNoRCxtQ0FBbUMsNERBQVc7QUFDOUM7QUFDQTs7O0FBR2lFO0FBQ2pFIiwic291cmNlcyI6WyIvVXNlcnMvamFpbWVpc3JhZWxjYW1wZWFzL2tleXN0b25lL25vZGVfbW9kdWxlcy8ucG5wbS9AcmVhY3Qtc3RhdGVseStsYXlvdXRANC4yLjFfcmVhY3QtZG9tQDE5LjAuMF9yZWFjdEAxOS4wLjBfX3JlYWN0QDE5LjAuMC9ub2RlX21vZHVsZXMvQHJlYWN0LXN0YXRlbHkvbGF5b3V0L2Rpc3QvTGlzdExheW91dC5tanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtnZXRDaGlsZE5vZGVzIGFzICRpbWcyNiRnZXRDaGlsZE5vZGVzfSBmcm9tIFwiQHJlYWN0LXN0YXRlbHkvY29sbGVjdGlvbnNcIjtcbmltcG9ydCB7UmVjdCBhcyAkaW1nMjYkUmVjdCwgU2l6ZSBhcyAkaW1nMjYkU2l6ZSwgTGF5b3V0SW5mbyBhcyAkaW1nMjYkTGF5b3V0SW5mbywgTGF5b3V0IGFzICRpbWcyNiRMYXlvdXR9IGZyb20gXCJAcmVhY3Qtc3RhdGVseS92aXJ0dWFsaXplclwiO1xuXG4vKlxuICogQ29weXJpZ2h0IDIwMjAgQWRvYmUuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBUaGlzIGZpbGUgaXMgbGljZW5zZWQgdG8geW91IHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuIFlvdSBtYXkgb2J0YWluIGEgY29weVxuICogb2YgdGhlIExpY2Vuc2UgYXQgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlclxuICogdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgUkVQUkVTRU5UQVRJT05TXG4gKiBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2VcbiAqIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi8gXG5cbmNvbnN0ICQ2MWVmNjBmYzliMTA0MWY0JHZhciRERUZBVUxUX0hFSUdIVCA9IDQ4O1xuY2xhc3MgJDYxZWY2MGZjOWIxMDQxZjQkZXhwb3J0JGNhY2JiMzkyNDE1NWQ2OGUgZXh0ZW5kcyAoMCwgJGltZzI2JExheW91dCkge1xuICAgIC8vIEJhY2t3YXJkIGNvbXBhdGliaWxpdHkgZm9yIHN1YmNsYXNzaW5nLlxuICAgIGdldCBjb2xsZWN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy52aXJ0dWFsaXplci5jb2xsZWN0aW9uO1xuICAgIH1cbiAgICBnZXRMYXlvdXRJbmZvKGtleSkge1xuICAgICAgICB2YXIgX3RoaXNfbGF5b3V0Tm9kZXNfZ2V0O1xuICAgICAgICB0aGlzLmVuc3VyZUxheW91dEluZm8oa2V5KTtcbiAgICAgICAgcmV0dXJuICgoX3RoaXNfbGF5b3V0Tm9kZXNfZ2V0ID0gdGhpcy5sYXlvdXROb2Rlcy5nZXQoa2V5KSkgPT09IG51bGwgfHwgX3RoaXNfbGF5b3V0Tm9kZXNfZ2V0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfdGhpc19sYXlvdXROb2Rlc19nZXQubGF5b3V0SW5mbykgfHwgbnVsbDtcbiAgICB9XG4gICAgZ2V0VmlzaWJsZUxheW91dEluZm9zKHJlY3QpIHtcbiAgICAgICAgLy8gQWRqdXN0IHJlY3QgdG8ga2VlcCBudW1iZXIgb2YgdmlzaWJsZSByb3dzIGNvbnNpc3RlbnQuXG4gICAgICAgIC8vIChvbmx5IGlmIGhlaWdodCA+IDEgZm9yIGdldERyb3BUYXJnZXRGcm9tUG9pbnQpXG4gICAgICAgIGlmIChyZWN0LmhlaWdodCA+IDEpIHtcbiAgICAgICAgICAgIHZhciBfdGhpc19yb3dIZWlnaHQsIF9yZWY7XG4gICAgICAgICAgICBsZXQgcm93SGVpZ2h0ID0gKChfcmVmID0gKF90aGlzX3Jvd0hlaWdodCA9IHRoaXMucm93SGVpZ2h0KSAhPT0gbnVsbCAmJiBfdGhpc19yb3dIZWlnaHQgIT09IHZvaWQgMCA/IF90aGlzX3Jvd0hlaWdodCA6IHRoaXMuZXN0aW1hdGVkUm93SGVpZ2h0KSAhPT0gbnVsbCAmJiBfcmVmICE9PSB2b2lkIDAgPyBfcmVmIDogJDYxZWY2MGZjOWIxMDQxZjQkdmFyJERFRkFVTFRfSEVJR0hUKSArIHRoaXMuZ2FwO1xuICAgICAgICAgICAgcmVjdC55ID0gTWF0aC5mbG9vcihyZWN0LnkgLyByb3dIZWlnaHQpICogcm93SGVpZ2h0O1xuICAgICAgICAgICAgcmVjdC5oZWlnaHQgPSBNYXRoLmNlaWwocmVjdC5oZWlnaHQgLyByb3dIZWlnaHQpICogcm93SGVpZ2h0O1xuICAgICAgICB9XG4gICAgICAgIC8vIElmIGxheW91dCBoYXNuJ3QgeWV0IGJlZW4gZG9uZSBmb3IgdGhlIHJlcXVlc3RlZCByZWN0LCB1bmlvbiB0aGVcbiAgICAgICAgLy8gbmV3IHJlY3Qgd2l0aCB0aGUgZXhpc3RpbmcgdmFsaWQgcmVjdCwgYW5kIHJlY29tcHV0ZS5cbiAgICAgICAgdGhpcy5sYXlvdXRJZk5lZWRlZChyZWN0KTtcbiAgICAgICAgbGV0IHJlcyA9IFtdO1xuICAgICAgICBsZXQgYWRkTm9kZXMgPSAobm9kZXMpPT57XG4gICAgICAgICAgICBmb3IgKGxldCBub2RlIG9mIG5vZGVzKWlmICh0aGlzLmlzVmlzaWJsZShub2RlLCByZWN0KSkge1xuICAgICAgICAgICAgICAgIHJlcy5wdXNoKG5vZGUubGF5b3V0SW5mbyk7XG4gICAgICAgICAgICAgICAgaWYgKG5vZGUuY2hpbGRyZW4pIGFkZE5vZGVzKG5vZGUuY2hpbGRyZW4pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBhZGROb2Rlcyh0aGlzLnJvb3ROb2Rlcyk7XG4gICAgICAgIHJldHVybiByZXM7XG4gICAgfVxuICAgIGxheW91dElmTmVlZGVkKHJlY3QpIHtcbiAgICAgICAgaWYgKCF0aGlzLmxhc3RDb2xsZWN0aW9uKSByZXR1cm47XG4gICAgICAgIGlmICghdGhpcy5yZXF1ZXN0ZWRSZWN0LmNvbnRhaW5zUmVjdChyZWN0KSkge1xuICAgICAgICAgICAgdGhpcy5yZXF1ZXN0ZWRSZWN0ID0gdGhpcy5yZXF1ZXN0ZWRSZWN0LnVuaW9uKHJlY3QpO1xuICAgICAgICAgICAgdGhpcy5yb290Tm9kZXMgPSB0aGlzLmJ1aWxkQ29sbGVjdGlvbigpO1xuICAgICAgICB9XG4gICAgICAgIC8vIEVuc3VyZSBhbGwgb2YgdGhlIHBlcnNpc3RlZCBrZXlzIGFyZSBhdmFpbGFibGUuXG4gICAgICAgIGZvciAobGV0IGtleSBvZiB0aGlzLnZpcnR1YWxpemVyLnBlcnNpc3RlZEtleXMpe1xuICAgICAgICAgICAgaWYgKHRoaXMuZW5zdXJlTGF5b3V0SW5mbyhrZXkpKSByZXR1cm47XG4gICAgICAgIH1cbiAgICB9XG4gICAgZW5zdXJlTGF5b3V0SW5mbyhrZXkpIHtcbiAgICAgICAgLy8gSWYgdGhlIGxheW91dCBpbmZvIHdhc24ndCBmb3VuZCwgaXQgbWlnaHQgYmUgb3V0c2lkZSB0aGUgYm91bmRzIG9mIHRoZSBhcmVhIHRoYXQgd2UndmVcbiAgICAgICAgLy8gY29tcHV0ZWQgbGF5b3V0IGZvciBzbyBmYXIuIFRoaXMgY2FuIGhhcHBlbiB3aGVuIGFjY2Vzc2luZyBhIHJhbmRvbSBrZXksIGUuZyBwcmVzc2luZyBIb21lL0VuZC5cbiAgICAgICAgLy8gQ29tcHV0ZSB0aGUgZnVsbCBsYXlvdXQgYW5kIHRyeSBhZ2Fpbi5cbiAgICAgICAgaWYgKCF0aGlzLmxheW91dE5vZGVzLmhhcyhrZXkpICYmIHRoaXMucmVxdWVzdGVkUmVjdC5hcmVhIDwgdGhpcy5jb250ZW50U2l6ZS5hcmVhICYmIHRoaXMubGFzdENvbGxlY3Rpb24pIHtcbiAgICAgICAgICAgIHRoaXMucmVxdWVzdGVkUmVjdCA9IG5ldyAoMCwgJGltZzI2JFJlY3QpKDAsIDAsIEluZmluaXR5LCBJbmZpbml0eSk7XG4gICAgICAgICAgICB0aGlzLnJvb3ROb2RlcyA9IHRoaXMuYnVpbGRDb2xsZWN0aW9uKCk7XG4gICAgICAgICAgICB0aGlzLnJlcXVlc3RlZFJlY3QgPSBuZXcgKDAsICRpbWcyNiRSZWN0KSgwLCAwLCB0aGlzLmNvbnRlbnRTaXplLndpZHRoLCB0aGlzLmNvbnRlbnRTaXplLmhlaWdodCk7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGlzVmlzaWJsZShub2RlLCByZWN0KSB7XG4gICAgICAgIHJldHVybiBub2RlLmxheW91dEluZm8ucmVjdC5pbnRlcnNlY3RzKHJlY3QpIHx8IG5vZGUubGF5b3V0SW5mby5pc1N0aWNreSB8fCBub2RlLmxheW91dEluZm8udHlwZSA9PT0gJ2hlYWRlcicgfHwgdGhpcy52aXJ0dWFsaXplci5pc1BlcnNpc3RlZEtleShub2RlLmxheW91dEluZm8ua2V5KTtcbiAgICB9XG4gICAgc2hvdWxkSW52YWxpZGF0ZUV2ZXJ5dGhpbmcoaW52YWxpZGF0aW9uQ29udGV4dCkge1xuICAgICAgICAvLyBJbnZhbGlkYXRlIGNhY2hlIGlmIHRoZSBzaXplIG9mIHRoZSBjb2xsZWN0aW9uIGNoYW5nZWQuXG4gICAgICAgIC8vIEluIHRoaXMgY2FzZSwgd2UgbmVlZCB0byByZWNhbGN1bGF0ZSB0aGUgZW50aXJlIGxheW91dC5cbiAgICAgICAgLy8gQWxzbyBpbnZhbGlkYXRlIGlmIGZpeGVkIHNpemVzL2dhcHMgY2hhbmdlLlxuICAgICAgICBsZXQgb3B0aW9ucyA9IGludmFsaWRhdGlvbkNvbnRleHQubGF5b3V0T3B0aW9ucztcbiAgICAgICAgdmFyIF9vcHRpb25zX3Jvd0hlaWdodCwgX29wdGlvbnNfaGVhZGluZ0hlaWdodCwgX29wdGlvbnNfbG9hZGVySGVpZ2h0LCBfb3B0aW9uc19nYXAsIF9vcHRpb25zX3BhZGRpbmc7XG4gICAgICAgIHJldHVybiBpbnZhbGlkYXRpb25Db250ZXh0LnNpemVDaGFuZ2VkIHx8IHRoaXMucm93SGVpZ2h0ICE9PSAoKF9vcHRpb25zX3Jvd0hlaWdodCA9IG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5yb3dIZWlnaHQpICE9PSBudWxsICYmIF9vcHRpb25zX3Jvd0hlaWdodCAhPT0gdm9pZCAwID8gX29wdGlvbnNfcm93SGVpZ2h0IDogdGhpcy5yb3dIZWlnaHQpIHx8IHRoaXMuaGVhZGluZ0hlaWdodCAhPT0gKChfb3B0aW9uc19oZWFkaW5nSGVpZ2h0ID0gb3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLmhlYWRpbmdIZWlnaHQpICE9PSBudWxsICYmIF9vcHRpb25zX2hlYWRpbmdIZWlnaHQgIT09IHZvaWQgMCA/IF9vcHRpb25zX2hlYWRpbmdIZWlnaHQgOiB0aGlzLmhlYWRpbmdIZWlnaHQpIHx8IHRoaXMubG9hZGVySGVpZ2h0ICE9PSAoKF9vcHRpb25zX2xvYWRlckhlaWdodCA9IG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5sb2FkZXJIZWlnaHQpICE9PSBudWxsICYmIF9vcHRpb25zX2xvYWRlckhlaWdodCAhPT0gdm9pZCAwID8gX29wdGlvbnNfbG9hZGVySGVpZ2h0IDogdGhpcy5sb2FkZXJIZWlnaHQpIHx8IHRoaXMuZ2FwICE9PSAoKF9vcHRpb25zX2dhcCA9IG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5nYXApICE9PSBudWxsICYmIF9vcHRpb25zX2dhcCAhPT0gdm9pZCAwID8gX29wdGlvbnNfZ2FwIDogdGhpcy5nYXApIHx8IHRoaXMucGFkZGluZyAhPT0gKChfb3B0aW9uc19wYWRkaW5nID0gb3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLnBhZGRpbmcpICE9PSBudWxsICYmIF9vcHRpb25zX3BhZGRpbmcgIT09IHZvaWQgMCA/IF9vcHRpb25zX3BhZGRpbmcgOiB0aGlzLnBhZGRpbmcpO1xuICAgIH1cbiAgICBzaG91bGRJbnZhbGlkYXRlTGF5b3V0T3B0aW9ucyhuZXdPcHRpb25zLCBvbGRPcHRpb25zKSB7XG4gICAgICAgIHJldHVybiBuZXdPcHRpb25zLnJvd0hlaWdodCAhPT0gb2xkT3B0aW9ucy5yb3dIZWlnaHQgfHwgbmV3T3B0aW9ucy5lc3RpbWF0ZWRSb3dIZWlnaHQgIT09IG9sZE9wdGlvbnMuZXN0aW1hdGVkUm93SGVpZ2h0IHx8IG5ld09wdGlvbnMuaGVhZGluZ0hlaWdodCAhPT0gb2xkT3B0aW9ucy5oZWFkaW5nSGVpZ2h0IHx8IG5ld09wdGlvbnMuZXN0aW1hdGVkSGVhZGluZ0hlaWdodCAhPT0gb2xkT3B0aW9ucy5lc3RpbWF0ZWRIZWFkaW5nSGVpZ2h0IHx8IG5ld09wdGlvbnMubG9hZGVySGVpZ2h0ICE9PSBvbGRPcHRpb25zLmxvYWRlckhlaWdodCB8fCBuZXdPcHRpb25zLmRyb3BJbmRpY2F0b3JUaGlja25lc3MgIT09IG9sZE9wdGlvbnMuZHJvcEluZGljYXRvclRoaWNrbmVzcyB8fCBuZXdPcHRpb25zLmdhcCAhPT0gb2xkT3B0aW9ucy5nYXAgfHwgbmV3T3B0aW9ucy5wYWRkaW5nICE9PSBvbGRPcHRpb25zLnBhZGRpbmc7XG4gICAgfVxuICAgIHVwZGF0ZShpbnZhbGlkYXRpb25Db250ZXh0KSB7XG4gICAgICAgIGxldCBjb2xsZWN0aW9uID0gdGhpcy52aXJ0dWFsaXplci5jb2xsZWN0aW9uO1xuICAgICAgICAvLyBSZXNldCB2YWxpZCByZWN0IGlmIHdlIHdpbGwgaGF2ZSB0byBpbnZhbGlkYXRlIGV2ZXJ5dGhpbmcuXG4gICAgICAgIC8vIE90aGVyd2lzZSB3ZSBjYW4gcmV1c2UgY2FjaGVkIGxheW91dCBpbmZvcyBvdXRzaWRlIHRoZSBjdXJyZW50IHZpc2libGUgcmVjdC5cbiAgICAgICAgdGhpcy5pbnZhbGlkYXRlRXZlcnl0aGluZyA9IHRoaXMuc2hvdWxkSW52YWxpZGF0ZUV2ZXJ5dGhpbmcoaW52YWxpZGF0aW9uQ29udGV4dCk7XG4gICAgICAgIGlmICh0aGlzLmludmFsaWRhdGVFdmVyeXRoaW5nKSB7XG4gICAgICAgICAgICB0aGlzLnJlcXVlc3RlZFJlY3QgPSB0aGlzLnZpcnR1YWxpemVyLnZpc2libGVSZWN0LmNvcHkoKTtcbiAgICAgICAgICAgIHRoaXMubGF5b3V0Tm9kZXMuY2xlYXIoKTtcbiAgICAgICAgfVxuICAgICAgICBsZXQgb3B0aW9ucyA9IGludmFsaWRhdGlvbkNvbnRleHQubGF5b3V0T3B0aW9ucztcbiAgICAgICAgdmFyIF9vcHRpb25zX3Jvd0hlaWdodDtcbiAgICAgICAgdGhpcy5yb3dIZWlnaHQgPSAoX29wdGlvbnNfcm93SGVpZ2h0ID0gb3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLnJvd0hlaWdodCkgIT09IG51bGwgJiYgX29wdGlvbnNfcm93SGVpZ2h0ICE9PSB2b2lkIDAgPyBfb3B0aW9uc19yb3dIZWlnaHQgOiB0aGlzLnJvd0hlaWdodDtcbiAgICAgICAgdmFyIF9vcHRpb25zX2VzdGltYXRlZFJvd0hlaWdodDtcbiAgICAgICAgdGhpcy5lc3RpbWF0ZWRSb3dIZWlnaHQgPSAoX29wdGlvbnNfZXN0aW1hdGVkUm93SGVpZ2h0ID0gb3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLmVzdGltYXRlZFJvd0hlaWdodCkgIT09IG51bGwgJiYgX29wdGlvbnNfZXN0aW1hdGVkUm93SGVpZ2h0ICE9PSB2b2lkIDAgPyBfb3B0aW9uc19lc3RpbWF0ZWRSb3dIZWlnaHQgOiB0aGlzLmVzdGltYXRlZFJvd0hlaWdodDtcbiAgICAgICAgdmFyIF9vcHRpb25zX2hlYWRpbmdIZWlnaHQ7XG4gICAgICAgIHRoaXMuaGVhZGluZ0hlaWdodCA9IChfb3B0aW9uc19oZWFkaW5nSGVpZ2h0ID0gb3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLmhlYWRpbmdIZWlnaHQpICE9PSBudWxsICYmIF9vcHRpb25zX2hlYWRpbmdIZWlnaHQgIT09IHZvaWQgMCA/IF9vcHRpb25zX2hlYWRpbmdIZWlnaHQgOiB0aGlzLmhlYWRpbmdIZWlnaHQ7XG4gICAgICAgIHZhciBfb3B0aW9uc19lc3RpbWF0ZWRIZWFkaW5nSGVpZ2h0O1xuICAgICAgICB0aGlzLmVzdGltYXRlZEhlYWRpbmdIZWlnaHQgPSAoX29wdGlvbnNfZXN0aW1hdGVkSGVhZGluZ0hlaWdodCA9IG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5lc3RpbWF0ZWRIZWFkaW5nSGVpZ2h0KSAhPT0gbnVsbCAmJiBfb3B0aW9uc19lc3RpbWF0ZWRIZWFkaW5nSGVpZ2h0ICE9PSB2b2lkIDAgPyBfb3B0aW9uc19lc3RpbWF0ZWRIZWFkaW5nSGVpZ2h0IDogdGhpcy5lc3RpbWF0ZWRIZWFkaW5nSGVpZ2h0O1xuICAgICAgICB2YXIgX29wdGlvbnNfbG9hZGVySGVpZ2h0O1xuICAgICAgICB0aGlzLmxvYWRlckhlaWdodCA9IChfb3B0aW9uc19sb2FkZXJIZWlnaHQgPSBvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMubG9hZGVySGVpZ2h0KSAhPT0gbnVsbCAmJiBfb3B0aW9uc19sb2FkZXJIZWlnaHQgIT09IHZvaWQgMCA/IF9vcHRpb25zX2xvYWRlckhlaWdodCA6IHRoaXMubG9hZGVySGVpZ2h0O1xuICAgICAgICB2YXIgX29wdGlvbnNfZHJvcEluZGljYXRvclRoaWNrbmVzcztcbiAgICAgICAgdGhpcy5kcm9wSW5kaWNhdG9yVGhpY2tuZXNzID0gKF9vcHRpb25zX2Ryb3BJbmRpY2F0b3JUaGlja25lc3MgPSBvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMuZHJvcEluZGljYXRvclRoaWNrbmVzcykgIT09IG51bGwgJiYgX29wdGlvbnNfZHJvcEluZGljYXRvclRoaWNrbmVzcyAhPT0gdm9pZCAwID8gX29wdGlvbnNfZHJvcEluZGljYXRvclRoaWNrbmVzcyA6IHRoaXMuZHJvcEluZGljYXRvclRoaWNrbmVzcztcbiAgICAgICAgdmFyIF9vcHRpb25zX2dhcDtcbiAgICAgICAgdGhpcy5nYXAgPSAoX29wdGlvbnNfZ2FwID0gb3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLmdhcCkgIT09IG51bGwgJiYgX29wdGlvbnNfZ2FwICE9PSB2b2lkIDAgPyBfb3B0aW9uc19nYXAgOiB0aGlzLmdhcDtcbiAgICAgICAgdmFyIF9vcHRpb25zX3BhZGRpbmc7XG4gICAgICAgIHRoaXMucGFkZGluZyA9IChfb3B0aW9uc19wYWRkaW5nID0gb3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLnBhZGRpbmcpICE9PSBudWxsICYmIF9vcHRpb25zX3BhZGRpbmcgIT09IHZvaWQgMCA/IF9vcHRpb25zX3BhZGRpbmcgOiB0aGlzLnBhZGRpbmc7XG4gICAgICAgIHRoaXMucm9vdE5vZGVzID0gdGhpcy5idWlsZENvbGxlY3Rpb24oKTtcbiAgICAgICAgLy8gUmVtb3ZlIGRlbGV0ZWQgbGF5b3V0IG5vZGVzXG4gICAgICAgIGlmICh0aGlzLmxhc3RDb2xsZWN0aW9uICYmIGNvbGxlY3Rpb24gIT09IHRoaXMubGFzdENvbGxlY3Rpb24pIHtcbiAgICAgICAgICAgIGZvciAobGV0IGtleSBvZiB0aGlzLmxhc3RDb2xsZWN0aW9uLmdldEtleXMoKSlpZiAoIWNvbGxlY3Rpb24uZ2V0SXRlbShrZXkpKSB7XG4gICAgICAgICAgICAgICAgbGV0IGxheW91dE5vZGUgPSB0aGlzLmxheW91dE5vZGVzLmdldChrZXkpO1xuICAgICAgICAgICAgICAgIGlmIChsYXlvdXROb2RlKSB0aGlzLmxheW91dE5vZGVzLmRlbGV0ZShrZXkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHRoaXMubGFzdENvbGxlY3Rpb24gPSBjb2xsZWN0aW9uO1xuICAgICAgICB0aGlzLmludmFsaWRhdGVFdmVyeXRoaW5nID0gZmFsc2U7XG4gICAgICAgIHRoaXMudmFsaWRSZWN0ID0gdGhpcy5yZXF1ZXN0ZWRSZWN0LmNvcHkoKTtcbiAgICB9XG4gICAgYnVpbGRDb2xsZWN0aW9uKHkgPSB0aGlzLnBhZGRpbmcpIHtcbiAgICAgICAgbGV0IGNvbGxlY3Rpb24gPSB0aGlzLnZpcnR1YWxpemVyLmNvbGxlY3Rpb247XG4gICAgICAgIGxldCBza2lwcGVkID0gMDtcbiAgICAgICAgbGV0IG5vZGVzID0gW107XG4gICAgICAgIGZvciAobGV0IG5vZGUgb2YgY29sbGVjdGlvbil7XG4gICAgICAgICAgICB2YXIgX3RoaXNfcm93SGVpZ2h0LCBfcmVmO1xuICAgICAgICAgICAgbGV0IHJvd0hlaWdodCA9ICgoX3JlZiA9IChfdGhpc19yb3dIZWlnaHQgPSB0aGlzLnJvd0hlaWdodCkgIT09IG51bGwgJiYgX3RoaXNfcm93SGVpZ2h0ICE9PSB2b2lkIDAgPyBfdGhpc19yb3dIZWlnaHQgOiB0aGlzLmVzdGltYXRlZFJvd0hlaWdodCkgIT09IG51bGwgJiYgX3JlZiAhPT0gdm9pZCAwID8gX3JlZiA6ICQ2MWVmNjBmYzliMTA0MWY0JHZhciRERUZBVUxUX0hFSUdIVCkgKyB0aGlzLmdhcDtcbiAgICAgICAgICAgIC8vIFNraXAgcm93cyBiZWZvcmUgdGhlIHZhbGlkIHJlY3RhbmdsZSB1bmxlc3MgdGhleSBhcmUgYWxyZWFkeSBjYWNoZWQuXG4gICAgICAgICAgICBpZiAobm9kZS50eXBlID09PSAnaXRlbScgJiYgeSArIHJvd0hlaWdodCA8IHRoaXMucmVxdWVzdGVkUmVjdC55ICYmICF0aGlzLmlzVmFsaWQobm9kZSwgeSkpIHtcbiAgICAgICAgICAgICAgICB5ICs9IHJvd0hlaWdodDtcbiAgICAgICAgICAgICAgICBza2lwcGVkKys7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBsZXQgbGF5b3V0Tm9kZSA9IHRoaXMuYnVpbGRDaGlsZChub2RlLCB0aGlzLnBhZGRpbmcsIHksIG51bGwpO1xuICAgICAgICAgICAgeSA9IGxheW91dE5vZGUubGF5b3V0SW5mby5yZWN0Lm1heFkgKyB0aGlzLmdhcDtcbiAgICAgICAgICAgIG5vZGVzLnB1c2gobGF5b3V0Tm9kZSk7XG4gICAgICAgICAgICBpZiAobm9kZS50eXBlID09PSAnaXRlbScgJiYgeSA+IHRoaXMucmVxdWVzdGVkUmVjdC5tYXhZKSB7XG4gICAgICAgICAgICAgICAgeSArPSAoY29sbGVjdGlvbi5zaXplIC0gKG5vZGVzLmxlbmd0aCArIHNraXBwZWQpKSAqIHJvd0hlaWdodDtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB5IC09IHRoaXMuZ2FwO1xuICAgICAgICB5ICs9IHRoaXMucGFkZGluZztcbiAgICAgICAgdGhpcy5jb250ZW50U2l6ZSA9IG5ldyAoMCwgJGltZzI2JFNpemUpKHRoaXMudmlydHVhbGl6ZXIudmlzaWJsZVJlY3Qud2lkdGgsIHkpO1xuICAgICAgICByZXR1cm4gbm9kZXM7XG4gICAgfVxuICAgIGlzVmFsaWQobm9kZSwgeSkge1xuICAgICAgICBsZXQgY2FjaGVkID0gdGhpcy5sYXlvdXROb2Rlcy5nZXQobm9kZS5rZXkpO1xuICAgICAgICByZXR1cm4gIXRoaXMuaW52YWxpZGF0ZUV2ZXJ5dGhpbmcgJiYgY2FjaGVkICYmIGNhY2hlZC5ub2RlID09PSBub2RlICYmIHkgPT09IGNhY2hlZC5sYXlvdXRJbmZvLnJlY3QueSAmJiBjYWNoZWQubGF5b3V0SW5mby5yZWN0LmludGVyc2VjdHModGhpcy52YWxpZFJlY3QpICYmIGNhY2hlZC52YWxpZFJlY3QuY29udGFpbnNSZWN0KGNhY2hlZC5sYXlvdXRJbmZvLnJlY3QuaW50ZXJzZWN0aW9uKHRoaXMucmVxdWVzdGVkUmVjdCkpO1xuICAgIH1cbiAgICBidWlsZENoaWxkKG5vZGUsIHgsIHksIHBhcmVudEtleSkge1xuICAgICAgICBpZiAodGhpcy5pc1ZhbGlkKG5vZGUsIHkpKSByZXR1cm4gdGhpcy5sYXlvdXROb2Rlcy5nZXQobm9kZS5rZXkpO1xuICAgICAgICBsZXQgbGF5b3V0Tm9kZSA9IHRoaXMuYnVpbGROb2RlKG5vZGUsIHgsIHkpO1xuICAgICAgICBsYXlvdXROb2RlLmxheW91dEluZm8ucGFyZW50S2V5ID0gcGFyZW50S2V5ICE9PSBudWxsICYmIHBhcmVudEtleSAhPT0gdm9pZCAwID8gcGFyZW50S2V5IDogbnVsbDtcbiAgICAgICAgdGhpcy5sYXlvdXROb2Rlcy5zZXQobm9kZS5rZXksIGxheW91dE5vZGUpO1xuICAgICAgICByZXR1cm4gbGF5b3V0Tm9kZTtcbiAgICB9XG4gICAgYnVpbGROb2RlKG5vZGUsIHgsIHkpIHtcbiAgICAgICAgc3dpdGNoKG5vZGUudHlwZSl7XG4gICAgICAgICAgICBjYXNlICdzZWN0aW9uJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5idWlsZFNlY3Rpb24obm9kZSwgeCwgeSk7XG4gICAgICAgICAgICBjYXNlICdpdGVtJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5idWlsZEl0ZW0obm9kZSwgeCwgeSk7XG4gICAgICAgICAgICBjYXNlICdoZWFkZXInOlxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmJ1aWxkU2VjdGlvbkhlYWRlcihub2RlLCB4LCB5KTtcbiAgICAgICAgICAgIGNhc2UgJ2xvYWRlcic6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuYnVpbGRMb2FkZXIobm9kZSwgeCwgeSk7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignVW5zdXBwb3J0ZWQgbm9kZSB0eXBlOiAnICsgbm9kZS50eXBlKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBidWlsZExvYWRlcihub2RlLCB4LCB5KSB7XG4gICAgICAgIGxldCByZWN0ID0gbmV3ICgwLCAkaW1nMjYkUmVjdCkoeCwgeSwgdGhpcy5wYWRkaW5nLCAwKTtcbiAgICAgICAgbGV0IGxheW91dEluZm8gPSBuZXcgKDAsICRpbWcyNiRMYXlvdXRJbmZvKSgnbG9hZGVyJywgbm9kZS5rZXksIHJlY3QpO1xuICAgICAgICByZWN0LndpZHRoID0gdGhpcy52aXJ0dWFsaXplci5jb250ZW50U2l6ZS53aWR0aCAtIHRoaXMucGFkZGluZyAtIHg7XG4gICAgICAgIHJlY3QuaGVpZ2h0ID0gdGhpcy5sb2FkZXJIZWlnaHQgfHwgdGhpcy5yb3dIZWlnaHQgfHwgdGhpcy5lc3RpbWF0ZWRSb3dIZWlnaHQgfHwgJDYxZWY2MGZjOWIxMDQxZjQkdmFyJERFRkFVTFRfSEVJR0hUO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgbGF5b3V0SW5mbzogbGF5b3V0SW5mbyxcbiAgICAgICAgICAgIHZhbGlkUmVjdDogcmVjdC5pbnRlcnNlY3Rpb24odGhpcy5yZXF1ZXN0ZWRSZWN0KVxuICAgICAgICB9O1xuICAgIH1cbiAgICBidWlsZFNlY3Rpb24obm9kZSwgeCwgeSkge1xuICAgICAgICBsZXQgY29sbGVjdGlvbiA9IHRoaXMudmlydHVhbGl6ZXIuY29sbGVjdGlvbjtcbiAgICAgICAgbGV0IHdpZHRoID0gdGhpcy52aXJ0dWFsaXplci52aXNpYmxlUmVjdC53aWR0aCAtIHRoaXMucGFkZGluZztcbiAgICAgICAgbGV0IHJlY3QgPSBuZXcgKDAsICRpbWcyNiRSZWN0KSh4LCB5LCB3aWR0aCAtIHgsIDApO1xuICAgICAgICBsZXQgbGF5b3V0SW5mbyA9IG5ldyAoMCwgJGltZzI2JExheW91dEluZm8pKG5vZGUudHlwZSwgbm9kZS5rZXksIHJlY3QpO1xuICAgICAgICBsZXQgc3RhcnRZID0geTtcbiAgICAgICAgbGV0IHNraXBwZWQgPSAwO1xuICAgICAgICBsZXQgY2hpbGRyZW4gPSBbXTtcbiAgICAgICAgZm9yIChsZXQgY2hpbGQgb2YgKDAsICRpbWcyNiRnZXRDaGlsZE5vZGVzKShub2RlLCBjb2xsZWN0aW9uKSl7XG4gICAgICAgICAgICB2YXIgX3RoaXNfcm93SGVpZ2h0LCBfcmVmO1xuICAgICAgICAgICAgbGV0IHJvd0hlaWdodCA9ICgoX3JlZiA9IChfdGhpc19yb3dIZWlnaHQgPSB0aGlzLnJvd0hlaWdodCkgIT09IG51bGwgJiYgX3RoaXNfcm93SGVpZ2h0ICE9PSB2b2lkIDAgPyBfdGhpc19yb3dIZWlnaHQgOiB0aGlzLmVzdGltYXRlZFJvd0hlaWdodCkgIT09IG51bGwgJiYgX3JlZiAhPT0gdm9pZCAwID8gX3JlZiA6ICQ2MWVmNjBmYzliMTA0MWY0JHZhciRERUZBVUxUX0hFSUdIVCkgKyB0aGlzLmdhcDtcbiAgICAgICAgICAgIC8vIFNraXAgcm93cyBiZWZvcmUgdGhlIHZhbGlkIHJlY3RhbmdsZSB1bmxlc3MgdGhleSBhcmUgYWxyZWFkeSBjYWNoZWQuXG4gICAgICAgICAgICBpZiAoeSArIHJvd0hlaWdodCA8IHRoaXMucmVxdWVzdGVkUmVjdC55ICYmICF0aGlzLmlzVmFsaWQobm9kZSwgeSkpIHtcbiAgICAgICAgICAgICAgICB5ICs9IHJvd0hlaWdodDtcbiAgICAgICAgICAgICAgICBza2lwcGVkKys7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBsZXQgbGF5b3V0Tm9kZSA9IHRoaXMuYnVpbGRDaGlsZChjaGlsZCwgeCwgeSwgbGF5b3V0SW5mby5rZXkpO1xuICAgICAgICAgICAgeSA9IGxheW91dE5vZGUubGF5b3V0SW5mby5yZWN0Lm1heFkgKyB0aGlzLmdhcDtcbiAgICAgICAgICAgIGNoaWxkcmVuLnB1c2gobGF5b3V0Tm9kZSk7XG4gICAgICAgICAgICBpZiAoeSA+IHRoaXMucmVxdWVzdGVkUmVjdC5tYXhZKSB7XG4gICAgICAgICAgICAgICAgLy8gRXN0aW1hdGUgdGhlIHJlbWFpbmluZyBoZWlnaHQgZm9yIHJvd3MgdGhhdCB3ZSBkb24ndCBuZWVkIHRvIGxheW91dCByaWdodCBub3cuXG4gICAgICAgICAgICAgICAgeSArPSAoW1xuICAgICAgICAgICAgICAgICAgICAuLi4oMCwgJGltZzI2JGdldENoaWxkTm9kZXMpKG5vZGUsIGNvbGxlY3Rpb24pXG4gICAgICAgICAgICAgICAgXS5sZW5ndGggLSAoY2hpbGRyZW4ubGVuZ3RoICsgc2tpcHBlZCkpICogcm93SGVpZ2h0O1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHkgLT0gdGhpcy5nYXA7XG4gICAgICAgIHJlY3QuaGVpZ2h0ID0geSAtIHN0YXJ0WTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGxheW91dEluZm86IGxheW91dEluZm8sXG4gICAgICAgICAgICBjaGlsZHJlbjogY2hpbGRyZW4sXG4gICAgICAgICAgICB2YWxpZFJlY3Q6IGxheW91dEluZm8ucmVjdC5pbnRlcnNlY3Rpb24odGhpcy5yZXF1ZXN0ZWRSZWN0KSxcbiAgICAgICAgICAgIG5vZGU6IG5vZGVcbiAgICAgICAgfTtcbiAgICB9XG4gICAgYnVpbGRTZWN0aW9uSGVhZGVyKG5vZGUsIHgsIHkpIHtcbiAgICAgICAgbGV0IHdpZHRoID0gdGhpcy52aXJ0dWFsaXplci52aXNpYmxlUmVjdC53aWR0aCAtIHRoaXMucGFkZGluZztcbiAgICAgICAgbGV0IHJlY3RIZWlnaHQgPSB0aGlzLmhlYWRpbmdIZWlnaHQ7XG4gICAgICAgIGxldCBpc0VzdGltYXRlZCA9IGZhbHNlO1xuICAgICAgICAvLyBJZiBubyBleHBsaWNpdCBoZWlnaHQgaXMgYXZhaWxhYmxlLCB1c2UgYW4gZXN0aW1hdGVkIGhlaWdodC5cbiAgICAgICAgaWYgKHJlY3RIZWlnaHQgPT0gbnVsbCkge1xuICAgICAgICAgICAgLy8gSWYgYSBwcmV2aW91cyB2ZXJzaW9uIG9mIHRoaXMgbGF5b3V0IGluZm8gZXhpc3RzLCByZXVzZSBpdHMgaGVpZ2h0LlxuICAgICAgICAgICAgLy8gTWFyayBhcyBlc3RpbWF0ZWQgaWYgdGhlIHNpemUgb2YgdGhlIG92ZXJhbGwgdmlydHVhbGl6ZXIgY2hhbmdlZCxcbiAgICAgICAgICAgIC8vIG9yIHRoZSBjb250ZW50IG9mIHRoZSBpdGVtIGNoYW5nZWQuXG4gICAgICAgICAgICBsZXQgcHJldmlvdXNMYXlvdXROb2RlID0gdGhpcy5sYXlvdXROb2Rlcy5nZXQobm9kZS5rZXkpO1xuICAgICAgICAgICAgbGV0IHByZXZpb3VzTGF5b3V0SW5mbyA9IHByZXZpb3VzTGF5b3V0Tm9kZSA9PT0gbnVsbCB8fCBwcmV2aW91c0xheW91dE5vZGUgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHByZXZpb3VzTGF5b3V0Tm9kZS5sYXlvdXRJbmZvO1xuICAgICAgICAgICAgaWYgKHByZXZpb3VzTGF5b3V0SW5mbykge1xuICAgICAgICAgICAgICAgIGxldCBjdXJOb2RlID0gdGhpcy52aXJ0dWFsaXplci5jb2xsZWN0aW9uLmdldEl0ZW0obm9kZS5rZXkpO1xuICAgICAgICAgICAgICAgIGxldCBsYXN0Tm9kZSA9IHRoaXMubGFzdENvbGxlY3Rpb24gPyB0aGlzLmxhc3RDb2xsZWN0aW9uLmdldEl0ZW0obm9kZS5rZXkpIDogbnVsbDtcbiAgICAgICAgICAgICAgICByZWN0SGVpZ2h0ID0gcHJldmlvdXNMYXlvdXRJbmZvLnJlY3QuaGVpZ2h0O1xuICAgICAgICAgICAgICAgIGlzRXN0aW1hdGVkID0gd2lkdGggIT09IHByZXZpb3VzTGF5b3V0SW5mby5yZWN0LndpZHRoIHx8IGN1ck5vZGUgIT09IGxhc3ROb2RlIHx8IHByZXZpb3VzTGF5b3V0SW5mby5lc3RpbWF0ZWRTaXplO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZWN0SGVpZ2h0ID0gbm9kZS5yZW5kZXJlZCA/IHRoaXMuZXN0aW1hdGVkSGVhZGluZ0hlaWdodCA6IDA7XG4gICAgICAgICAgICAgICAgaXNFc3RpbWF0ZWQgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChyZWN0SGVpZ2h0ID09IG51bGwpIHJlY3RIZWlnaHQgPSAkNjFlZjYwZmM5YjEwNDFmNCR2YXIkREVGQVVMVF9IRUlHSFQ7XG4gICAgICAgIGxldCBoZWFkZXJSZWN0ID0gbmV3ICgwLCAkaW1nMjYkUmVjdCkoeCwgeSwgd2lkdGggLSB4LCByZWN0SGVpZ2h0KTtcbiAgICAgICAgbGV0IGhlYWRlciA9IG5ldyAoMCwgJGltZzI2JExheW91dEluZm8pKCdoZWFkZXInLCBub2RlLmtleSwgaGVhZGVyUmVjdCk7XG4gICAgICAgIGhlYWRlci5lc3RpbWF0ZWRTaXplID0gaXNFc3RpbWF0ZWQ7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBsYXlvdXRJbmZvOiBoZWFkZXIsXG4gICAgICAgICAgICBjaGlsZHJlbjogW10sXG4gICAgICAgICAgICB2YWxpZFJlY3Q6IGhlYWRlci5yZWN0LmludGVyc2VjdGlvbih0aGlzLnJlcXVlc3RlZFJlY3QpLFxuICAgICAgICAgICAgbm9kZTogbm9kZVxuICAgICAgICB9O1xuICAgIH1cbiAgICBidWlsZEl0ZW0obm9kZSwgeCwgeSkge1xuICAgICAgICBsZXQgd2lkdGggPSB0aGlzLnZpcnR1YWxpemVyLnZpc2libGVSZWN0LndpZHRoIC0gdGhpcy5wYWRkaW5nIC0geDtcbiAgICAgICAgbGV0IHJlY3RIZWlnaHQgPSB0aGlzLnJvd0hlaWdodDtcbiAgICAgICAgbGV0IGlzRXN0aW1hdGVkID0gZmFsc2U7XG4gICAgICAgIC8vIElmIG5vIGV4cGxpY2l0IGhlaWdodCBpcyBhdmFpbGFibGUsIHVzZSBhbiBlc3RpbWF0ZWQgaGVpZ2h0LlxuICAgICAgICBpZiAocmVjdEhlaWdodCA9PSBudWxsKSB7XG4gICAgICAgICAgICAvLyBJZiBhIHByZXZpb3VzIHZlcnNpb24gb2YgdGhpcyBsYXlvdXQgaW5mbyBleGlzdHMsIHJldXNlIGl0cyBoZWlnaHQuXG4gICAgICAgICAgICAvLyBNYXJrIGFzIGVzdGltYXRlZCBpZiB0aGUgc2l6ZSBvZiB0aGUgb3ZlcmFsbCB2aXJ0dWFsaXplciBjaGFuZ2VkLFxuICAgICAgICAgICAgLy8gb3IgdGhlIGNvbnRlbnQgb2YgdGhlIGl0ZW0gY2hhbmdlZC5cbiAgICAgICAgICAgIGxldCBwcmV2aW91c0xheW91dE5vZGUgPSB0aGlzLmxheW91dE5vZGVzLmdldChub2RlLmtleSk7XG4gICAgICAgICAgICBpZiAocHJldmlvdXNMYXlvdXROb2RlKSB7XG4gICAgICAgICAgICAgICAgcmVjdEhlaWdodCA9IHByZXZpb3VzTGF5b3V0Tm9kZS5sYXlvdXRJbmZvLnJlY3QuaGVpZ2h0O1xuICAgICAgICAgICAgICAgIGlzRXN0aW1hdGVkID0gd2lkdGggIT09IHByZXZpb3VzTGF5b3V0Tm9kZS5sYXlvdXRJbmZvLnJlY3Qud2lkdGggfHwgbm9kZSAhPT0gcHJldmlvdXNMYXlvdXROb2RlLm5vZGUgfHwgcHJldmlvdXNMYXlvdXROb2RlLmxheW91dEluZm8uZXN0aW1hdGVkU2l6ZTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmVjdEhlaWdodCA9IHRoaXMuZXN0aW1hdGVkUm93SGVpZ2h0O1xuICAgICAgICAgICAgICAgIGlzRXN0aW1hdGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAocmVjdEhlaWdodCA9PSBudWxsKSByZWN0SGVpZ2h0ID0gJDYxZWY2MGZjOWIxMDQxZjQkdmFyJERFRkFVTFRfSEVJR0hUO1xuICAgICAgICBsZXQgcmVjdCA9IG5ldyAoMCwgJGltZzI2JFJlY3QpKHgsIHksIHdpZHRoLCByZWN0SGVpZ2h0KTtcbiAgICAgICAgbGV0IGxheW91dEluZm8gPSBuZXcgKDAsICRpbWcyNiRMYXlvdXRJbmZvKShub2RlLnR5cGUsIG5vZGUua2V5LCByZWN0KTtcbiAgICAgICAgbGF5b3V0SW5mby5lc3RpbWF0ZWRTaXplID0gaXNFc3RpbWF0ZWQ7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBsYXlvdXRJbmZvOiBsYXlvdXRJbmZvLFxuICAgICAgICAgICAgY2hpbGRyZW46IFtdLFxuICAgICAgICAgICAgdmFsaWRSZWN0OiBsYXlvdXRJbmZvLnJlY3QsXG4gICAgICAgICAgICBub2RlOiBub2RlXG4gICAgICAgIH07XG4gICAgfVxuICAgIHVwZGF0ZUl0ZW1TaXplKGtleSwgc2l6ZSkge1xuICAgICAgICBsZXQgbGF5b3V0Tm9kZSA9IHRoaXMubGF5b3V0Tm9kZXMuZ2V0KGtleSk7XG4gICAgICAgIC8vIElmIG5vIGxheW91dEluZm8sIGl0ZW0gaGFzIGJlZW4gZGVsZXRlZC9yZW1vdmVkLlxuICAgICAgICBpZiAoIWxheW91dE5vZGUpIHJldHVybiBmYWxzZTtcbiAgICAgICAgbGV0IGNvbGxlY3Rpb24gPSB0aGlzLnZpcnR1YWxpemVyLmNvbGxlY3Rpb247XG4gICAgICAgIGxldCBsYXlvdXRJbmZvID0gbGF5b3V0Tm9kZS5sYXlvdXRJbmZvO1xuICAgICAgICBsYXlvdXRJbmZvLmVzdGltYXRlZFNpemUgPSBmYWxzZTtcbiAgICAgICAgaWYgKGxheW91dEluZm8ucmVjdC5oZWlnaHQgIT09IHNpemUuaGVpZ2h0KSB7XG4gICAgICAgICAgICAvLyBDb3B5IGxheW91dCBpbmZvIHJhdGhlciB0aGFuIG11dGF0aW5nIHNvIHRoYXQgbGF0ZXIgY2FjaGVzIGFyZSBpbnZhbGlkYXRlZC5cbiAgICAgICAgICAgIGxldCBuZXdMYXlvdXRJbmZvID0gbGF5b3V0SW5mby5jb3B5KCk7XG4gICAgICAgICAgICBuZXdMYXlvdXRJbmZvLnJlY3QuaGVpZ2h0ID0gc2l6ZS5oZWlnaHQ7XG4gICAgICAgICAgICBsYXlvdXROb2RlLmxheW91dEluZm8gPSBuZXdMYXlvdXRJbmZvO1xuICAgICAgICAgICAgLy8gSXRlbXMgYWZ0ZXIgdGhpcyBsYXlvdXRJbmZvIHdpbGwgbmVlZCB0byBiZSByZXBvc2l0aW9uZWQgdG8gYWNjb3VudCBmb3IgdGhlIG5ldyBoZWlnaHQuXG4gICAgICAgICAgICAvLyBBZGp1c3QgdGhlIHZhbGlkUmVjdCBzbyB0aGF0IG9ubHkgaXRlbXMgYWJvdmUgcmVtYWluIHZhbGlkLlxuICAgICAgICAgICAgdGhpcy52YWxpZFJlY3QuaGVpZ2h0ID0gTWF0aC5taW4odGhpcy52YWxpZFJlY3QuaGVpZ2h0LCBsYXlvdXRJbmZvLnJlY3QueSAtIHRoaXMudmFsaWRSZWN0LnkpO1xuICAgICAgICAgICAgLy8gVGhlIHJlcXVlc3RlZFJlY3QgYWxzbyBuZWVkcyB0byBiZSBhZGp1c3RlZCB0byBhY2NvdW50IGZvciB0aGUgaGVpZ2h0IGRpZmZlcmVuY2UuXG4gICAgICAgICAgICB0aGlzLnJlcXVlc3RlZFJlY3QuaGVpZ2h0ICs9IG5ld0xheW91dEluZm8ucmVjdC5oZWlnaHQgLSBsYXlvdXRJbmZvLnJlY3QuaGVpZ2h0O1xuICAgICAgICAgICAgLy8gSW52YWxpZGF0ZSBsYXlvdXQgZm9yIHRoaXMgbGF5b3V0IG5vZGUgYW5kIGFsbCBwYXJlbnRzXG4gICAgICAgICAgICB0aGlzLnVwZGF0ZUxheW91dE5vZGUoa2V5LCBsYXlvdXRJbmZvLCBuZXdMYXlvdXRJbmZvKTtcbiAgICAgICAgICAgIGxldCBub2RlID0gbGF5b3V0SW5mby5wYXJlbnRLZXkgIT0gbnVsbCA/IGNvbGxlY3Rpb24uZ2V0SXRlbShsYXlvdXRJbmZvLnBhcmVudEtleSkgOiBudWxsO1xuICAgICAgICAgICAgd2hpbGUobm9kZSl7XG4gICAgICAgICAgICAgICAgdGhpcy51cGRhdGVMYXlvdXROb2RlKG5vZGUua2V5LCBsYXlvdXRJbmZvLCBuZXdMYXlvdXRJbmZvKTtcbiAgICAgICAgICAgICAgICBub2RlID0gbm9kZS5wYXJlbnRLZXkgIT0gbnVsbCA/IGNvbGxlY3Rpb24uZ2V0SXRlbShub2RlLnBhcmVudEtleSkgOiBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICB1cGRhdGVMYXlvdXROb2RlKGtleSwgb2xkTGF5b3V0SW5mbywgbmV3TGF5b3V0SW5mbykge1xuICAgICAgICBsZXQgbiA9IHRoaXMubGF5b3V0Tm9kZXMuZ2V0KGtleSk7XG4gICAgICAgIGlmIChuKSB7XG4gICAgICAgICAgICAvLyBJbnZhbGlkYXRlIGJ5IGludGVyc2VjdGluZyB0aGUgdmFsaWRSZWN0IG9mIHRoaXMgbm9kZSB3aXRoIHRoZSBvdmVyYWxsIHZhbGlkUmVjdC5cbiAgICAgICAgICAgIG4udmFsaWRSZWN0ID0gbi52YWxpZFJlY3QuaW50ZXJzZWN0aW9uKHRoaXMudmFsaWRSZWN0KTtcbiAgICAgICAgICAgIC8vIFJlcGxhY2UgbGF5b3V0IGluZm8gaW4gTGF5b3V0Tm9kZVxuICAgICAgICAgICAgaWYgKG4ubGF5b3V0SW5mbyA9PT0gb2xkTGF5b3V0SW5mbykgbi5sYXlvdXRJbmZvID0gbmV3TGF5b3V0SW5mbztcbiAgICAgICAgfVxuICAgIH1cbiAgICBnZXRDb250ZW50U2l6ZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY29udGVudFNpemU7XG4gICAgfVxuICAgIGdldERyb3BUYXJnZXRGcm9tUG9pbnQoeCwgeSwgaXNWYWxpZERyb3BUYXJnZXQpIHtcbiAgICAgICAgeCArPSB0aGlzLnZpcnR1YWxpemVyLnZpc2libGVSZWN0Lng7XG4gICAgICAgIHkgKz0gdGhpcy52aXJ0dWFsaXplci52aXNpYmxlUmVjdC55O1xuICAgICAgICAvLyBGaW5kIHRoZSBjbG9zZXN0IGl0ZW0gd2l0aGluIG9uIGVpdGhlciBzaWRlIG9mIHRoZSBwb2ludCB1c2luZyB0aGUgZ2FwIHdpZHRoLlxuICAgICAgICBsZXQgc2VhcmNoUmVjdCA9IG5ldyAoMCwgJGltZzI2JFJlY3QpKHgsIE1hdGgubWF4KDAsIHkgLSB0aGlzLmdhcCksIDEsIHRoaXMuZ2FwICogMik7XG4gICAgICAgIGxldCBjYW5kaWRhdGVzID0gdGhpcy5nZXRWaXNpYmxlTGF5b3V0SW5mb3Moc2VhcmNoUmVjdCk7XG4gICAgICAgIGxldCBrZXkgPSBudWxsO1xuICAgICAgICBsZXQgbWluRGlzdGFuY2UgPSBJbmZpbml0eTtcbiAgICAgICAgZm9yIChsZXQgY2FuZGlkYXRlIG9mIGNhbmRpZGF0ZXMpe1xuICAgICAgICAgICAgLy8gSWdub3JlIGl0ZW1zIG91dHNpZGUgdGhlIHNlYXJjaCByZWN0LCBlLmcuIHBlcnNpc3RlZCBrZXlzLlxuICAgICAgICAgICAgaWYgKCFjYW5kaWRhdGUucmVjdC5pbnRlcnNlY3RzKHNlYXJjaFJlY3QpKSBjb250aW51ZTtcbiAgICAgICAgICAgIGxldCB5RGlzdCA9IE1hdGguYWJzKGNhbmRpZGF0ZS5yZWN0LnkgLSB5KTtcbiAgICAgICAgICAgIGxldCBtYXhZRGlzdCA9IE1hdGguYWJzKGNhbmRpZGF0ZS5yZWN0Lm1heFkgLSB5KTtcbiAgICAgICAgICAgIGxldCBkaXN0ID0gTWF0aC5taW4oeURpc3QsIG1heFlEaXN0KTtcbiAgICAgICAgICAgIGlmIChkaXN0IDwgbWluRGlzdGFuY2UpIHtcbiAgICAgICAgICAgICAgICBtaW5EaXN0YW5jZSA9IGRpc3Q7XG4gICAgICAgICAgICAgICAga2V5ID0gY2FuZGlkYXRlLmtleTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoa2V5ID09IG51bGwgfHwgdGhpcy52aXJ0dWFsaXplci5jb2xsZWN0aW9uLnNpemUgPT09IDApIHJldHVybiB7XG4gICAgICAgICAgICB0eXBlOiAncm9vdCdcbiAgICAgICAgfTtcbiAgICAgICAgbGV0IGxheW91dEluZm8gPSB0aGlzLmdldExheW91dEluZm8oa2V5KTtcbiAgICAgICAgaWYgKCFsYXlvdXRJbmZvKSByZXR1cm4gbnVsbDtcbiAgICAgICAgbGV0IHJlY3QgPSBsYXlvdXRJbmZvLnJlY3Q7XG4gICAgICAgIGxldCB0YXJnZXQgPSB7XG4gICAgICAgICAgICB0eXBlOiAnaXRlbScsXG4gICAgICAgICAgICBrZXk6IGxheW91dEluZm8ua2V5LFxuICAgICAgICAgICAgZHJvcFBvc2l0aW9uOiAnb24nXG4gICAgICAgIH07XG4gICAgICAgIC8vIElmIGRyb3BwaW5nIG9uIHRoZSBpdGVtIGlzbid0IGFjY2VwdGVkLCB0cnkgdGhlIHRhcmdldCBiZWZvcmUgb3IgYWZ0ZXIgZGVwZW5kaW5nIG9uIHRoZSB5IHBvc2l0aW9uLlxuICAgICAgICAvLyBPdGhlcndpc2UsIGlmIGRyb3BwaW5nIG9uIHRoZSBpdGVtIGlzIGFjY2VwdGVkLCBzdGlsbCB0cnkgdGhlIGJlZm9yZS9hZnRlciBwb3NpdGlvbnMgaWYgd2l0aGluIDEwcHhcbiAgICAgICAgLy8gb2YgdGhlIHRvcCBvciBib3R0b20gb2YgdGhlIGl0ZW0uXG4gICAgICAgIGlmICghaXNWYWxpZERyb3BUYXJnZXQodGFyZ2V0KSkge1xuICAgICAgICAgICAgaWYgKHkgPD0gcmVjdC55ICsgcmVjdC5oZWlnaHQgLyAyICYmIGlzVmFsaWREcm9wVGFyZ2V0KHtcbiAgICAgICAgICAgICAgICAuLi50YXJnZXQsXG4gICAgICAgICAgICAgICAgZHJvcFBvc2l0aW9uOiAnYmVmb3JlJ1xuICAgICAgICAgICAgfSkpIHRhcmdldC5kcm9wUG9zaXRpb24gPSAnYmVmb3JlJztcbiAgICAgICAgICAgIGVsc2UgaWYgKGlzVmFsaWREcm9wVGFyZ2V0KHtcbiAgICAgICAgICAgICAgICAuLi50YXJnZXQsXG4gICAgICAgICAgICAgICAgZHJvcFBvc2l0aW9uOiAnYWZ0ZXInXG4gICAgICAgICAgICB9KSkgdGFyZ2V0LmRyb3BQb3NpdGlvbiA9ICdhZnRlcic7XG4gICAgICAgIH0gZWxzZSBpZiAoeSA8PSByZWN0LnkgKyAxMCAmJiBpc1ZhbGlkRHJvcFRhcmdldCh7XG4gICAgICAgICAgICAuLi50YXJnZXQsXG4gICAgICAgICAgICBkcm9wUG9zaXRpb246ICdiZWZvcmUnXG4gICAgICAgIH0pKSB0YXJnZXQuZHJvcFBvc2l0aW9uID0gJ2JlZm9yZSc7XG4gICAgICAgIGVsc2UgaWYgKHkgPj0gcmVjdC5tYXhZIC0gMTAgJiYgaXNWYWxpZERyb3BUYXJnZXQoe1xuICAgICAgICAgICAgLi4udGFyZ2V0LFxuICAgICAgICAgICAgZHJvcFBvc2l0aW9uOiAnYWZ0ZXInXG4gICAgICAgIH0pKSB0YXJnZXQuZHJvcFBvc2l0aW9uID0gJ2FmdGVyJztcbiAgICAgICAgcmV0dXJuIHRhcmdldDtcbiAgICB9XG4gICAgZ2V0RHJvcFRhcmdldExheW91dEluZm8odGFyZ2V0KSB7XG4gICAgICAgIGxldCBsYXlvdXRJbmZvID0gdGhpcy5nZXRMYXlvdXRJbmZvKHRhcmdldC5rZXkpO1xuICAgICAgICBsZXQgcmVjdDtcbiAgICAgICAgaWYgKHRhcmdldC5kcm9wUG9zaXRpb24gPT09ICdiZWZvcmUnKSByZWN0ID0gbmV3ICgwLCAkaW1nMjYkUmVjdCkobGF5b3V0SW5mby5yZWN0LngsIGxheW91dEluZm8ucmVjdC55IC0gdGhpcy5kcm9wSW5kaWNhdG9yVGhpY2tuZXNzIC8gMiwgbGF5b3V0SW5mby5yZWN0LndpZHRoLCB0aGlzLmRyb3BJbmRpY2F0b3JUaGlja25lc3MpO1xuICAgICAgICBlbHNlIGlmICh0YXJnZXQuZHJvcFBvc2l0aW9uID09PSAnYWZ0ZXInKSByZWN0ID0gbmV3ICgwLCAkaW1nMjYkUmVjdCkobGF5b3V0SW5mby5yZWN0LngsIGxheW91dEluZm8ucmVjdC5tYXhZIC0gdGhpcy5kcm9wSW5kaWNhdG9yVGhpY2tuZXNzIC8gMiwgbGF5b3V0SW5mby5yZWN0LndpZHRoLCB0aGlzLmRyb3BJbmRpY2F0b3JUaGlja25lc3MpO1xuICAgICAgICBlbHNlIHJlY3QgPSBsYXlvdXRJbmZvLnJlY3Q7XG4gICAgICAgIHJldHVybiBuZXcgKDAsICRpbWcyNiRMYXlvdXRJbmZvKSgnZHJvcEluZGljYXRvcicsIHRhcmdldC5rZXkgKyAnOicgKyB0YXJnZXQuZHJvcFBvc2l0aW9uLCByZWN0KTtcbiAgICB9XG4gICAgLyoqXG4gICAqIENyZWF0ZXMgYSBuZXcgTGlzdExheW91dCB3aXRoIG9wdGlvbnMuIFNlZSB0aGUgbGlzdCBvZiBwcm9wZXJ0aWVzIGJlbG93IGZvciBhIGRlc2NyaXB0aW9uXG4gICAqIG9mIHRoZSBvcHRpb25zIHRoYXQgY2FuIGJlIHByb3ZpZGVkLlxuICAgKi8gY29uc3RydWN0b3Iob3B0aW9ucyA9IHt9KXtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdmFyIF9vcHRpb25zX3Jvd0hlaWdodDtcbiAgICAgICAgdGhpcy5yb3dIZWlnaHQgPSAoX29wdGlvbnNfcm93SGVpZ2h0ID0gb3B0aW9ucy5yb3dIZWlnaHQpICE9PSBudWxsICYmIF9vcHRpb25zX3Jvd0hlaWdodCAhPT0gdm9pZCAwID8gX29wdGlvbnNfcm93SGVpZ2h0IDogbnVsbDtcbiAgICAgICAgdmFyIF9vcHRpb25zX2VzdGltYXRlZFJvd0hlaWdodDtcbiAgICAgICAgdGhpcy5lc3RpbWF0ZWRSb3dIZWlnaHQgPSAoX29wdGlvbnNfZXN0aW1hdGVkUm93SGVpZ2h0ID0gb3B0aW9ucy5lc3RpbWF0ZWRSb3dIZWlnaHQpICE9PSBudWxsICYmIF9vcHRpb25zX2VzdGltYXRlZFJvd0hlaWdodCAhPT0gdm9pZCAwID8gX29wdGlvbnNfZXN0aW1hdGVkUm93SGVpZ2h0IDogbnVsbDtcbiAgICAgICAgdmFyIF9vcHRpb25zX2hlYWRpbmdIZWlnaHQ7XG4gICAgICAgIHRoaXMuaGVhZGluZ0hlaWdodCA9IChfb3B0aW9uc19oZWFkaW5nSGVpZ2h0ID0gb3B0aW9ucy5oZWFkaW5nSGVpZ2h0KSAhPT0gbnVsbCAmJiBfb3B0aW9uc19oZWFkaW5nSGVpZ2h0ICE9PSB2b2lkIDAgPyBfb3B0aW9uc19oZWFkaW5nSGVpZ2h0IDogbnVsbDtcbiAgICAgICAgdmFyIF9vcHRpb25zX2VzdGltYXRlZEhlYWRpbmdIZWlnaHQ7XG4gICAgICAgIHRoaXMuZXN0aW1hdGVkSGVhZGluZ0hlaWdodCA9IChfb3B0aW9uc19lc3RpbWF0ZWRIZWFkaW5nSGVpZ2h0ID0gb3B0aW9ucy5lc3RpbWF0ZWRIZWFkaW5nSGVpZ2h0KSAhPT0gbnVsbCAmJiBfb3B0aW9uc19lc3RpbWF0ZWRIZWFkaW5nSGVpZ2h0ICE9PSB2b2lkIDAgPyBfb3B0aW9uc19lc3RpbWF0ZWRIZWFkaW5nSGVpZ2h0IDogbnVsbDtcbiAgICAgICAgdmFyIF9vcHRpb25zX2xvYWRlckhlaWdodDtcbiAgICAgICAgdGhpcy5sb2FkZXJIZWlnaHQgPSAoX29wdGlvbnNfbG9hZGVySGVpZ2h0ID0gb3B0aW9ucy5sb2FkZXJIZWlnaHQpICE9PSBudWxsICYmIF9vcHRpb25zX2xvYWRlckhlaWdodCAhPT0gdm9pZCAwID8gX29wdGlvbnNfbG9hZGVySGVpZ2h0IDogbnVsbDtcbiAgICAgICAgdGhpcy5kcm9wSW5kaWNhdG9yVGhpY2tuZXNzID0gb3B0aW9ucy5kcm9wSW5kaWNhdG9yVGhpY2tuZXNzIHx8IDI7XG4gICAgICAgIHRoaXMuZ2FwID0gb3B0aW9ucy5nYXAgfHwgMDtcbiAgICAgICAgdGhpcy5wYWRkaW5nID0gb3B0aW9ucy5wYWRkaW5nIHx8IDA7XG4gICAgICAgIHRoaXMubGF5b3V0Tm9kZXMgPSBuZXcgTWFwKCk7XG4gICAgICAgIHRoaXMucm9vdE5vZGVzID0gW107XG4gICAgICAgIHRoaXMubGFzdENvbGxlY3Rpb24gPSBudWxsO1xuICAgICAgICB0aGlzLmludmFsaWRhdGVFdmVyeXRoaW5nID0gZmFsc2U7XG4gICAgICAgIHRoaXMudmFsaWRSZWN0ID0gbmV3ICgwLCAkaW1nMjYkUmVjdCkoKTtcbiAgICAgICAgdGhpcy5yZXF1ZXN0ZWRSZWN0ID0gbmV3ICgwLCAkaW1nMjYkUmVjdCkoKTtcbiAgICAgICAgdGhpcy5jb250ZW50U2l6ZSA9IG5ldyAoMCwgJGltZzI2JFNpemUpKCk7XG4gICAgfVxufVxuXG5cbmV4cG9ydCB7JDYxZWY2MGZjOWIxMDQxZjQkZXhwb3J0JGNhY2JiMzkyNDE1NWQ2OGUgYXMgTGlzdExheW91dH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1MaXN0TGF5b3V0Lm1vZHVsZS5qcy5tYXBcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../../../../node_modules/.pnpm/@react-stately+layout@4.2.1_react-dom@19.0.0_react@19.0.0__react@19.0.0/node_modules/@react-stately/layout/dist/ListLayout.mjs\n");

/***/ }),

/***/ "../../../../node_modules/.pnpm/@react-stately+layout@4.2.1_react-dom@19.0.0_react@19.0.0__react@19.0.0/node_modules/@react-stately/layout/dist/TableLayout.mjs":
/*!**********************************************************************************************************************************************************************!*\
  !*** ../../../../node_modules/.pnpm/@react-stately+layout@4.2.1_react-dom@19.0.0_react@19.0.0__react@19.0.0/node_modules/@react-stately/layout/dist/TableLayout.mjs ***!
  \**********************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   TableLayout: () => (/* binding */ $a152112e902709bf$export$62444c3c724b1b20)\n/* harmony export */ });\n/* harmony import */ var _ListLayout_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ListLayout.mjs */ \"../../../../node_modules/.pnpm/@react-stately+layout@4.2.1_react-dom@19.0.0_react@19.0.0__react@19.0.0/node_modules/@react-stately/layout/dist/ListLayout.mjs\");\n/* harmony import */ var _react_stately_collections__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @react-stately/collections */ \"../../../../node_modules/.pnpm/@react-stately+collections@3.12.2_react@19.0.0/node_modules/@react-stately/collections/dist/import.mjs\");\n/* harmony import */ var _react_stately_virtualizer__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @react-stately/virtualizer */ \"../../../../node_modules/.pnpm/@react-stately+virtualizer@4.3.1_react-dom@19.0.0_react@19.0.0__react@19.0.0/node_modules/@react-stately/virtualizer/dist/import.mjs\");\n/* harmony import */ var _react_stately_table__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @react-stately/table */ \"../../../../node_modules/.pnpm/@react-stately+table@3.14.0_react@19.0.0/node_modules/@react-stately/table/dist/import.mjs\");\n\n\n\n\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */ \n\n\n\nconst $a152112e902709bf$var$DEFAULT_ROW_HEIGHT = 48;\nclass $a152112e902709bf$export$62444c3c724b1b20 extends (0, _ListLayout_mjs__WEBPACK_IMPORTED_MODULE_0__.ListLayout) {\n    // Backward compatibility for subclassing.\n    get collection() {\n        return this.virtualizer.collection;\n    }\n    columnsChanged(newCollection, oldCollection) {\n        return !oldCollection || newCollection.columns !== oldCollection.columns && newCollection.columns.length !== oldCollection.columns.length || newCollection.columns.some((c, i)=>c.key !== oldCollection.columns[i].key || c.props.width !== oldCollection.columns[i].props.width || c.props.minWidth !== oldCollection.columns[i].props.minWidth || c.props.maxWidth !== oldCollection.columns[i].props.maxWidth);\n    }\n    shouldInvalidateLayoutOptions(newOptions, oldOptions) {\n        return newOptions.columnWidths !== oldOptions.columnWidths || super.shouldInvalidateLayoutOptions(newOptions, oldOptions);\n    }\n    update(invalidationContext) {\n        var _invalidationContext_layoutOptions;\n        let newCollection = this.virtualizer.collection;\n        // If columnWidths were provided via layoutOptions, update those.\n        // Otherwise, calculate column widths ourselves.\n        if ((_invalidationContext_layoutOptions = invalidationContext.layoutOptions) === null || _invalidationContext_layoutOptions === void 0 ? void 0 : _invalidationContext_layoutOptions.columnWidths) {\n            if (invalidationContext.layoutOptions.columnWidths !== this.columnWidths) {\n                this.columnWidths = invalidationContext.layoutOptions.columnWidths;\n                invalidationContext.sizeChanged = true;\n            }\n        } else if (invalidationContext.sizeChanged || this.columnsChanged(newCollection, this.lastCollection)) {\n            let columnLayout = new (0, _react_stately_table__WEBPACK_IMPORTED_MODULE_1__.TableColumnLayout)({});\n            this.columnWidths = columnLayout.buildColumnWidths(this.virtualizer.visibleRect.width - this.padding * 2, newCollection, new Map());\n            invalidationContext.sizeChanged = true;\n        }\n        super.update(invalidationContext);\n    }\n    buildCollection() {\n        this.stickyColumnIndices = [];\n        let collection = this.virtualizer.collection;\n        for (let column of collection.columns)// The selection cell and any other sticky columns always need to be visible.\n        // In addition, row headers need to be in the DOM for accessibility labeling.\n        if (this.isStickyColumn(column) || collection.rowHeaderColumnKeys.has(column.key)) this.stickyColumnIndices.push(column.index);\n        let header = this.buildTableHeader();\n        this.layoutNodes.set(header.layoutInfo.key, header);\n        let body = this.buildBody(header.layoutInfo.rect.maxY + this.gap);\n        this.lastPersistedKeys = null;\n        body.layoutInfo.rect.width = Math.max(header.layoutInfo.rect.width, body.layoutInfo.rect.width);\n        this.contentSize = new (0, _react_stately_virtualizer__WEBPACK_IMPORTED_MODULE_2__.Size)(body.layoutInfo.rect.width + this.padding * 2, body.layoutInfo.rect.maxY + this.padding);\n        return [\n            header,\n            body\n        ];\n    }\n    buildTableHeader() {\n        var _collection_head;\n        let collection = this.virtualizer.collection;\n        let rect = new (0, _react_stately_virtualizer__WEBPACK_IMPORTED_MODULE_2__.Rect)(this.padding, this.padding, 0, 0);\n        var _collection_head_key;\n        let layoutInfo = new (0, _react_stately_virtualizer__WEBPACK_IMPORTED_MODULE_2__.LayoutInfo)('header', (_collection_head_key = (_collection_head = collection.head) === null || _collection_head === void 0 ? void 0 : _collection_head.key) !== null && _collection_head_key !== void 0 ? _collection_head_key : 'header', rect);\n        layoutInfo.isSticky = true;\n        layoutInfo.zIndex = 1;\n        let y = this.padding;\n        let width = 0;\n        let children = [];\n        for (let headerRow of collection.headerRows){\n            let layoutNode = this.buildChild(headerRow, this.padding, y, layoutInfo.key);\n            layoutNode.layoutInfo.parentKey = layoutInfo.key;\n            y = layoutNode.layoutInfo.rect.maxY;\n            width = Math.max(width, layoutNode.layoutInfo.rect.width);\n            layoutNode.index = children.length;\n            children.push(layoutNode);\n        }\n        rect.width = width;\n        rect.height = y - this.padding;\n        return {\n            layoutInfo: layoutInfo,\n            children: children,\n            validRect: layoutInfo.rect,\n            node: collection.head\n        };\n    }\n    buildHeaderRow(headerRow, x, y) {\n        let rect = new (0, _react_stately_virtualizer__WEBPACK_IMPORTED_MODULE_2__.Rect)(x, y, 0, 0);\n        let row = new (0, _react_stately_virtualizer__WEBPACK_IMPORTED_MODULE_2__.LayoutInfo)('headerrow', headerRow.key, rect);\n        let height = 0;\n        let columns = [];\n        for (let cell of (0, _react_stately_collections__WEBPACK_IMPORTED_MODULE_3__.getChildNodes)(headerRow, this.virtualizer.collection)){\n            let layoutNode = this.buildChild(cell, x, y, row.key);\n            layoutNode.layoutInfo.parentKey = row.key;\n            x = layoutNode.layoutInfo.rect.maxX;\n            height = Math.max(height, layoutNode.layoutInfo.rect.height);\n            layoutNode.index = columns.length;\n            columns.push(layoutNode);\n        }\n        for (let [i, layout] of columns.entries())layout.layoutInfo.zIndex = columns.length - i + 1;\n        this.setChildHeights(columns, height);\n        rect.height = height;\n        rect.width = x - rect.x;\n        return {\n            layoutInfo: row,\n            children: columns,\n            validRect: rect,\n            node: headerRow\n        };\n    }\n    setChildHeights(children, height) {\n        for (let child of children)if (child.layoutInfo.rect.height !== height) {\n            // Need to copy the layout info before we mutate it.\n            child.layoutInfo = child.layoutInfo.copy();\n            child.layoutInfo.rect.height = height;\n        }\n    }\n    // used to get the column widths when rendering to the DOM\n    getRenderedColumnWidth(node) {\n        let collection = this.virtualizer.collection;\n        var _node_colSpan;\n        let colSpan = (_node_colSpan = node.colSpan) !== null && _node_colSpan !== void 0 ? _node_colSpan : 1;\n        var _node_colIndex;\n        let colIndex = (_node_colIndex = node.colIndex) !== null && _node_colIndex !== void 0 ? _node_colIndex : node.index;\n        let width = 0;\n        for(let i = colIndex; i < colIndex + colSpan; i++){\n            let column = collection.columns[i];\n            var _this_columnWidths_get;\n            if ((column === null || column === void 0 ? void 0 : column.key) != null) width += (_this_columnWidths_get = this.columnWidths.get(column.key)) !== null && _this_columnWidths_get !== void 0 ? _this_columnWidths_get : 0;\n        }\n        return width;\n    }\n    getEstimatedHeight(node, width, height, estimatedHeight) {\n        let isEstimated = false;\n        // If no explicit height is available, use an estimated height.\n        if (height == null) {\n            // If a previous version of this layout info exists, reuse its height.\n            // Mark as estimated if the size of the overall collection view changed,\n            // or the content of the item changed.\n            let previousLayoutNode = this.layoutNodes.get(node.key);\n            if (previousLayoutNode) {\n                height = previousLayoutNode.layoutInfo.rect.height;\n                isEstimated = node !== previousLayoutNode.node || width !== previousLayoutNode.layoutInfo.rect.width || previousLayoutNode.layoutInfo.estimatedSize;\n            } else {\n                height = estimatedHeight !== null && estimatedHeight !== void 0 ? estimatedHeight : $a152112e902709bf$var$DEFAULT_ROW_HEIGHT;\n                isEstimated = true;\n            }\n        }\n        return {\n            height: height,\n            isEstimated: isEstimated\n        };\n    }\n    getEstimatedRowHeight() {\n        var _this_rowHeight, _ref;\n        return (_ref = (_this_rowHeight = this.rowHeight) !== null && _this_rowHeight !== void 0 ? _this_rowHeight : this.estimatedRowHeight) !== null && _ref !== void 0 ? _ref : $a152112e902709bf$var$DEFAULT_ROW_HEIGHT;\n    }\n    buildColumn(node, x, y) {\n        let width = this.getRenderedColumnWidth(node);\n        var _this_headingHeight, _this_estimatedHeadingHeight;\n        let { height: height, isEstimated: isEstimated } = this.getEstimatedHeight(node, width, (_this_headingHeight = this.headingHeight) !== null && _this_headingHeight !== void 0 ? _this_headingHeight : this.rowHeight, (_this_estimatedHeadingHeight = this.estimatedHeadingHeight) !== null && _this_estimatedHeadingHeight !== void 0 ? _this_estimatedHeadingHeight : this.estimatedRowHeight);\n        let rect = new (0, _react_stately_virtualizer__WEBPACK_IMPORTED_MODULE_2__.Rect)(x, y, width, height);\n        let layoutInfo = new (0, _react_stately_virtualizer__WEBPACK_IMPORTED_MODULE_2__.LayoutInfo)(node.type, node.key, rect);\n        layoutInfo.isSticky = this.isStickyColumn(node);\n        layoutInfo.zIndex = layoutInfo.isSticky ? 2 : 1;\n        layoutInfo.estimatedSize = isEstimated;\n        return {\n            layoutInfo: layoutInfo,\n            children: [],\n            validRect: layoutInfo.rect,\n            node: node\n        };\n    }\n    // For subclasses.\n    // eslint-disable-next-line\n    isStickyColumn(node) {\n        return false;\n    }\n    buildBody(y) {\n        let collection = this.virtualizer.collection;\n        let rect = new (0, _react_stately_virtualizer__WEBPACK_IMPORTED_MODULE_2__.Rect)(this.padding, y, 0, 0);\n        let layoutInfo = new (0, _react_stately_virtualizer__WEBPACK_IMPORTED_MODULE_2__.LayoutInfo)('rowgroup', collection.body.key, rect);\n        let startY = y;\n        let skipped = 0;\n        let width = 0;\n        let children = [];\n        let rowHeight = this.getEstimatedRowHeight() + this.gap;\n        for (let node of (0, _react_stately_collections__WEBPACK_IMPORTED_MODULE_3__.getChildNodes)(collection.body, collection)){\n            // Skip rows before the valid rectangle unless they are already cached.\n            if (y + rowHeight < this.requestedRect.y && !this.isValid(node, y)) {\n                y += rowHeight;\n                skipped++;\n                continue;\n            }\n            let layoutNode = this.buildChild(node, this.padding, y, layoutInfo.key);\n            layoutNode.layoutInfo.parentKey = layoutInfo.key;\n            layoutNode.index = children.length;\n            y = layoutNode.layoutInfo.rect.maxY + this.gap;\n            width = Math.max(width, layoutNode.layoutInfo.rect.width);\n            children.push(layoutNode);\n            if (y > this.requestedRect.maxY) {\n                // Estimate the remaining height for rows that we don't need to layout right now.\n                y += (collection.size - (skipped + children.length)) * rowHeight;\n                break;\n            }\n        }\n        if (children.length === 0) y = this.virtualizer.visibleRect.maxY;\n        else y -= this.gap;\n        rect.width = width;\n        rect.height = y - startY;\n        return {\n            layoutInfo: layoutInfo,\n            children: children,\n            validRect: layoutInfo.rect.intersection(this.requestedRect),\n            node: collection.body\n        };\n    }\n    buildNode(node, x, y) {\n        switch(node.type){\n            case 'headerrow':\n                return this.buildHeaderRow(node, x, y);\n            case 'item':\n                return this.buildRow(node, x, y);\n            case 'column':\n            case 'placeholder':\n                return this.buildColumn(node, x, y);\n            case 'cell':\n                return this.buildCell(node, x, y);\n            case 'loader':\n                return this.buildLoader(node, x, y);\n            default:\n                throw new Error('Unknown node type ' + node.type);\n        }\n    }\n    buildRow(node, x, y) {\n        var _collection_head;\n        let collection = this.virtualizer.collection;\n        let rect = new (0, _react_stately_virtualizer__WEBPACK_IMPORTED_MODULE_2__.Rect)(x, y, 0, 0);\n        let layoutInfo = new (0, _react_stately_virtualizer__WEBPACK_IMPORTED_MODULE_2__.LayoutInfo)('row', node.key, rect);\n        let children = [];\n        let height = 0;\n        for (let child of (0, _react_stately_collections__WEBPACK_IMPORTED_MODULE_3__.getChildNodes)(node, collection))if (child.type === 'cell') {\n            if (x > this.requestedRect.maxX) {\n                // Adjust existing cached layoutInfo to ensure that it is out of view.\n                // This can happen due to column resizing.\n                let layoutNode = this.layoutNodes.get(child.key);\n                if (layoutNode) {\n                    layoutNode.layoutInfo.rect.x = x;\n                    x += layoutNode.layoutInfo.rect.width;\n                } else break;\n            } else {\n                let layoutNode = this.buildChild(child, x, y, layoutInfo.key);\n                x = layoutNode.layoutInfo.rect.maxX;\n                height = Math.max(height, layoutNode.layoutInfo.rect.height);\n                layoutNode.index = children.length;\n                children.push(layoutNode);\n            }\n        }\n        this.setChildHeights(children, height);\n        var _collection_head_key;\n        rect.width = this.layoutNodes.get((_collection_head_key = (_collection_head = collection.head) === null || _collection_head === void 0 ? void 0 : _collection_head.key) !== null && _collection_head_key !== void 0 ? _collection_head_key : 'header').layoutInfo.rect.width;\n        rect.height = height;\n        return {\n            layoutInfo: layoutInfo,\n            children: children,\n            validRect: rect.intersection(this.requestedRect),\n            node: node\n        };\n    }\n    buildCell(node, x, y) {\n        let width = this.getRenderedColumnWidth(node);\n        let { height: height, isEstimated: isEstimated } = this.getEstimatedHeight(node, width, this.rowHeight, this.estimatedRowHeight);\n        let rect = new (0, _react_stately_virtualizer__WEBPACK_IMPORTED_MODULE_2__.Rect)(x, y, width, height);\n        let layoutInfo = new (0, _react_stately_virtualizer__WEBPACK_IMPORTED_MODULE_2__.LayoutInfo)(node.type, node.key, rect);\n        layoutInfo.isSticky = this.isStickyColumn(node);\n        layoutInfo.zIndex = layoutInfo.isSticky ? 2 : 1;\n        layoutInfo.estimatedSize = isEstimated;\n        return {\n            layoutInfo: layoutInfo,\n            children: [],\n            validRect: rect,\n            node: node\n        };\n    }\n    getVisibleLayoutInfos(rect) {\n        // Adjust rect to keep number of visible rows consistent.\n        // (only if height > 1 for getDropTargetFromPoint)\n        if (rect.height > 1) {\n            let rowHeight = this.getEstimatedRowHeight();\n            rect.y = Math.floor(rect.y / rowHeight) * rowHeight;\n            rect.height = Math.ceil(rect.height / rowHeight) * rowHeight;\n        }\n        // If layout hasn't yet been done for the requested rect, union the\n        // new rect with the existing valid rect, and recompute.\n        this.layoutIfNeeded(rect);\n        let res = [];\n        this.buildPersistedIndices();\n        for (let node of this.rootNodes){\n            res.push(node.layoutInfo);\n            this.addVisibleLayoutInfos(res, node, rect);\n        }\n        return res;\n    }\n    addVisibleLayoutInfos(res, node, rect) {\n        if (!node.children || node.children.length === 0) return;\n        switch(node.layoutInfo.type){\n            case 'header':\n                for (let child of node.children){\n                    res.push(child.layoutInfo);\n                    this.addVisibleLayoutInfos(res, child, rect);\n                }\n                break;\n            case 'rowgroup':\n                {\n                    let firstVisibleRow = this.binarySearch(node.children, rect.topLeft, 'y');\n                    let lastVisibleRow = this.binarySearch(node.children, rect.bottomRight, 'y');\n                    // Add persisted rows before the visible rows.\n                    let persistedRowIndices = this.persistedIndices.get(node.layoutInfo.key);\n                    let persistIndex = 0;\n                    while(persistedRowIndices && persistIndex < persistedRowIndices.length && persistedRowIndices[persistIndex] < firstVisibleRow){\n                        let idx = persistedRowIndices[persistIndex];\n                        if (idx < node.children.length) {\n                            res.push(node.children[idx].layoutInfo);\n                            this.addVisibleLayoutInfos(res, node.children[idx], rect);\n                        }\n                        persistIndex++;\n                    }\n                    for(let i = firstVisibleRow; i <= lastVisibleRow; i++){\n                        // Skip persisted rows that overlap with visible cells.\n                        while(persistedRowIndices && persistIndex < persistedRowIndices.length && persistedRowIndices[persistIndex] < i)persistIndex++;\n                        res.push(node.children[i].layoutInfo);\n                        this.addVisibleLayoutInfos(res, node.children[i], rect);\n                    }\n                    // Add persisted rows after the visible rows.\n                    while(persistedRowIndices && persistIndex < persistedRowIndices.length){\n                        let idx = persistedRowIndices[persistIndex++];\n                        if (idx < node.children.length) {\n                            res.push(node.children[idx].layoutInfo);\n                            this.addVisibleLayoutInfos(res, node.children[idx], rect);\n                        }\n                    }\n                    break;\n                }\n            case 'headerrow':\n            case 'row':\n                {\n                    let firstVisibleCell = this.binarySearch(node.children, rect.topLeft, 'x');\n                    let lastVisibleCell = this.binarySearch(node.children, rect.topRight, 'x');\n                    let stickyIndex = 0;\n                    // Add persisted/sticky cells before the visible cells.\n                    let persistedCellIndices = this.persistedIndices.get(node.layoutInfo.key) || this.stickyColumnIndices;\n                    while(stickyIndex < persistedCellIndices.length && persistedCellIndices[stickyIndex] < firstVisibleCell){\n                        let idx = persistedCellIndices[stickyIndex];\n                        if (idx < node.children.length) res.push(node.children[idx].layoutInfo);\n                        stickyIndex++;\n                    }\n                    for(let i = firstVisibleCell; i <= lastVisibleCell; i++){\n                        // Skip sticky cells that overlap with visible cells.\n                        while(stickyIndex < persistedCellIndices.length && persistedCellIndices[stickyIndex] < i)stickyIndex++;\n                        res.push(node.children[i].layoutInfo);\n                    }\n                    // Add any remaining sticky cells after the visible cells.\n                    while(stickyIndex < persistedCellIndices.length){\n                        let idx = persistedCellIndices[stickyIndex++];\n                        if (idx < node.children.length) res.push(node.children[idx].layoutInfo);\n                    }\n                    break;\n                }\n            default:\n                throw new Error('Unknown node type ' + node.layoutInfo.type);\n        }\n    }\n    binarySearch(items, point, axis) {\n        let low = 0;\n        let high = items.length - 1;\n        while(low <= high){\n            let mid = low + high >> 1;\n            let item = items[mid];\n            if (axis === 'x' && item.layoutInfo.rect.maxX <= point.x || axis === 'y' && item.layoutInfo.rect.maxY <= point.y) low = mid + 1;\n            else if (axis === 'x' && item.layoutInfo.rect.x > point.x || axis === 'y' && item.layoutInfo.rect.y > point.y) high = mid - 1;\n            else return mid;\n        }\n        return Math.max(0, Math.min(items.length - 1, low));\n    }\n    buildPersistedIndices() {\n        if (this.virtualizer.persistedKeys === this.lastPersistedKeys) return;\n        this.lastPersistedKeys = this.virtualizer.persistedKeys;\n        this.persistedIndices.clear();\n        // Build a map of parentKey => indices of children to persist.\n        for (let key of this.virtualizer.persistedKeys){\n            var _this_layoutNodes_get;\n            let layoutInfo = (_this_layoutNodes_get = this.layoutNodes.get(key)) === null || _this_layoutNodes_get === void 0 ? void 0 : _this_layoutNodes_get.layoutInfo;\n            // Walk up ancestors so parents are also persisted if children are.\n            while(layoutInfo && layoutInfo.parentKey){\n                var _this_layoutNodes_get1, _this_layoutNodes_get2;\n                let collectionNode = this.virtualizer.collection.getItem(layoutInfo.key);\n                let indices = this.persistedIndices.get(layoutInfo.parentKey);\n                if (!indices) {\n                    // stickyColumnIndices are always persisted along with any cells from persistedKeys.\n                    indices = (collectionNode === null || collectionNode === void 0 ? void 0 : collectionNode.type) === 'cell' || (collectionNode === null || collectionNode === void 0 ? void 0 : collectionNode.type) === 'column' ? [\n                        ...this.stickyColumnIndices\n                    ] : [];\n                    this.persistedIndices.set(layoutInfo.parentKey, indices);\n                }\n                let index = (_this_layoutNodes_get1 = this.layoutNodes.get(layoutInfo.key)) === null || _this_layoutNodes_get1 === void 0 ? void 0 : _this_layoutNodes_get1.index;\n                if (index != null && !indices.includes(index)) indices.push(index);\n                layoutInfo = (_this_layoutNodes_get2 = this.layoutNodes.get(layoutInfo.parentKey)) === null || _this_layoutNodes_get2 === void 0 ? void 0 : _this_layoutNodes_get2.layoutInfo;\n            }\n        }\n        for (let indices of this.persistedIndices.values())indices.sort((a, b)=>a - b);\n    }\n    getDropTargetFromPoint(x, y, isValidDropTarget) {\n        x += this.virtualizer.visibleRect.x;\n        y += this.virtualizer.visibleRect.y;\n        // Find the closest item within on either side of the point using the gap width.\n        let searchRect = new (0, _react_stately_virtualizer__WEBPACK_IMPORTED_MODULE_2__.Rect)(x, Math.max(0, y - this.gap), 1, this.gap * 2);\n        let candidates = this.getVisibleLayoutInfos(searchRect);\n        let key = null;\n        let minDistance = Infinity;\n        for (let candidate of candidates){\n            // Ignore items outside the search rect, e.g. persisted keys.\n            if (candidate.type !== 'row' || !candidate.rect.intersects(searchRect)) continue;\n            let yDist = Math.abs(candidate.rect.y - y);\n            let maxYDist = Math.abs(candidate.rect.maxY - y);\n            let dist = Math.min(yDist, maxYDist);\n            if (dist < minDistance) {\n                minDistance = dist;\n                key = candidate.key;\n            }\n        }\n        if (key == null || this.virtualizer.collection.size === 0) return {\n            type: 'root'\n        };\n        let layoutInfo = this.getLayoutInfo(key);\n        if (!layoutInfo) return null;\n        let rect = layoutInfo.rect;\n        let target = {\n            type: 'item',\n            key: layoutInfo.key,\n            dropPosition: 'on'\n        };\n        // If dropping on the item isn't accepted, try the target before or after depending on the y position.\n        // Otherwise, if dropping on the item is accepted, still try the before/after positions if within 10px\n        // of the top or bottom of the item.\n        if (!isValidDropTarget(target)) {\n            if (y <= rect.y + rect.height / 2 && isValidDropTarget({\n                ...target,\n                dropPosition: 'before'\n            })) target.dropPosition = 'before';\n            else if (isValidDropTarget({\n                ...target,\n                dropPosition: 'after'\n            })) target.dropPosition = 'after';\n        } else if (y <= rect.y + 10 && isValidDropTarget({\n            ...target,\n            dropPosition: 'before'\n        })) target.dropPosition = 'before';\n        else if (y >= rect.maxY - 10 && isValidDropTarget({\n            ...target,\n            dropPosition: 'after'\n        })) target.dropPosition = 'after';\n        return target;\n    }\n    getDropTargetLayoutInfo(target) {\n        let layoutInfo = super.getDropTargetLayoutInfo(target);\n        layoutInfo.parentKey = this.virtualizer.collection.body.key;\n        return layoutInfo;\n    }\n    constructor(options){\n        super(options), this.lastCollection = null, this.columnWidths = new Map(), this.lastPersistedKeys = null, this.persistedIndices = new Map();\n        this.stickyColumnIndices = [];\n    }\n}\n\n\n\n//# sourceMappingURL=TableLayout.module.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../../../node_modules/.pnpm/@react-stately+layout@4.2.1_react-dom@19.0.0_react@19.0.0__react@19.0.0/node_modules/@react-stately/layout/dist/TableLayout.mjs\n");

/***/ }),

/***/ "../../../../node_modules/.pnpm/@react-stately+layout@4.2.1_react-dom@19.0.0_react@19.0.0__react@19.0.0/node_modules/@react-stately/layout/dist/WaterfallLayout.mjs":
/*!**************************************************************************************************************************************************************************!*\
  !*** ../../../../node_modules/.pnpm/@react-stately+layout@4.2.1_react-dom@19.0.0_react@19.0.0__react@19.0.0/node_modules/@react-stately/layout/dist/WaterfallLayout.mjs ***!
  \**************************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   WaterfallLayout: () => (/* binding */ $f483179558aa907f$export$e9f7cda058ba8df8)\n/* harmony export */ });\n/* harmony import */ var _react_stately_virtualizer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @react-stately/virtualizer */ \"../../../../node_modules/.pnpm/@react-stately+virtualizer@4.3.1_react-dom@19.0.0_react@19.0.0__react@19.0.0/node_modules/@react-stately/virtualizer/dist/import.mjs\");\n\n\n/*\n * Copyright 2024 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */ \nclass $f483179558aa907f$var$WaterfallLayoutInfo extends (0, _react_stately_virtualizer__WEBPACK_IMPORTED_MODULE_0__.LayoutInfo) {\n    copy() {\n        let res = super.copy();\n        res.column = this.column;\n        return res;\n    }\n    constructor(...args){\n        super(...args), this.column = 0;\n    }\n}\nconst $f483179558aa907f$var$DEFAULT_OPTIONS = {\n    minItemSize: new (0, _react_stately_virtualizer__WEBPACK_IMPORTED_MODULE_0__.Size)(200, 200),\n    maxItemSize: new (0, _react_stately_virtualizer__WEBPACK_IMPORTED_MODULE_0__.Size)(Infinity, Infinity),\n    minSpace: new (0, _react_stately_virtualizer__WEBPACK_IMPORTED_MODULE_0__.Size)(18, 18),\n    maxColumns: Infinity,\n    dropIndicatorThickness: 2\n};\nclass $f483179558aa907f$export$e9f7cda058ba8df8 extends (0, _react_stately_virtualizer__WEBPACK_IMPORTED_MODULE_0__.Layout) {\n    shouldInvalidateLayoutOptions(newOptions, oldOptions) {\n        return newOptions.maxColumns !== oldOptions.maxColumns || newOptions.dropIndicatorThickness !== oldOptions.dropIndicatorThickness || !(newOptions.minItemSize || $f483179558aa907f$var$DEFAULT_OPTIONS.minItemSize).equals(oldOptions.minItemSize || $f483179558aa907f$var$DEFAULT_OPTIONS.minItemSize) || !(newOptions.maxItemSize || $f483179558aa907f$var$DEFAULT_OPTIONS.maxItemSize).equals(oldOptions.maxItemSize || $f483179558aa907f$var$DEFAULT_OPTIONS.maxItemSize) || !(newOptions.minSpace || $f483179558aa907f$var$DEFAULT_OPTIONS.minSpace).equals(oldOptions.minSpace || $f483179558aa907f$var$DEFAULT_OPTIONS.minSpace);\n    }\n    update(invalidationContext) {\n        let { minItemSize: minItemSize = $f483179558aa907f$var$DEFAULT_OPTIONS.minItemSize, maxItemSize: maxItemSize = $f483179558aa907f$var$DEFAULT_OPTIONS.maxItemSize, minSpace: minSpace = $f483179558aa907f$var$DEFAULT_OPTIONS.minSpace, maxColumns: maxColumns = $f483179558aa907f$var$DEFAULT_OPTIONS.maxColumns, dropIndicatorThickness: dropIndicatorThickness = $f483179558aa907f$var$DEFAULT_OPTIONS.dropIndicatorThickness } = invalidationContext.layoutOptions || {};\n        this.dropIndicatorThickness = dropIndicatorThickness;\n        let visibleWidth = this.virtualizer.visibleRect.width;\n        // The max item width is always the entire viewport.\n        // If the max item height is infinity, scale in proportion to the max width.\n        let maxItemWidth = Math.min(maxItemSize.width, visibleWidth);\n        let maxItemHeight = Number.isFinite(maxItemSize.height) ? maxItemSize.height : Math.floor(minItemSize.height / minItemSize.width * maxItemWidth);\n        // Compute the number of rows and columns needed to display the content\n        let columns = Math.floor(visibleWidth / (minItemSize.width + minSpace.width));\n        let numColumns = Math.max(1, Math.min(maxColumns, columns));\n        // Compute the available width (minus the space between items)\n        let width = visibleWidth - minSpace.width * Math.max(0, numColumns);\n        // Compute the item width based on the space available\n        let itemWidth = Math.floor(width / numColumns);\n        itemWidth = Math.max(minItemSize.width, Math.min(maxItemWidth, itemWidth));\n        // Compute the item height, which is proportional to the item width\n        let t = (itemWidth - minItemSize.width) / Math.max(1, maxItemWidth - minItemSize.width);\n        let itemHeight = minItemSize.height + Math.floor((maxItemHeight - minItemSize.height) * t);\n        itemHeight = Math.max(minItemSize.height, Math.min(maxItemHeight, itemHeight));\n        // Compute the horizontal spacing and content height\n        let horizontalSpacing = Math.floor((visibleWidth - numColumns * itemWidth) / (numColumns + 1));\n        // Setup an array of column heights\n        let columnHeights = Array(numColumns).fill(minSpace.height);\n        let newLayoutInfos = new Map();\n        let addNode = (key, node)=>{\n            let oldLayoutInfo = this.layoutInfos.get(key);\n            let height = itemHeight;\n            let estimatedSize = true;\n            if (oldLayoutInfo) {\n                height = oldLayoutInfo.rect.height;\n                estimatedSize = invalidationContext.sizeChanged || oldLayoutInfo.estimatedSize || oldLayoutInfo.content !== node;\n            }\n            // Figure out which column to place the item in, and compute its position.\n            // Preserve the previous column index so items don't jump around during resizing unless the number of columns changed.\n            let prevColumn = numColumns === this.numColumns && oldLayoutInfo && oldLayoutInfo.rect.y < this.virtualizer.visibleRect.maxY ? oldLayoutInfo.column : undefined;\n            let column = prevColumn !== null && prevColumn !== void 0 ? prevColumn : columnHeights.reduce((minIndex, h, i)=>h < columnHeights[minIndex] ? i : minIndex, 0);\n            let x = horizontalSpacing + column * (itemWidth + horizontalSpacing);\n            let y = columnHeights[column];\n            let rect = new (0, _react_stately_virtualizer__WEBPACK_IMPORTED_MODULE_0__.Rect)(x, y, itemWidth, height);\n            let layoutInfo = new $f483179558aa907f$var$WaterfallLayoutInfo(node.type, key, rect);\n            layoutInfo.estimatedSize = estimatedSize;\n            layoutInfo.allowOverflow = true;\n            layoutInfo.content = node;\n            layoutInfo.column = column;\n            newLayoutInfos.set(key, layoutInfo);\n            columnHeights[column] += layoutInfo.rect.height + minSpace.height;\n        };\n        let skeletonCount = 0;\n        for (let node of this.virtualizer.collection)if (node.type === 'skeleton') {\n            // Add skeleton cards until every column has at least one, and we fill the viewport.\n            let startingHeights = [\n                ...columnHeights\n            ];\n            while(!columnHeights.every((h, i)=>h !== startingHeights[i]) || Math.min(...columnHeights) < this.virtualizer.visibleRect.height){\n                var _this_layoutInfos_get;\n                let key = `${node.key}-${skeletonCount++}`;\n                let content = ((_this_layoutInfos_get = this.layoutInfos.get(key)) === null || _this_layoutInfos_get === void 0 ? void 0 : _this_layoutInfos_get.content) || {\n                    ...node\n                };\n                addNode(key, content);\n            }\n            break;\n        } else addNode(node.key, node);\n        // Reset all columns to the maximum for the next section\n        let maxHeight = Math.max(...columnHeights);\n        this.contentSize = new (0, _react_stately_virtualizer__WEBPACK_IMPORTED_MODULE_0__.Size)(this.virtualizer.visibleRect.width, maxHeight);\n        this.layoutInfos = newLayoutInfos;\n        this.numColumns = numColumns;\n    }\n    getLayoutInfo(key) {\n        return this.layoutInfos.get(key);\n    }\n    getContentSize() {\n        return this.contentSize;\n    }\n    getVisibleLayoutInfos(rect) {\n        let layoutInfos = [];\n        for (let layoutInfo of this.layoutInfos.values())if (layoutInfo.rect.intersects(rect) || this.virtualizer.isPersistedKey(layoutInfo.key)) layoutInfos.push(layoutInfo);\n        return layoutInfos;\n    }\n    updateItemSize(key, size) {\n        let layoutInfo = this.layoutInfos.get(key);\n        if (!size || !layoutInfo) return false;\n        if (size.height !== layoutInfo.rect.height) {\n            let newLayoutInfo = layoutInfo.copy();\n            newLayoutInfo.rect.height = size.height;\n            newLayoutInfo.estimatedSize = false;\n            this.layoutInfos.set(key, newLayoutInfo);\n            return true;\n        }\n        return false;\n    }\n    // Override keyboard navigation to work spatially.\n    getKeyRightOf(key) {\n        let layoutInfo = this.getLayoutInfo(key);\n        if (!layoutInfo) return null;\n        let rect = new (0, _react_stately_virtualizer__WEBPACK_IMPORTED_MODULE_0__.Rect)(layoutInfo.rect.maxX, layoutInfo.rect.y, this.virtualizer.visibleRect.maxX - layoutInfo.rect.maxX, layoutInfo.rect.height);\n        let layoutInfos = this.getVisibleLayoutInfos(rect);\n        let bestKey = null;\n        let bestDistance = Infinity;\n        for (let candidate of layoutInfos){\n            if (candidate.key === key) continue;\n            // Find the closest item in the x direction with the most overlap in the y direction.\n            let deltaX = candidate.rect.x - rect.x;\n            let overlapY = Math.min(candidate.rect.maxY, rect.maxY) - Math.max(candidate.rect.y, rect.y);\n            let distance = deltaX - overlapY;\n            if (distance < bestDistance) {\n                bestDistance = distance;\n                bestKey = candidate.key;\n            }\n        }\n        return bestKey;\n    }\n    getKeyLeftOf(key) {\n        let layoutInfo = this.getLayoutInfo(key);\n        if (!layoutInfo) return null;\n        let rect = new (0, _react_stately_virtualizer__WEBPACK_IMPORTED_MODULE_0__.Rect)(0, layoutInfo.rect.y, layoutInfo.rect.x, layoutInfo.rect.height);\n        let layoutInfos = this.getVisibleLayoutInfos(rect);\n        let bestKey = null;\n        let bestDistance = Infinity;\n        for (let candidate of layoutInfos){\n            if (candidate.key === key) continue;\n            // Find the closest item in the x direction with the most overlap in the y direction.\n            let deltaX = rect.maxX - candidate.rect.maxX;\n            let overlapY = Math.min(candidate.rect.maxY, rect.maxY) - Math.max(candidate.rect.y, rect.y);\n            let distance = deltaX - overlapY;\n            if (distance < bestDistance) {\n                bestDistance = distance;\n                bestKey = candidate.key;\n            }\n        }\n        return bestKey;\n    }\n    // This overrides the default behavior of shift selection to work spatially\n    // rather than following the order of the items in the collection (which may appear unpredictable).\n    getKeyRange(from, to) {\n        let fromLayoutInfo = this.getLayoutInfo(from);\n        let toLayoutInfo = this.getLayoutInfo(to);\n        if (!fromLayoutInfo || !toLayoutInfo) return [];\n        // Find items where half of the area intersects the rectangle\n        // formed from the first item to the last item in the range.\n        let rect = fromLayoutInfo.rect.union(toLayoutInfo.rect);\n        let keys = [];\n        for (let layoutInfo of this.layoutInfos.values())if (rect.intersection(layoutInfo.rect).area > layoutInfo.rect.area / 2) keys.push(layoutInfo.key);\n        return keys;\n    }\n    getDropTargetFromPoint(x, y) {\n        if (this.layoutInfos.size === 0) return {\n            type: 'root'\n        };\n        x += this.virtualizer.visibleRect.x;\n        y += this.virtualizer.visibleRect.y;\n        let key = this.virtualizer.keyAtPoint(new (0, _react_stately_virtualizer__WEBPACK_IMPORTED_MODULE_0__.Point)(x, y));\n        if (key == null) return {\n            type: 'root'\n        };\n        // Only support \"on\" drop position in waterfall layout.\n        // Reordering doesn't make sense because the items don't have a deterministic order.\n        return {\n            type: 'item',\n            key: key,\n            dropPosition: 'on'\n        };\n    }\n    constructor(...args){\n        super(...args), this.contentSize = new (0, _react_stately_virtualizer__WEBPACK_IMPORTED_MODULE_0__.Size)(), this.layoutInfos = new Map(), this.numColumns = 0, this.dropIndicatorThickness = 2;\n    }\n}\n\n\n\n//# sourceMappingURL=WaterfallLayout.module.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../../../node_modules/.pnpm/@react-stately+layout@4.2.1_react-dom@19.0.0_react@19.0.0__react@19.0.0/node_modules/@react-stately/layout/dist/WaterfallLayout.mjs\n");

/***/ }),

/***/ "../../../../node_modules/.pnpm/@react-stately+layout@4.2.1_react-dom@19.0.0_react@19.0.0__react@19.0.0/node_modules/@react-stately/layout/dist/import.mjs":
/*!*****************************************************************************************************************************************************************!*\
  !*** ../../../../node_modules/.pnpm/@react-stately+layout@4.2.1_react-dom@19.0.0_react@19.0.0__react@19.0.0/node_modules/@react-stately/layout/dist/import.mjs ***!
  \*****************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GridLayout: () => (/* reexport safe */ _GridLayout_mjs__WEBPACK_IMPORTED_MODULE_0__.GridLayout),\n/* harmony export */   ListLayout: () => (/* reexport safe */ _ListLayout_mjs__WEBPACK_IMPORTED_MODULE_1__.ListLayout),\n/* harmony export */   TableLayout: () => (/* reexport safe */ _TableLayout_mjs__WEBPACK_IMPORTED_MODULE_2__.TableLayout),\n/* harmony export */   WaterfallLayout: () => (/* reexport safe */ _WaterfallLayout_mjs__WEBPACK_IMPORTED_MODULE_3__.WaterfallLayout)\n/* harmony export */ });\n/* harmony import */ var _GridLayout_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./GridLayout.mjs */ \"../../../../node_modules/.pnpm/@react-stately+layout@4.2.1_react-dom@19.0.0_react@19.0.0__react@19.0.0/node_modules/@react-stately/layout/dist/GridLayout.mjs\");\n/* harmony import */ var _ListLayout_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ListLayout.mjs */ \"../../../../node_modules/.pnpm/@react-stately+layout@4.2.1_react-dom@19.0.0_react@19.0.0__react@19.0.0/node_modules/@react-stately/layout/dist/ListLayout.mjs\");\n/* harmony import */ var _TableLayout_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./TableLayout.mjs */ \"../../../../node_modules/.pnpm/@react-stately+layout@4.2.1_react-dom@19.0.0_react@19.0.0__react@19.0.0/node_modules/@react-stately/layout/dist/TableLayout.mjs\");\n/* harmony import */ var _WaterfallLayout_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./WaterfallLayout.mjs */ \"../../../../node_modules/.pnpm/@react-stately+layout@4.2.1_react-dom@19.0.0_react@19.0.0__react@19.0.0/node_modules/@react-stately/layout/dist/WaterfallLayout.mjs\");\n\n\n\n\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */ \n\n\n\n\n\n\n//# sourceMappingURL=module.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0ByZWFjdC1zdGF0ZWx5K2xheW91dEA0LjIuMV9yZWFjdC1kb21AMTkuMC4wX3JlYWN0QDE5LjAuMF9fcmVhY3RAMTkuMC4wL25vZGVfbW9kdWxlcy9AcmVhY3Qtc3RhdGVseS9sYXlvdXQvZGlzdC9pbXBvcnQubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQXlGO0FBQ0E7QUFDRTtBQUNROztBQUVuRztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7QUFNa1A7QUFDbFAiLCJzb3VyY2VzIjpbIi9Vc2Vycy9qYWltZWlzcmFlbGNhbXBlYXMva2V5c3RvbmUvbm9kZV9tb2R1bGVzLy5wbnBtL0ByZWFjdC1zdGF0ZWx5K2xheW91dEA0LjIuMV9yZWFjdC1kb21AMTkuMC4wX3JlYWN0QDE5LjAuMF9fcmVhY3RAMTkuMC4wL25vZGVfbW9kdWxlcy9AcmVhY3Qtc3RhdGVseS9sYXlvdXQvZGlzdC9pbXBvcnQubWpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7R3JpZExheW91dCBhcyAkYTU4NTkyZDI5NWExNzBhNCRleHBvcnQkN2QyYjEyNTc4MTU0YTczNX0gZnJvbSBcIi4vR3JpZExheW91dC5tanNcIjtcbmltcG9ydCB7TGlzdExheW91dCBhcyAkNjFlZjYwZmM5YjEwNDFmNCRleHBvcnQkY2FjYmIzOTI0MTU1ZDY4ZX0gZnJvbSBcIi4vTGlzdExheW91dC5tanNcIjtcbmltcG9ydCB7VGFibGVMYXlvdXQgYXMgJGExNTIxMTJlOTAyNzA5YmYkZXhwb3J0JDYyNDQ0YzNjNzI0YjFiMjB9IGZyb20gXCIuL1RhYmxlTGF5b3V0Lm1qc1wiO1xuaW1wb3J0IHtXYXRlcmZhbGxMYXlvdXQgYXMgJGY0ODMxNzk1NThhYTkwN2YkZXhwb3J0JGU5ZjdjZGEwNThiYThkZjh9IGZyb20gXCIuL1dhdGVyZmFsbExheW91dC5tanNcIjtcblxuLypcbiAqIENvcHlyaWdodCAyMDIwIEFkb2JlLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogVGhpcyBmaWxlIGlzIGxpY2Vuc2VkIHRvIHlvdSB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLiBZb3UgbWF5IG9idGFpbiBhIGNvcHlcbiAqIG9mIHRoZSBMaWNlbnNlIGF0IGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXJcbiAqIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIFJFUFJFU0VOVEFUSU9OU1xuICogT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlXG4gKiBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovIFxuXG5cblxuXG5cbmV4cG9ydCB7JGE1ODU5MmQyOTVhMTcwYTQkZXhwb3J0JDdkMmIxMjU3ODE1NGE3MzUgYXMgR3JpZExheW91dCwgJDYxZWY2MGZjOWIxMDQxZjQkZXhwb3J0JGNhY2JiMzkyNDE1NWQ2OGUgYXMgTGlzdExheW91dCwgJGExNTIxMTJlOTAyNzA5YmYkZXhwb3J0JDYyNDQ0YzNjNzI0YjFiMjAgYXMgVGFibGVMYXlvdXQsICRmNDgzMTc5NTU4YWE5MDdmJGV4cG9ydCRlOWY3Y2RhMDU4YmE4ZGY4IGFzIFdhdGVyZmFsbExheW91dH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1tb2R1bGUuanMubWFwXG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../../../../node_modules/.pnpm/@react-stately+layout@4.2.1_react-dom@19.0.0_react@19.0.0__react@19.0.0/node_modules/@react-stately/layout/dist/import.mjs\n");

/***/ })

};
;