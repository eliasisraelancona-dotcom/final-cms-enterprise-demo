/* eslint-disable */

export type RoleWhereUniqueInput = {
  readonly id?: string | null
}

export type RoleWhereInput = {
  readonly AND?: ReadonlyArray<RoleWhereInput> | RoleWhereInput | null
  readonly OR?: ReadonlyArray<RoleWhereInput> | RoleWhereInput | null
  readonly NOT?: ReadonlyArray<RoleWhereInput> | RoleWhereInput | null
  readonly id?: IDFilter | null
  readonly name?: StringFilter | null
  readonly canUseAdminUI?: BooleanFilter | null
  readonly canManageUsers?: BooleanFilter | null
  readonly canManageAssets?: BooleanFilter | null
  readonly canApproveAssets?: BooleanFilter | null
  readonly canManageBrands?: BooleanFilter | null
  readonly canManageContent?: BooleanFilter | null
  readonly canPublishContent?: BooleanFilter | null
  readonly canViewAnalytics?: BooleanFilter | null
  readonly canManageDepartments?: BooleanFilter | null
  readonly canAnswerQuestions?: BooleanFilter | null
  readonly canManageAllDepartments?: BooleanFilter | null
  readonly users?: UserManyRelationFilter | null
}

export type IDFilter = {
  readonly equals?: string | null
  readonly in?: ReadonlyArray<string> | string | null
  readonly notIn?: ReadonlyArray<string> | string | null
  readonly lt?: string | null
  readonly lte?: string | null
  readonly gt?: string | null
  readonly gte?: string | null
  readonly not?: IDFilter | null
}

export type StringFilter = {
  readonly equals?: string | null
  readonly in?: ReadonlyArray<string> | string | null
  readonly notIn?: ReadonlyArray<string> | string | null
  readonly lt?: string | null
  readonly lte?: string | null
  readonly gt?: string | null
  readonly gte?: string | null
  readonly contains?: string | null
  readonly startsWith?: string | null
  readonly endsWith?: string | null
  readonly not?: NestedStringFilter | null
}

export type NestedStringFilter = {
  readonly equals?: string | null
  readonly in?: ReadonlyArray<string> | string | null
  readonly notIn?: ReadonlyArray<string> | string | null
  readonly lt?: string | null
  readonly lte?: string | null
  readonly gt?: string | null
  readonly gte?: string | null
  readonly contains?: string | null
  readonly startsWith?: string | null
  readonly endsWith?: string | null
  readonly not?: NestedStringFilter | null
}

export type BooleanFilter = {
  readonly equals?: boolean | null
  readonly not?: BooleanFilter | null
}

export type UserManyRelationFilter = {
  readonly every?: UserWhereInput | null
  readonly some?: UserWhereInput | null
  readonly none?: UserWhereInput | null
}

export type RoleOrderByInput = {
  readonly id?: OrderDirection | null
  readonly name?: OrderDirection | null
  readonly canUseAdminUI?: OrderDirection | null
  readonly canManageUsers?: OrderDirection | null
  readonly canManageAssets?: OrderDirection | null
  readonly canApproveAssets?: OrderDirection | null
  readonly canManageBrands?: OrderDirection | null
  readonly canManageContent?: OrderDirection | null
  readonly canPublishContent?: OrderDirection | null
  readonly canViewAnalytics?: OrderDirection | null
  readonly canManageDepartments?: OrderDirection | null
  readonly canAnswerQuestions?: OrderDirection | null
  readonly canManageAllDepartments?: OrderDirection | null
}

export type OrderDirection =
  | 'asc'
  | 'desc'

export type RoleUpdateInput = {
  readonly name?: string | null
  readonly canUseAdminUI?: boolean | null
  readonly canManageUsers?: boolean | null
  readonly canManageAssets?: boolean | null
  readonly canApproveAssets?: boolean | null
  readonly canManageBrands?: boolean | null
  readonly canManageContent?: boolean | null
  readonly canPublishContent?: boolean | null
  readonly canViewAnalytics?: boolean | null
  readonly canManageDepartments?: boolean | null
  readonly canAnswerQuestions?: boolean | null
  readonly canManageAllDepartments?: boolean | null
  readonly users?: UserRelateToManyForUpdateInput | null
}

export type UserRelateToManyForUpdateInput = {
  readonly disconnect?: ReadonlyArray<UserWhereUniqueInput> | UserWhereUniqueInput | null
  readonly set?: ReadonlyArray<UserWhereUniqueInput> | UserWhereUniqueInput | null
  readonly create?: ReadonlyArray<UserCreateInput> | UserCreateInput | null
  readonly connect?: ReadonlyArray<UserWhereUniqueInput> | UserWhereUniqueInput | null
}

export type RoleUpdateArgs = {
  readonly where: RoleWhereUniqueInput
  readonly data: RoleUpdateInput
}

export type RoleCreateInput = {
  readonly name?: string | null
  readonly canUseAdminUI?: boolean | null
  readonly canManageUsers?: boolean | null
  readonly canManageAssets?: boolean | null
  readonly canApproveAssets?: boolean | null
  readonly canManageBrands?: boolean | null
  readonly canManageContent?: boolean | null
  readonly canPublishContent?: boolean | null
  readonly canViewAnalytics?: boolean | null
  readonly canManageDepartments?: boolean | null
  readonly canAnswerQuestions?: boolean | null
  readonly canManageAllDepartments?: boolean | null
  readonly users?: UserRelateToManyForCreateInput | null
}

export type UserRelateToManyForCreateInput = {
  readonly create?: ReadonlyArray<UserCreateInput> | UserCreateInput | null
  readonly connect?: ReadonlyArray<UserWhereUniqueInput> | UserWhereUniqueInput | null
  readonly set?: ReadonlyArray<UserWhereUniqueInput> | UserWhereUniqueInput | null
}

export type DepartmentWhereUniqueInput = {
  readonly id?: string | null
  readonly slug?: string | null
}

export type DepartmentWhereInput = {
  readonly AND?: ReadonlyArray<DepartmentWhereInput> | DepartmentWhereInput | null
  readonly OR?: ReadonlyArray<DepartmentWhereInput> | DepartmentWhereInput | null
  readonly NOT?: ReadonlyArray<DepartmentWhereInput> | DepartmentWhereInput | null
  readonly id?: IDFilter | null
  readonly name?: StringFilter | null
  readonly slug?: StringFilter | null
  readonly description?: StringFilter | null
  readonly members?: UserManyRelationFilter | null
  readonly brands?: BrandManyRelationFilter | null
}

export type BrandManyRelationFilter = {
  readonly every?: BrandWhereInput | null
  readonly some?: BrandWhereInput | null
  readonly none?: BrandWhereInput | null
}

export type DepartmentOrderByInput = {
  readonly id?: OrderDirection | null
  readonly name?: OrderDirection | null
  readonly slug?: OrderDirection | null
  readonly description?: OrderDirection | null
}

export type DepartmentUpdateInput = {
  readonly name?: string | null
  readonly slug?: string | null
  readonly description?: string | null
  readonly members?: UserRelateToManyForUpdateInput | null
  readonly brands?: BrandRelateToManyForUpdateInput | null
}

export type BrandRelateToManyForUpdateInput = {
  readonly disconnect?: ReadonlyArray<BrandWhereUniqueInput> | BrandWhereUniqueInput | null
  readonly set?: ReadonlyArray<BrandWhereUniqueInput> | BrandWhereUniqueInput | null
  readonly create?: ReadonlyArray<BrandCreateInput> | BrandCreateInput | null
  readonly connect?: ReadonlyArray<BrandWhereUniqueInput> | BrandWhereUniqueInput | null
}

export type DepartmentUpdateArgs = {
  readonly where: DepartmentWhereUniqueInput
  readonly data: DepartmentUpdateInput
}

export type DepartmentCreateInput = {
  readonly name?: string | null
  readonly slug?: string | null
  readonly description?: string | null
  readonly members?: UserRelateToManyForCreateInput | null
  readonly brands?: BrandRelateToManyForCreateInput | null
}

export type BrandRelateToManyForCreateInput = {
  readonly create?: ReadonlyArray<BrandCreateInput> | BrandCreateInput | null
  readonly connect?: ReadonlyArray<BrandWhereUniqueInput> | BrandWhereUniqueInput | null
  readonly set?: ReadonlyArray<BrandWhereUniqueInput> | BrandWhereUniqueInput | null
}

export type BrandComplianceStatusType =
  | 'compliant'
  | 'needs_review'
  | 'non_compliant'

export type BrandWhereUniqueInput = {
  readonly id?: string | null
  readonly slug?: string | null
}

export type BrandWhereInput = {
  readonly AND?: ReadonlyArray<BrandWhereInput> | BrandWhereInput | null
  readonly OR?: ReadonlyArray<BrandWhereInput> | BrandWhereInput | null
  readonly NOT?: ReadonlyArray<BrandWhereInput> | BrandWhereInput | null
  readonly id?: IDFilter | null
  readonly name?: StringFilter | null
  readonly slug?: StringFilter | null
  readonly description?: StringFilter | null
  readonly complianceStatus?: BrandComplianceStatusTypeNullableFilter | null
  readonly department?: DepartmentWhereInput | null
  readonly owners?: UserManyRelationFilter | null
  readonly assets?: AssetManyRelationFilter | null
  readonly content?: ContentManyRelationFilter | null
}

export type BrandComplianceStatusTypeNullableFilter = {
  readonly equals?: BrandComplianceStatusType | null
  readonly in?: ReadonlyArray<BrandComplianceStatusType> | BrandComplianceStatusType | null
  readonly notIn?: ReadonlyArray<BrandComplianceStatusType> | BrandComplianceStatusType | null
  readonly not?: BrandComplianceStatusTypeNullableFilter | null
}

export type AssetManyRelationFilter = {
  readonly every?: AssetWhereInput | null
  readonly some?: AssetWhereInput | null
  readonly none?: AssetWhereInput | null
}

export type ContentManyRelationFilter = {
  readonly every?: ContentWhereInput | null
  readonly some?: ContentWhereInput | null
  readonly none?: ContentWhereInput | null
}

export type BrandOrderByInput = {
  readonly id?: OrderDirection | null
  readonly name?: OrderDirection | null
  readonly slug?: OrderDirection | null
  readonly description?: OrderDirection | null
  readonly complianceStatus?: OrderDirection | null
}

export type BrandUpdateInput = {
  readonly name?: string | null
  readonly slug?: string | null
  readonly description?: string | null
  readonly complianceStatus?: BrandComplianceStatusType | null
  readonly guidelines?: import('@keystone-6/core/types').JSONValue | null
  readonly department?: DepartmentRelateToOneForUpdateInput | null
  readonly owners?: UserRelateToManyForUpdateInput | null
  readonly assets?: AssetRelateToManyForUpdateInput | null
  readonly content?: ContentRelateToManyForUpdateInput | null
}

export type DepartmentRelateToOneForUpdateInput = {
  readonly create?: DepartmentCreateInput | null
  readonly connect?: DepartmentWhereUniqueInput | null
  readonly disconnect?: boolean | null
}

export type AssetRelateToManyForUpdateInput = {
  readonly disconnect?: ReadonlyArray<AssetWhereUniqueInput> | AssetWhereUniqueInput | null
  readonly set?: ReadonlyArray<AssetWhereUniqueInput> | AssetWhereUniqueInput | null
  readonly create?: ReadonlyArray<AssetCreateInput> | AssetCreateInput | null
  readonly connect?: ReadonlyArray<AssetWhereUniqueInput> | AssetWhereUniqueInput | null
}

export type ContentRelateToManyForUpdateInput = {
  readonly disconnect?: ReadonlyArray<ContentWhereUniqueInput> | ContentWhereUniqueInput | null
  readonly set?: ReadonlyArray<ContentWhereUniqueInput> | ContentWhereUniqueInput | null
  readonly create?: ReadonlyArray<ContentCreateInput> | ContentCreateInput | null
  readonly connect?: ReadonlyArray<ContentWhereUniqueInput> | ContentWhereUniqueInput | null
}

export type BrandUpdateArgs = {
  readonly where: BrandWhereUniqueInput
  readonly data: BrandUpdateInput
}

export type BrandCreateInput = {
  readonly name?: string | null
  readonly slug?: string | null
  readonly description?: string | null
  readonly complianceStatus?: BrandComplianceStatusType | null
  readonly guidelines?: import('@keystone-6/core/types').JSONValue | null
  readonly department?: DepartmentRelateToOneForCreateInput | null
  readonly owners?: UserRelateToManyForCreateInput | null
  readonly assets?: AssetRelateToManyForCreateInput | null
  readonly content?: ContentRelateToManyForCreateInput | null
}

export type DepartmentRelateToOneForCreateInput = {
  readonly create?: DepartmentCreateInput | null
  readonly connect?: DepartmentWhereUniqueInput | null
}

export type AssetRelateToManyForCreateInput = {
  readonly create?: ReadonlyArray<AssetCreateInput> | AssetCreateInput | null
  readonly connect?: ReadonlyArray<AssetWhereUniqueInput> | AssetWhereUniqueInput | null
  readonly set?: ReadonlyArray<AssetWhereUniqueInput> | AssetWhereUniqueInput | null
}

export type ContentRelateToManyForCreateInput = {
  readonly create?: ReadonlyArray<ContentCreateInput> | ContentCreateInput | null
  readonly connect?: ReadonlyArray<ContentWhereUniqueInput> | ContentWhereUniqueInput | null
  readonly set?: ReadonlyArray<ContentWhereUniqueInput> | ContentWhereUniqueInput | null
}

export type UserWhereUniqueInput = {
  readonly id?: string | null
  readonly email?: string | null
}

export type UserWhereInput = {
  readonly AND?: ReadonlyArray<UserWhereInput> | UserWhereInput | null
  readonly OR?: ReadonlyArray<UserWhereInput> | UserWhereInput | null
  readonly NOT?: ReadonlyArray<UserWhereInput> | UserWhereInput | null
  readonly id?: IDFilter | null
  readonly name?: StringFilter | null
  readonly email?: StringFilter | null
  readonly role?: RoleWhereInput | null
  readonly department?: DepartmentWhereInput | null
}

export type UserOrderByInput = {
  readonly id?: OrderDirection | null
  readonly name?: OrderDirection | null
  readonly email?: OrderDirection | null
}

export type UserUpdateInput = {
  readonly name?: string | null
  readonly email?: string | null
  readonly password?: string | null
  readonly role?: RoleRelateToOneForUpdateInput | null
  readonly department?: DepartmentRelateToOneForUpdateInput | null
}

export type RoleRelateToOneForUpdateInput = {
  readonly create?: RoleCreateInput | null
  readonly connect?: RoleWhereUniqueInput | null
  readonly disconnect?: boolean | null
}

export type UserUpdateArgs = {
  readonly where: UserWhereUniqueInput
  readonly data: UserUpdateInput
}

export type UserCreateInput = {
  readonly name?: string | null
  readonly email?: string | null
  readonly password?: string | null
  readonly role?: RoleRelateToOneForCreateInput | null
  readonly department?: DepartmentRelateToOneForCreateInput | null
}

export type RoleRelateToOneForCreateInput = {
  readonly create?: RoleCreateInput | null
  readonly connect?: RoleWhereUniqueInput | null
}

export type TagWhereUniqueInput = {
  readonly id?: string | null
}

export type TagWhereInput = {
  readonly AND?: ReadonlyArray<TagWhereInput> | TagWhereInput | null
  readonly OR?: ReadonlyArray<TagWhereInput> | TagWhereInput | null
  readonly NOT?: ReadonlyArray<TagWhereInput> | TagWhereInput | null
  readonly id?: IDFilter | null
  readonly name?: StringFilter | null
  readonly assets?: AssetManyRelationFilter | null
  readonly content?: ContentManyRelationFilter | null
  readonly questions?: QuestionManyRelationFilter | null
}

export type QuestionManyRelationFilter = {
  readonly every?: QuestionWhereInput | null
  readonly some?: QuestionWhereInput | null
  readonly none?: QuestionWhereInput | null
}

export type TagOrderByInput = {
  readonly id?: OrderDirection | null
  readonly name?: OrderDirection | null
}

export type TagUpdateInput = {
  readonly name?: string | null
  readonly assets?: AssetRelateToManyForUpdateInput | null
  readonly content?: ContentRelateToManyForUpdateInput | null
  readonly questions?: QuestionRelateToManyForUpdateInput | null
}

export type QuestionRelateToManyForUpdateInput = {
  readonly disconnect?: ReadonlyArray<QuestionWhereUniqueInput> | QuestionWhereUniqueInput | null
  readonly set?: ReadonlyArray<QuestionWhereUniqueInput> | QuestionWhereUniqueInput | null
  readonly create?: ReadonlyArray<QuestionCreateInput> | QuestionCreateInput | null
  readonly connect?: ReadonlyArray<QuestionWhereUniqueInput> | QuestionWhereUniqueInput | null
}

export type TagUpdateArgs = {
  readonly where: TagWhereUniqueInput
  readonly data: TagUpdateInput
}

export type TagCreateInput = {
  readonly name?: string | null
  readonly assets?: AssetRelateToManyForCreateInput | null
  readonly content?: ContentRelateToManyForCreateInput | null
  readonly questions?: QuestionRelateToManyForCreateInput | null
}

export type QuestionRelateToManyForCreateInput = {
  readonly create?: ReadonlyArray<QuestionCreateInput> | QuestionCreateInput | null
  readonly connect?: ReadonlyArray<QuestionWhereUniqueInput> | QuestionWhereUniqueInput | null
  readonly set?: ReadonlyArray<QuestionWhereUniqueInput> | QuestionWhereUniqueInput | null
}

export type AssetStatusType =
  | 'uploaded'
  | 'in_review'
  | 'approved'
  | 'archived'

export type ImageExtension =
  | 'jpg'
  | 'png'
  | 'webp'
  | 'gif'

export type AssetWhereUniqueInput = {
  readonly id?: string | null
}

export type AssetWhereInput = {
  readonly AND?: ReadonlyArray<AssetWhereInput> | AssetWhereInput | null
  readonly OR?: ReadonlyArray<AssetWhereInput> | AssetWhereInput | null
  readonly NOT?: ReadonlyArray<AssetWhereInput> | AssetWhereInput | null
  readonly id?: IDFilter | null
  readonly title?: StringFilter | null
  readonly description?: StringFilter | null
  readonly status?: AssetStatusTypeNullableFilter | null
  readonly brand?: BrandWhereInput | null
  readonly department?: DepartmentWhereInput | null
  readonly uploadedBy?: UserWhereInput | null
  readonly approvedBy?: UserWhereInput | null
  readonly tags?: TagManyRelationFilter | null
}

export type AssetStatusTypeNullableFilter = {
  readonly equals?: AssetStatusType | null
  readonly in?: ReadonlyArray<AssetStatusType> | AssetStatusType | null
  readonly notIn?: ReadonlyArray<AssetStatusType> | AssetStatusType | null
  readonly not?: AssetStatusTypeNullableFilter | null
}

export type TagManyRelationFilter = {
  readonly every?: TagWhereInput | null
  readonly some?: TagWhereInput | null
  readonly none?: TagWhereInput | null
}

export type AssetOrderByInput = {
  readonly id?: OrderDirection | null
  readonly title?: OrderDirection | null
  readonly description?: OrderDirection | null
  readonly status?: OrderDirection | null
}

export type AssetUpdateInput = {
  readonly title?: string | null
  readonly description?: string | null
  readonly status?: AssetStatusType | null
  readonly image?: ImageFieldInput | null
  readonly file?: FileFieldInput | null
  readonly brand?: BrandRelateToOneForUpdateInput | null
  readonly department?: DepartmentRelateToOneForUpdateInput | null
  readonly uploadedBy?: UserRelateToOneForUpdateInput | null
  readonly approvedBy?: UserRelateToOneForUpdateInput | null
  readonly tags?: TagRelateToManyForUpdateInput | null
}

export type ImageFieldInput = {
  readonly upload: any
}

export type FileFieldInput = {
  readonly upload: any
}

export type BrandRelateToOneForUpdateInput = {
  readonly create?: BrandCreateInput | null
  readonly connect?: BrandWhereUniqueInput | null
  readonly disconnect?: boolean | null
}

export type UserRelateToOneForUpdateInput = {
  readonly create?: UserCreateInput | null
  readonly connect?: UserWhereUniqueInput | null
  readonly disconnect?: boolean | null
}

export type TagRelateToManyForUpdateInput = {
  readonly disconnect?: ReadonlyArray<TagWhereUniqueInput> | TagWhereUniqueInput | null
  readonly set?: ReadonlyArray<TagWhereUniqueInput> | TagWhereUniqueInput | null
  readonly create?: ReadonlyArray<TagCreateInput> | TagCreateInput | null
  readonly connect?: ReadonlyArray<TagWhereUniqueInput> | TagWhereUniqueInput | null
}

export type AssetUpdateArgs = {
  readonly where: AssetWhereUniqueInput
  readonly data: AssetUpdateInput
}

export type AssetCreateInput = {
  readonly title?: string | null
  readonly description?: string | null
  readonly status?: AssetStatusType | null
  readonly image?: ImageFieldInput | null
  readonly file?: FileFieldInput | null
  readonly brand?: BrandRelateToOneForCreateInput | null
  readonly department?: DepartmentRelateToOneForCreateInput | null
  readonly uploadedBy?: UserRelateToOneForCreateInput | null
  readonly approvedBy?: UserRelateToOneForCreateInput | null
  readonly tags?: TagRelateToManyForCreateInput | null
}

export type BrandRelateToOneForCreateInput = {
  readonly create?: BrandCreateInput | null
  readonly connect?: BrandWhereUniqueInput | null
}

export type UserRelateToOneForCreateInput = {
  readonly create?: UserCreateInput | null
  readonly connect?: UserWhereUniqueInput | null
}

export type TagRelateToManyForCreateInput = {
  readonly create?: ReadonlyArray<TagCreateInput> | TagCreateInput | null
  readonly connect?: ReadonlyArray<TagWhereUniqueInput> | TagWhereUniqueInput | null
  readonly set?: ReadonlyArray<TagWhereUniqueInput> | TagWhereUniqueInput | null
}

export type ContentStatusType =
  | 'draft'
  | 'review'
  | 'approved'
  | 'published'

export type ContentWhereUniqueInput = {
  readonly id?: string | null
}

export type ContentWhereInput = {
  readonly AND?: ReadonlyArray<ContentWhereInput> | ContentWhereInput | null
  readonly OR?: ReadonlyArray<ContentWhereInput> | ContentWhereInput | null
  readonly NOT?: ReadonlyArray<ContentWhereInput> | ContentWhereInput | null
  readonly id?: IDFilter | null
  readonly title?: StringFilter | null
  readonly status?: ContentStatusTypeNullableFilter | null
  readonly brand?: BrandWhereInput | null
  readonly department?: DepartmentWhereInput | null
  readonly assets?: AssetManyRelationFilter | null
  readonly createdBy?: UserWhereInput | null
  readonly reviewers?: UserManyRelationFilter | null
  readonly tags?: TagManyRelationFilter | null
}

export type ContentStatusTypeNullableFilter = {
  readonly equals?: ContentStatusType | null
  readonly in?: ReadonlyArray<ContentStatusType> | ContentStatusType | null
  readonly notIn?: ReadonlyArray<ContentStatusType> | ContentStatusType | null
  readonly not?: ContentStatusTypeNullableFilter | null
}

export type ContentOrderByInput = {
  readonly id?: OrderDirection | null
  readonly title?: OrderDirection | null
  readonly status?: OrderDirection | null
}

export type ContentUpdateInput = {
  readonly title?: string | null
  readonly status?: ContentStatusType | null
  readonly body?: import('@keystone-6/core/types').JSONValue | null
  readonly brand?: BrandRelateToOneForUpdateInput | null
  readonly department?: DepartmentRelateToOneForUpdateInput | null
  readonly assets?: AssetRelateToManyForUpdateInput | null
  readonly createdBy?: UserRelateToOneForUpdateInput | null
  readonly reviewers?: UserRelateToManyForUpdateInput | null
  readonly tags?: TagRelateToManyForUpdateInput | null
}

export type ContentUpdateArgs = {
  readonly where: ContentWhereUniqueInput
  readonly data: ContentUpdateInput
}

export type ContentCreateInput = {
  readonly title?: string | null
  readonly status?: ContentStatusType | null
  readonly body?: import('@keystone-6/core/types').JSONValue | null
  readonly brand?: BrandRelateToOneForCreateInput | null
  readonly department?: DepartmentRelateToOneForCreateInput | null
  readonly assets?: AssetRelateToManyForCreateInput | null
  readonly createdBy?: UserRelateToOneForCreateInput | null
  readonly reviewers?: UserRelateToManyForCreateInput | null
  readonly tags?: TagRelateToManyForCreateInput | null
}

export type AuditLogWhereUniqueInput = {
  readonly id?: string | null
}

export type AuditLogWhereInput = {
  readonly AND?: ReadonlyArray<AuditLogWhereInput> | AuditLogWhereInput | null
  readonly OR?: ReadonlyArray<AuditLogWhereInput> | AuditLogWhereInput | null
  readonly NOT?: ReadonlyArray<AuditLogWhereInput> | AuditLogWhereInput | null
  readonly id?: IDFilter | null
  readonly action?: StringFilter | null
  readonly entityType?: StringFilter | null
  readonly entityId?: StringFilter | null
  readonly timestamp?: DateTimeNullableFilter | null
  readonly user?: UserWhereInput | null
  readonly department?: DepartmentWhereInput | null
}

export type DateTimeNullableFilter = {
  readonly equals?: any | null
  readonly in?: ReadonlyArray<any> | any | null
  readonly notIn?: ReadonlyArray<any> | any | null
  readonly lt?: any | null
  readonly lte?: any | null
  readonly gt?: any | null
  readonly gte?: any | null
  readonly not?: DateTimeNullableFilter | null
}

export type AuditLogOrderByInput = {
  readonly id?: OrderDirection | null
  readonly action?: OrderDirection | null
  readonly entityType?: OrderDirection | null
  readonly entityId?: OrderDirection | null
  readonly timestamp?: OrderDirection | null
}

export type AuditLogUpdateInput = {
  readonly action?: string | null
  readonly entityType?: string | null
  readonly entityId?: string | null
  readonly timestamp?: any | null
  readonly meta?: import('@keystone-6/core/types').JSONValue | null
  readonly user?: UserRelateToOneForUpdateInput | null
  readonly department?: DepartmentRelateToOneForUpdateInput | null
}

export type AuditLogUpdateArgs = {
  readonly where: AuditLogWhereUniqueInput
  readonly data: AuditLogUpdateInput
}

export type AuditLogCreateInput = {
  readonly action?: string | null
  readonly entityType?: string | null
  readonly entityId?: string | null
  readonly timestamp?: any | null
  readonly meta?: import('@keystone-6/core/types').JSONValue | null
  readonly user?: UserRelateToOneForCreateInput | null
  readonly department?: DepartmentRelateToOneForCreateInput | null
}

export type AnalyticsEventEventTypeType =
  | 'view'
  | 'download'
  | 'share'
  | 'search'

export type AnalyticsEventWhereUniqueInput = {
  readonly id?: string | null
}

export type AnalyticsEventWhereInput = {
  readonly AND?: ReadonlyArray<AnalyticsEventWhereInput> | AnalyticsEventWhereInput | null
  readonly OR?: ReadonlyArray<AnalyticsEventWhereInput> | AnalyticsEventWhereInput | null
  readonly NOT?: ReadonlyArray<AnalyticsEventWhereInput> | AnalyticsEventWhereInput | null
  readonly id?: IDFilter | null
  readonly eventType?: AnalyticsEventEventTypeTypeNullableFilter | null
  readonly timestamp?: DateTimeNullableFilter | null
  readonly user?: UserWhereInput | null
  readonly entityType?: StringFilter | null
  readonly entityId?: StringFilter | null
  readonly department?: DepartmentWhereInput | null
}

export type AnalyticsEventEventTypeTypeNullableFilter = {
  readonly equals?: AnalyticsEventEventTypeType | null
  readonly in?: ReadonlyArray<AnalyticsEventEventTypeType> | AnalyticsEventEventTypeType | null
  readonly notIn?: ReadonlyArray<AnalyticsEventEventTypeType> | AnalyticsEventEventTypeType | null
  readonly not?: AnalyticsEventEventTypeTypeNullableFilter | null
}

export type AnalyticsEventOrderByInput = {
  readonly id?: OrderDirection | null
  readonly eventType?: OrderDirection | null
  readonly timestamp?: OrderDirection | null
  readonly entityType?: OrderDirection | null
  readonly entityId?: OrderDirection | null
}

export type AnalyticsEventUpdateInput = {
  readonly eventType?: AnalyticsEventEventTypeType | null
  readonly timestamp?: any | null
  readonly user?: UserRelateToOneForUpdateInput | null
  readonly entityType?: string | null
  readonly entityId?: string | null
  readonly meta?: import('@keystone-6/core/types').JSONValue | null
  readonly department?: DepartmentRelateToOneForUpdateInput | null
}

export type AnalyticsEventUpdateArgs = {
  readonly where: AnalyticsEventWhereUniqueInput
  readonly data: AnalyticsEventUpdateInput
}

export type AnalyticsEventCreateInput = {
  readonly eventType?: AnalyticsEventEventTypeType | null
  readonly timestamp?: any | null
  readonly user?: UserRelateToOneForCreateInput | null
  readonly entityType?: string | null
  readonly entityId?: string | null
  readonly meta?: import('@keystone-6/core/types').JSONValue | null
  readonly department?: DepartmentRelateToOneForCreateInput | null
}

export type QuestionStatusType =
  | 'new'
  | 'triage'
  | 'answered'
  | 'closed'

export type QuestionWhereUniqueInput = {
  readonly id?: string | null
}

export type QuestionWhereInput = {
  readonly AND?: ReadonlyArray<QuestionWhereInput> | QuestionWhereInput | null
  readonly OR?: ReadonlyArray<QuestionWhereInput> | QuestionWhereInput | null
  readonly NOT?: ReadonlyArray<QuestionWhereInput> | QuestionWhereInput | null
  readonly id?: IDFilter | null
  readonly subject?: StringFilter | null
  readonly status?: QuestionStatusTypeNullableFilter | null
  readonly department?: DepartmentWhereInput | null
  readonly askedBy?: UserWhereInput | null
  readonly tags?: TagManyRelationFilter | null
  readonly answers?: AnswerManyRelationFilter | null
}

export type QuestionStatusTypeNullableFilter = {
  readonly equals?: QuestionStatusType | null
  readonly in?: ReadonlyArray<QuestionStatusType> | QuestionStatusType | null
  readonly notIn?: ReadonlyArray<QuestionStatusType> | QuestionStatusType | null
  readonly not?: QuestionStatusTypeNullableFilter | null
}

export type AnswerManyRelationFilter = {
  readonly every?: AnswerWhereInput | null
  readonly some?: AnswerWhereInput | null
  readonly none?: AnswerWhereInput | null
}

export type QuestionOrderByInput = {
  readonly id?: OrderDirection | null
  readonly subject?: OrderDirection | null
  readonly status?: OrderDirection | null
}

export type QuestionUpdateInput = {
  readonly subject?: string | null
  readonly body?: import('@keystone-6/core/types').JSONValue | null
  readonly status?: QuestionStatusType | null
  readonly department?: DepartmentRelateToOneForUpdateInput | null
  readonly askedBy?: UserRelateToOneForUpdateInput | null
  readonly tags?: TagRelateToManyForUpdateInput | null
  readonly answers?: AnswerRelateToManyForUpdateInput | null
}

export type AnswerRelateToManyForUpdateInput = {
  readonly disconnect?: ReadonlyArray<AnswerWhereUniqueInput> | AnswerWhereUniqueInput | null
  readonly set?: ReadonlyArray<AnswerWhereUniqueInput> | AnswerWhereUniqueInput | null
  readonly create?: ReadonlyArray<AnswerCreateInput> | AnswerCreateInput | null
  readonly connect?: ReadonlyArray<AnswerWhereUniqueInput> | AnswerWhereUniqueInput | null
}

export type QuestionUpdateArgs = {
  readonly where: QuestionWhereUniqueInput
  readonly data: QuestionUpdateInput
}

export type QuestionCreateInput = {
  readonly subject?: string | null
  readonly body?: import('@keystone-6/core/types').JSONValue | null
  readonly status?: QuestionStatusType | null
  readonly department?: DepartmentRelateToOneForCreateInput | null
  readonly askedBy?: UserRelateToOneForCreateInput | null
  readonly tags?: TagRelateToManyForCreateInput | null
  readonly answers?: AnswerRelateToManyForCreateInput | null
}

export type AnswerRelateToManyForCreateInput = {
  readonly create?: ReadonlyArray<AnswerCreateInput> | AnswerCreateInput | null
  readonly connect?: ReadonlyArray<AnswerWhereUniqueInput> | AnswerWhereUniqueInput | null
  readonly set?: ReadonlyArray<AnswerWhereUniqueInput> | AnswerWhereUniqueInput | null
}

export type AnswerWhereUniqueInput = {
  readonly id?: string | null
}

export type AnswerWhereInput = {
  readonly AND?: ReadonlyArray<AnswerWhereInput> | AnswerWhereInput | null
  readonly OR?: ReadonlyArray<AnswerWhereInput> | AnswerWhereInput | null
  readonly NOT?: ReadonlyArray<AnswerWhereInput> | AnswerWhereInput | null
  readonly id?: IDFilter | null
  readonly question?: QuestionWhereInput | null
  readonly answeredBy?: UserWhereInput | null
  readonly approved?: BooleanFilter | null
  readonly department?: DepartmentWhereInput | null
}

export type AnswerOrderByInput = {
  readonly id?: OrderDirection | null
  readonly approved?: OrderDirection | null
}

export type AnswerUpdateInput = {
  readonly body?: import('@keystone-6/core/types').JSONValue | null
  readonly question?: QuestionRelateToOneForUpdateInput | null
  readonly answeredBy?: UserRelateToOneForUpdateInput | null
  readonly approved?: boolean | null
  readonly department?: DepartmentRelateToOneForUpdateInput | null
}

export type QuestionRelateToOneForUpdateInput = {
  readonly create?: QuestionCreateInput | null
  readonly connect?: QuestionWhereUniqueInput | null
  readonly disconnect?: boolean | null
}

export type AnswerUpdateArgs = {
  readonly where: AnswerWhereUniqueInput
  readonly data: AnswerUpdateInput
}

export type AnswerCreateInput = {
  readonly body?: import('@keystone-6/core/types').JSONValue | null
  readonly question?: QuestionRelateToOneForCreateInput | null
  readonly answeredBy?: UserRelateToOneForCreateInput | null
  readonly approved?: boolean | null
  readonly department?: DepartmentRelateToOneForCreateInput | null
}

export type QuestionRelateToOneForCreateInput = {
  readonly create?: QuestionCreateInput | null
  readonly connect?: QuestionWhereUniqueInput | null
}

export type CreateInitialUserInput = {
  readonly name?: string | null
  readonly email?: string | null
  readonly password?: string | null
}

export type KeystoneAdminUIFieldMetaIsNonNull =
  | 'read'
  | 'create'
  | 'update'

export type KeystoneAdminUIFieldMetaListViewFieldMode =
  | 'read'
  | 'hidden'

export type KeystoneAdminUIFieldMetaItemViewFieldPosition =
  | 'form'
  | 'sidebar'

export type QueryMode =
  | 'default'
  | 'insensitive'

export type KeystoneAdminUISortDirection =
  | 'ASC'
  | 'DESC'

type ResolvedRoleCreateInput = {
  id?: import('@prisma/client').Prisma.RoleCreateInput['id']
  name?: import('@prisma/client').Prisma.RoleCreateInput['name']
  canUseAdminUI?: import('@prisma/client').Prisma.RoleCreateInput['canUseAdminUI']
  canManageUsers?: import('@prisma/client').Prisma.RoleCreateInput['canManageUsers']
  canManageAssets?: import('@prisma/client').Prisma.RoleCreateInput['canManageAssets']
  canApproveAssets?: import('@prisma/client').Prisma.RoleCreateInput['canApproveAssets']
  canManageBrands?: import('@prisma/client').Prisma.RoleCreateInput['canManageBrands']
  canManageContent?: import('@prisma/client').Prisma.RoleCreateInput['canManageContent']
  canPublishContent?: import('@prisma/client').Prisma.RoleCreateInput['canPublishContent']
  canViewAnalytics?: import('@prisma/client').Prisma.RoleCreateInput['canViewAnalytics']
  canManageDepartments?: import('@prisma/client').Prisma.RoleCreateInput['canManageDepartments']
  canAnswerQuestions?: import('@prisma/client').Prisma.RoleCreateInput['canAnswerQuestions']
  canManageAllDepartments?: import('@prisma/client').Prisma.RoleCreateInput['canManageAllDepartments']
  users?: import('@prisma/client').Prisma.RoleCreateInput['users']
}
type ResolvedRoleUpdateInput = {
  id?: undefined
  name?: import('@prisma/client').Prisma.RoleUpdateInput['name']
  canUseAdminUI?: import('@prisma/client').Prisma.RoleUpdateInput['canUseAdminUI']
  canManageUsers?: import('@prisma/client').Prisma.RoleUpdateInput['canManageUsers']
  canManageAssets?: import('@prisma/client').Prisma.RoleUpdateInput['canManageAssets']
  canApproveAssets?: import('@prisma/client').Prisma.RoleUpdateInput['canApproveAssets']
  canManageBrands?: import('@prisma/client').Prisma.RoleUpdateInput['canManageBrands']
  canManageContent?: import('@prisma/client').Prisma.RoleUpdateInput['canManageContent']
  canPublishContent?: import('@prisma/client').Prisma.RoleUpdateInput['canPublishContent']
  canViewAnalytics?: import('@prisma/client').Prisma.RoleUpdateInput['canViewAnalytics']
  canManageDepartments?: import('@prisma/client').Prisma.RoleUpdateInput['canManageDepartments']
  canAnswerQuestions?: import('@prisma/client').Prisma.RoleUpdateInput['canAnswerQuestions']
  canManageAllDepartments?: import('@prisma/client').Prisma.RoleUpdateInput['canManageAllDepartments']
  users?: import('@prisma/client').Prisma.RoleUpdateInput['users']
}
type ResolvedDepartmentCreateInput = {
  id?: import('@prisma/client').Prisma.DepartmentCreateInput['id']
  name?: import('@prisma/client').Prisma.DepartmentCreateInput['name']
  slug?: import('@prisma/client').Prisma.DepartmentCreateInput['slug']
  description?: import('@prisma/client').Prisma.DepartmentCreateInput['description']
  members?: import('@prisma/client').Prisma.DepartmentCreateInput['members']
  brands?: import('@prisma/client').Prisma.DepartmentCreateInput['brands']
}
type ResolvedDepartmentUpdateInput = {
  id?: undefined
  name?: import('@prisma/client').Prisma.DepartmentUpdateInput['name']
  slug?: import('@prisma/client').Prisma.DepartmentUpdateInput['slug']
  description?: import('@prisma/client').Prisma.DepartmentUpdateInput['description']
  members?: import('@prisma/client').Prisma.DepartmentUpdateInput['members']
  brands?: import('@prisma/client').Prisma.DepartmentUpdateInput['brands']
}
type ResolvedBrandCreateInput = {
  id?: import('@prisma/client').Prisma.BrandCreateInput['id']
  name?: import('@prisma/client').Prisma.BrandCreateInput['name']
  slug?: import('@prisma/client').Prisma.BrandCreateInput['slug']
  description?: import('@prisma/client').Prisma.BrandCreateInput['description']
  complianceStatus?: import('@prisma/client').Prisma.BrandCreateInput['complianceStatus']
  guidelines: import('@prisma/client').Prisma.BrandCreateInput['guidelines']
  department?: import('@prisma/client').Prisma.BrandCreateInput['department']
  owners?: import('@prisma/client').Prisma.BrandCreateInput['owners']
  assets?: import('@prisma/client').Prisma.BrandCreateInput['assets']
  content?: import('@prisma/client').Prisma.BrandCreateInput['content']
}
type ResolvedBrandUpdateInput = {
  id?: undefined
  name?: import('@prisma/client').Prisma.BrandUpdateInput['name']
  slug?: import('@prisma/client').Prisma.BrandUpdateInput['slug']
  description?: import('@prisma/client').Prisma.BrandUpdateInput['description']
  complianceStatus?: import('@prisma/client').Prisma.BrandUpdateInput['complianceStatus']
  guidelines?: import('@prisma/client').Prisma.BrandUpdateInput['guidelines']
  department?: import('@prisma/client').Prisma.BrandUpdateInput['department']
  owners?: import('@prisma/client').Prisma.BrandUpdateInput['owners']
  assets?: import('@prisma/client').Prisma.BrandUpdateInput['assets']
  content?: import('@prisma/client').Prisma.BrandUpdateInput['content']
}
type ResolvedUserCreateInput = {
  id?: import('@prisma/client').Prisma.UserCreateInput['id']
  name?: import('@prisma/client').Prisma.UserCreateInput['name']
  email?: import('@prisma/client').Prisma.UserCreateInput['email']
  password: import('@prisma/client').Prisma.UserCreateInput['password']
  role?: import('@prisma/client').Prisma.UserCreateInput['role']
  department?: import('@prisma/client').Prisma.UserCreateInput['department']
}
type ResolvedUserUpdateInput = {
  id?: undefined
  name?: import('@prisma/client').Prisma.UserUpdateInput['name']
  email?: import('@prisma/client').Prisma.UserUpdateInput['email']
  password?: import('@prisma/client').Prisma.UserUpdateInput['password']
  role?: import('@prisma/client').Prisma.UserUpdateInput['role']
  department?: import('@prisma/client').Prisma.UserUpdateInput['department']
}
type ResolvedTagCreateInput = {
  id?: import('@prisma/client').Prisma.TagCreateInput['id']
  name?: import('@prisma/client').Prisma.TagCreateInput['name']
  assets?: import('@prisma/client').Prisma.TagCreateInput['assets']
  content?: import('@prisma/client').Prisma.TagCreateInput['content']
  questions?: import('@prisma/client').Prisma.TagCreateInput['questions']
}
type ResolvedTagUpdateInput = {
  id?: undefined
  name?: import('@prisma/client').Prisma.TagUpdateInput['name']
  assets?: import('@prisma/client').Prisma.TagUpdateInput['assets']
  content?: import('@prisma/client').Prisma.TagUpdateInput['content']
  questions?: import('@prisma/client').Prisma.TagUpdateInput['questions']
}
type ResolvedAssetCreateInput = {
  id?: import('@prisma/client').Prisma.AssetCreateInput['id']
  title?: import('@prisma/client').Prisma.AssetCreateInput['title']
  description?: import('@prisma/client').Prisma.AssetCreateInput['description']
  status?: import('@prisma/client').Prisma.AssetCreateInput['status']
  image: {
  id?: import('@prisma/client').Prisma.AssetCreateInput['image_id']
  extension?: import('@prisma/client').Prisma.AssetCreateInput['image_extension']
  filesize?: import('@prisma/client').Prisma.AssetCreateInput['image_filesize']
  width?: import('@prisma/client').Prisma.AssetCreateInput['image_width']
  height?: import('@prisma/client').Prisma.AssetCreateInput['image_height']
  }
  file: {
  filesize?: import('@prisma/client').Prisma.AssetCreateInput['file_filesize']
  filename?: import('@prisma/client').Prisma.AssetCreateInput['file_filename']
  }
  brand?: import('@prisma/client').Prisma.AssetCreateInput['brand']
  department?: import('@prisma/client').Prisma.AssetCreateInput['department']
  uploadedBy?: import('@prisma/client').Prisma.AssetCreateInput['uploadedBy']
  approvedBy?: import('@prisma/client').Prisma.AssetCreateInput['approvedBy']
  tags?: import('@prisma/client').Prisma.AssetCreateInput['tags']
}
type ResolvedAssetUpdateInput = {
  id?: undefined
  title?: import('@prisma/client').Prisma.AssetUpdateInput['title']
  description?: import('@prisma/client').Prisma.AssetUpdateInput['description']
  status?: import('@prisma/client').Prisma.AssetUpdateInput['status']
  image: {
  id?: import('@prisma/client').Prisma.AssetUpdateInput['image_id']
  extension?: import('@prisma/client').Prisma.AssetUpdateInput['image_extension']
  filesize?: import('@prisma/client').Prisma.AssetUpdateInput['image_filesize']
  width?: import('@prisma/client').Prisma.AssetUpdateInput['image_width']
  height?: import('@prisma/client').Prisma.AssetUpdateInput['image_height']
  }
  file: {
  filesize?: import('@prisma/client').Prisma.AssetUpdateInput['file_filesize']
  filename?: import('@prisma/client').Prisma.AssetUpdateInput['file_filename']
  }
  brand?: import('@prisma/client').Prisma.AssetUpdateInput['brand']
  department?: import('@prisma/client').Prisma.AssetUpdateInput['department']
  uploadedBy?: import('@prisma/client').Prisma.AssetUpdateInput['uploadedBy']
  approvedBy?: import('@prisma/client').Prisma.AssetUpdateInput['approvedBy']
  tags?: import('@prisma/client').Prisma.AssetUpdateInput['tags']
}
type ResolvedContentCreateInput = {
  id?: import('@prisma/client').Prisma.ContentCreateInput['id']
  title?: import('@prisma/client').Prisma.ContentCreateInput['title']
  status?: import('@prisma/client').Prisma.ContentCreateInput['status']
  body: import('@prisma/client').Prisma.ContentCreateInput['body']
  brand?: import('@prisma/client').Prisma.ContentCreateInput['brand']
  department?: import('@prisma/client').Prisma.ContentCreateInput['department']
  assets?: import('@prisma/client').Prisma.ContentCreateInput['assets']
  createdBy?: import('@prisma/client').Prisma.ContentCreateInput['createdBy']
  reviewers?: import('@prisma/client').Prisma.ContentCreateInput['reviewers']
  tags?: import('@prisma/client').Prisma.ContentCreateInput['tags']
}
type ResolvedContentUpdateInput = {
  id?: undefined
  title?: import('@prisma/client').Prisma.ContentUpdateInput['title']
  status?: import('@prisma/client').Prisma.ContentUpdateInput['status']
  body?: import('@prisma/client').Prisma.ContentUpdateInput['body']
  brand?: import('@prisma/client').Prisma.ContentUpdateInput['brand']
  department?: import('@prisma/client').Prisma.ContentUpdateInput['department']
  assets?: import('@prisma/client').Prisma.ContentUpdateInput['assets']
  createdBy?: import('@prisma/client').Prisma.ContentUpdateInput['createdBy']
  reviewers?: import('@prisma/client').Prisma.ContentUpdateInput['reviewers']
  tags?: import('@prisma/client').Prisma.ContentUpdateInput['tags']
}
type ResolvedAuditLogCreateInput = {
  id?: import('@prisma/client').Prisma.AuditLogCreateInput['id']
  action?: import('@prisma/client').Prisma.AuditLogCreateInput['action']
  entityType?: import('@prisma/client').Prisma.AuditLogCreateInput['entityType']
  entityId?: import('@prisma/client').Prisma.AuditLogCreateInput['entityId']
  timestamp?: import('@prisma/client').Prisma.AuditLogCreateInput['timestamp']
  meta?: import('@prisma/client').Prisma.AuditLogCreateInput['meta']
  user?: import('@prisma/client').Prisma.AuditLogCreateInput['user']
  department?: import('@prisma/client').Prisma.AuditLogCreateInput['department']
}
type ResolvedAuditLogUpdateInput = {
  id?: undefined
  action?: import('@prisma/client').Prisma.AuditLogUpdateInput['action']
  entityType?: import('@prisma/client').Prisma.AuditLogUpdateInput['entityType']
  entityId?: import('@prisma/client').Prisma.AuditLogUpdateInput['entityId']
  timestamp?: import('@prisma/client').Prisma.AuditLogUpdateInput['timestamp']
  meta?: import('@prisma/client').Prisma.AuditLogUpdateInput['meta']
  user?: import('@prisma/client').Prisma.AuditLogUpdateInput['user']
  department?: import('@prisma/client').Prisma.AuditLogUpdateInput['department']
}
type ResolvedAnalyticsEventCreateInput = {
  id?: import('@prisma/client').Prisma.AnalyticsEventCreateInput['id']
  eventType?: import('@prisma/client').Prisma.AnalyticsEventCreateInput['eventType']
  timestamp?: import('@prisma/client').Prisma.AnalyticsEventCreateInput['timestamp']
  user?: import('@prisma/client').Prisma.AnalyticsEventCreateInput['user']
  entityType?: import('@prisma/client').Prisma.AnalyticsEventCreateInput['entityType']
  entityId?: import('@prisma/client').Prisma.AnalyticsEventCreateInput['entityId']
  meta?: import('@prisma/client').Prisma.AnalyticsEventCreateInput['meta']
  department?: import('@prisma/client').Prisma.AnalyticsEventCreateInput['department']
}
type ResolvedAnalyticsEventUpdateInput = {
  id?: undefined
  eventType?: import('@prisma/client').Prisma.AnalyticsEventUpdateInput['eventType']
  timestamp?: import('@prisma/client').Prisma.AnalyticsEventUpdateInput['timestamp']
  user?: import('@prisma/client').Prisma.AnalyticsEventUpdateInput['user']
  entityType?: import('@prisma/client').Prisma.AnalyticsEventUpdateInput['entityType']
  entityId?: import('@prisma/client').Prisma.AnalyticsEventUpdateInput['entityId']
  meta?: import('@prisma/client').Prisma.AnalyticsEventUpdateInput['meta']
  department?: import('@prisma/client').Prisma.AnalyticsEventUpdateInput['department']
}
type ResolvedQuestionCreateInput = {
  id?: import('@prisma/client').Prisma.QuestionCreateInput['id']
  subject?: import('@prisma/client').Prisma.QuestionCreateInput['subject']
  body: import('@prisma/client').Prisma.QuestionCreateInput['body']
  status?: import('@prisma/client').Prisma.QuestionCreateInput['status']
  department?: import('@prisma/client').Prisma.QuestionCreateInput['department']
  askedBy?: import('@prisma/client').Prisma.QuestionCreateInput['askedBy']
  tags?: import('@prisma/client').Prisma.QuestionCreateInput['tags']
  answers?: import('@prisma/client').Prisma.QuestionCreateInput['answers']
}
type ResolvedQuestionUpdateInput = {
  id?: undefined
  subject?: import('@prisma/client').Prisma.QuestionUpdateInput['subject']
  body?: import('@prisma/client').Prisma.QuestionUpdateInput['body']
  status?: import('@prisma/client').Prisma.QuestionUpdateInput['status']
  department?: import('@prisma/client').Prisma.QuestionUpdateInput['department']
  askedBy?: import('@prisma/client').Prisma.QuestionUpdateInput['askedBy']
  tags?: import('@prisma/client').Prisma.QuestionUpdateInput['tags']
  answers?: import('@prisma/client').Prisma.QuestionUpdateInput['answers']
}
type ResolvedAnswerCreateInput = {
  id?: import('@prisma/client').Prisma.AnswerCreateInput['id']
  body: import('@prisma/client').Prisma.AnswerCreateInput['body']
  question?: import('@prisma/client').Prisma.AnswerCreateInput['question']
  answeredBy?: import('@prisma/client').Prisma.AnswerCreateInput['answeredBy']
  approved?: import('@prisma/client').Prisma.AnswerCreateInput['approved']
  department?: import('@prisma/client').Prisma.AnswerCreateInput['department']
}
type ResolvedAnswerUpdateInput = {
  id?: undefined
  body?: import('@prisma/client').Prisma.AnswerUpdateInput['body']
  question?: import('@prisma/client').Prisma.AnswerUpdateInput['question']
  answeredBy?: import('@prisma/client').Prisma.AnswerUpdateInput['answeredBy']
  approved?: import('@prisma/client').Prisma.AnswerUpdateInput['approved']
  department?: import('@prisma/client').Prisma.AnswerUpdateInput['department']
}

export declare namespace Lists {
  export type Role<Session = any> = import('@keystone-6/core/types').ListConfig<Lists.Role.TypeInfo<Session>>
  namespace Role {
    export type Item = import('@prisma/client').Role
    export type TypeInfo<Session = any> = {
      key: 'Role'
      isSingleton: false
      fields: 'id' | 'name' | 'canUseAdminUI' | 'canManageUsers' | 'canManageAssets' | 'canApproveAssets' | 'canManageBrands' | 'canManageContent' | 'canPublishContent' | 'canViewAnalytics' | 'canManageDepartments' | 'canAnswerQuestions' | 'canManageAllDepartments' | 'users'
      item: Item
      inputs: {
        where: RoleWhereInput
        uniqueWhere: RoleWhereUniqueInput
        create: RoleCreateInput
        update: RoleUpdateInput
        orderBy: RoleOrderByInput
      }
      prisma: {
        create: ResolvedRoleCreateInput
        update: ResolvedRoleUpdateInput
      }
      all: __TypeInfo<Session>
    }
  }
  export type Department<Session = any> = import('@keystone-6/core/types').ListConfig<Lists.Department.TypeInfo<Session>>
  namespace Department {
    export type Item = import('@prisma/client').Department
    export type TypeInfo<Session = any> = {
      key: 'Department'
      isSingleton: false
      fields: 'id' | 'name' | 'slug' | 'description' | 'members' | 'brands'
      item: Item
      inputs: {
        where: DepartmentWhereInput
        uniqueWhere: DepartmentWhereUniqueInput
        create: DepartmentCreateInput
        update: DepartmentUpdateInput
        orderBy: DepartmentOrderByInput
      }
      prisma: {
        create: ResolvedDepartmentCreateInput
        update: ResolvedDepartmentUpdateInput
      }
      all: __TypeInfo<Session>
    }
  }
  export type Brand<Session = any> = import('@keystone-6/core/types').ListConfig<Lists.Brand.TypeInfo<Session>>
  namespace Brand {
    export type Item = import('@prisma/client').Brand
    export type TypeInfo<Session = any> = {
      key: 'Brand'
      isSingleton: false
      fields: 'id' | 'name' | 'slug' | 'description' | 'complianceStatus' | 'guidelines' | 'department' | 'owners' | 'assets' | 'content'
      item: Item
      inputs: {
        where: BrandWhereInput
        uniqueWhere: BrandWhereUniqueInput
        create: BrandCreateInput
        update: BrandUpdateInput
        orderBy: BrandOrderByInput
      }
      prisma: {
        create: ResolvedBrandCreateInput
        update: ResolvedBrandUpdateInput
      }
      all: __TypeInfo<Session>
    }
  }
  export type User<Session = any> = import('@keystone-6/core/types').ListConfig<Lists.User.TypeInfo<Session>>
  namespace User {
    export type Item = import('@prisma/client').User
    export type TypeInfo<Session = any> = {
      key: 'User'
      isSingleton: false
      fields: 'id' | 'name' | 'email' | 'password' | 'role' | 'department'
      item: Item
      inputs: {
        where: UserWhereInput
        uniqueWhere: UserWhereUniqueInput
        create: UserCreateInput
        update: UserUpdateInput
        orderBy: UserOrderByInput
      }
      prisma: {
        create: ResolvedUserCreateInput
        update: ResolvedUserUpdateInput
      }
      all: __TypeInfo<Session>
    }
  }
  export type Tag<Session = any> = import('@keystone-6/core/types').ListConfig<Lists.Tag.TypeInfo<Session>>
  namespace Tag {
    export type Item = import('@prisma/client').Tag
    export type TypeInfo<Session = any> = {
      key: 'Tag'
      isSingleton: false
      fields: 'id' | 'name' | 'assets' | 'content' | 'questions'
      item: Item
      inputs: {
        where: TagWhereInput
        uniqueWhere: TagWhereUniqueInput
        create: TagCreateInput
        update: TagUpdateInput
        orderBy: TagOrderByInput
      }
      prisma: {
        create: ResolvedTagCreateInput
        update: ResolvedTagUpdateInput
      }
      all: __TypeInfo<Session>
    }
  }
  export type Asset<Session = any> = import('@keystone-6/core/types').ListConfig<Lists.Asset.TypeInfo<Session>>
  namespace Asset {
    export type Item = import('@prisma/client').Asset
    export type TypeInfo<Session = any> = {
      key: 'Asset'
      isSingleton: false
      fields: 'id' | 'title' | 'description' | 'status' | 'image' | 'file' | 'brand' | 'department' | 'uploadedBy' | 'approvedBy' | 'tags'
      item: Item
      inputs: {
        where: AssetWhereInput
        uniqueWhere: AssetWhereUniqueInput
        create: AssetCreateInput
        update: AssetUpdateInput
        orderBy: AssetOrderByInput
      }
      prisma: {
        create: ResolvedAssetCreateInput
        update: ResolvedAssetUpdateInput
      }
      all: __TypeInfo<Session>
    }
  }
  export type Content<Session = any> = import('@keystone-6/core/types').ListConfig<Lists.Content.TypeInfo<Session>>
  namespace Content {
    export type Item = import('@prisma/client').Content
    export type TypeInfo<Session = any> = {
      key: 'Content'
      isSingleton: false
      fields: 'id' | 'title' | 'status' | 'body' | 'brand' | 'department' | 'assets' | 'createdBy' | 'reviewers' | 'tags'
      item: Item
      inputs: {
        where: ContentWhereInput
        uniqueWhere: ContentWhereUniqueInput
        create: ContentCreateInput
        update: ContentUpdateInput
        orderBy: ContentOrderByInput
      }
      prisma: {
        create: ResolvedContentCreateInput
        update: ResolvedContentUpdateInput
      }
      all: __TypeInfo<Session>
    }
  }
  export type AuditLog<Session = any> = import('@keystone-6/core/types').ListConfig<Lists.AuditLog.TypeInfo<Session>>
  namespace AuditLog {
    export type Item = import('@prisma/client').AuditLog
    export type TypeInfo<Session = any> = {
      key: 'AuditLog'
      isSingleton: false
      fields: 'id' | 'action' | 'entityType' | 'entityId' | 'timestamp' | 'meta' | 'user' | 'department'
      item: Item
      inputs: {
        where: AuditLogWhereInput
        uniqueWhere: AuditLogWhereUniqueInput
        create: AuditLogCreateInput
        update: AuditLogUpdateInput
        orderBy: AuditLogOrderByInput
      }
      prisma: {
        create: ResolvedAuditLogCreateInput
        update: ResolvedAuditLogUpdateInput
      }
      all: __TypeInfo<Session>
    }
  }
  export type AnalyticsEvent<Session = any> = import('@keystone-6/core/types').ListConfig<Lists.AnalyticsEvent.TypeInfo<Session>>
  namespace AnalyticsEvent {
    export type Item = import('@prisma/client').AnalyticsEvent
    export type TypeInfo<Session = any> = {
      key: 'AnalyticsEvent'
      isSingleton: false
      fields: 'id' | 'eventType' | 'timestamp' | 'user' | 'entityType' | 'entityId' | 'meta' | 'department'
      item: Item
      inputs: {
        where: AnalyticsEventWhereInput
        uniqueWhere: AnalyticsEventWhereUniqueInput
        create: AnalyticsEventCreateInput
        update: AnalyticsEventUpdateInput
        orderBy: AnalyticsEventOrderByInput
      }
      prisma: {
        create: ResolvedAnalyticsEventCreateInput
        update: ResolvedAnalyticsEventUpdateInput
      }
      all: __TypeInfo<Session>
    }
  }
  export type Question<Session = any> = import('@keystone-6/core/types').ListConfig<Lists.Question.TypeInfo<Session>>
  namespace Question {
    export type Item = import('@prisma/client').Question
    export type TypeInfo<Session = any> = {
      key: 'Question'
      isSingleton: false
      fields: 'id' | 'subject' | 'body' | 'status' | 'department' | 'askedBy' | 'tags' | 'answers'
      item: Item
      inputs: {
        where: QuestionWhereInput
        uniqueWhere: QuestionWhereUniqueInput
        create: QuestionCreateInput
        update: QuestionUpdateInput
        orderBy: QuestionOrderByInput
      }
      prisma: {
        create: ResolvedQuestionCreateInput
        update: ResolvedQuestionUpdateInput
      }
      all: __TypeInfo<Session>
    }
  }
  export type Answer<Session = any> = import('@keystone-6/core/types').ListConfig<Lists.Answer.TypeInfo<Session>>
  namespace Answer {
    export type Item = import('@prisma/client').Answer
    export type TypeInfo<Session = any> = {
      key: 'Answer'
      isSingleton: false
      fields: 'id' | 'body' | 'question' | 'answeredBy' | 'approved' | 'department'
      item: Item
      inputs: {
        where: AnswerWhereInput
        uniqueWhere: AnswerWhereUniqueInput
        create: AnswerCreateInput
        update: AnswerUpdateInput
        orderBy: AnswerOrderByInput
      }
      prisma: {
        create: ResolvedAnswerCreateInput
        update: ResolvedAnswerUpdateInput
      }
      all: __TypeInfo<Session>
    }
  }
}
export type Context<Session = any> = import('@keystone-6/core/types').KeystoneContext<TypeInfo<Session>>
export type Config<Session = any> = import('@keystone-6/core/types').KeystoneConfig<TypeInfo<Session>>

export type TypeInfo<Session = any> = {
  lists: {
    readonly Role: Lists.Role.TypeInfo<Session>
    readonly Department: Lists.Department.TypeInfo<Session>
    readonly Brand: Lists.Brand.TypeInfo<Session>
    readonly User: Lists.User.TypeInfo<Session>
    readonly Tag: Lists.Tag.TypeInfo<Session>
    readonly Asset: Lists.Asset.TypeInfo<Session>
    readonly Content: Lists.Content.TypeInfo<Session>
    readonly AuditLog: Lists.AuditLog.TypeInfo<Session>
    readonly AnalyticsEvent: Lists.AnalyticsEvent.TypeInfo<Session>
    readonly Question: Lists.Question.TypeInfo<Session>
    readonly Answer: Lists.Answer.TypeInfo<Session>
  }
  prisma: import('@prisma/client').PrismaClient
  session: Session
}

type __TypeInfo<Session = any> = TypeInfo<Session>

export type Lists<Session = any> = {
  [Key in keyof TypeInfo['lists']]?: import('@keystone-6/core/types').ListConfig<TypeInfo<Session>['lists'][Key]>
} & Record<string, import('@keystone-6/core/types').ListConfig<any>>

export {}
