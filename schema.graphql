# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type Role {
  id: ID!
  name: String
  canUseAdminUI: Boolean
  canManageUsers: Boolean
  canManageAssets: Boolean
  canApproveAssets: Boolean
  canManageBrands: Boolean
  canManageContent: Boolean
  canPublishContent: Boolean
  canViewAnalytics: Boolean
  canManageDepartments: Boolean
  canAnswerQuestions: Boolean
  canManageAllDepartments: Boolean
  users(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserWhereUniqueInput): [User!]
  usersCount(where: UserWhereInput! = {}): Int
}

input RoleWhereUniqueInput {
  id: ID
}

input RoleWhereInput {
  AND: [RoleWhereInput!]
  OR: [RoleWhereInput!]
  NOT: [RoleWhereInput!]
  id: IDFilter
  name: StringFilter
  canUseAdminUI: BooleanFilter
  canManageUsers: BooleanFilter
  canManageAssets: BooleanFilter
  canApproveAssets: BooleanFilter
  canManageBrands: BooleanFilter
  canManageContent: BooleanFilter
  canPublishContent: BooleanFilter
  canViewAnalytics: BooleanFilter
  canManageDepartments: BooleanFilter
  canAnswerQuestions: BooleanFilter
  canManageAllDepartments: BooleanFilter
  users: UserManyRelationFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input BooleanFilter {
  equals: Boolean
  not: BooleanFilter
}

input UserManyRelationFilter {
  every: UserWhereInput
  some: UserWhereInput
  none: UserWhereInput
}

input RoleOrderByInput {
  id: OrderDirection
  name: OrderDirection
  canUseAdminUI: OrderDirection
  canManageUsers: OrderDirection
  canManageAssets: OrderDirection
  canApproveAssets: OrderDirection
  canManageBrands: OrderDirection
  canManageContent: OrderDirection
  canPublishContent: OrderDirection
  canViewAnalytics: OrderDirection
  canManageDepartments: OrderDirection
  canAnswerQuestions: OrderDirection
  canManageAllDepartments: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input RoleUpdateInput {
  name: String
  canUseAdminUI: Boolean
  canManageUsers: Boolean
  canManageAssets: Boolean
  canApproveAssets: Boolean
  canManageBrands: Boolean
  canManageContent: Boolean
  canPublishContent: Boolean
  canViewAnalytics: Boolean
  canManageDepartments: Boolean
  canAnswerQuestions: Boolean
  canManageAllDepartments: Boolean
  users: UserRelateToManyForUpdateInput
}

input UserRelateToManyForUpdateInput {
  disconnect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  create: [UserCreateInput!]
  connect: [UserWhereUniqueInput!]
}

input RoleUpdateArgs {
  where: RoleWhereUniqueInput!
  data: RoleUpdateInput!
}

input RoleCreateInput {
  name: String
  canUseAdminUI: Boolean
  canManageUsers: Boolean
  canManageAssets: Boolean
  canApproveAssets: Boolean
  canManageBrands: Boolean
  canManageContent: Boolean
  canPublishContent: Boolean
  canViewAnalytics: Boolean
  canManageDepartments: Boolean
  canAnswerQuestions: Boolean
  canManageAllDepartments: Boolean
  users: UserRelateToManyForCreateInput
}

input UserRelateToManyForCreateInput {
  create: [UserCreateInput!]
  connect: [UserWhereUniqueInput!]
}

type Department {
  id: ID!
  name: String
  slug: String
  description: String
  members(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserWhereUniqueInput): [User!]
  membersCount(where: UserWhereInput! = {}): Int
  brands(where: BrandWhereInput! = {}, orderBy: [BrandOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: BrandWhereUniqueInput): [Brand!]
  brandsCount(where: BrandWhereInput! = {}): Int
}

input DepartmentWhereUniqueInput {
  id: ID
  slug: String
}

input DepartmentWhereInput {
  AND: [DepartmentWhereInput!]
  OR: [DepartmentWhereInput!]
  NOT: [DepartmentWhereInput!]
  id: IDFilter
  name: StringFilter
  slug: StringFilter
  description: StringFilter
  members: UserManyRelationFilter
  brands: BrandManyRelationFilter
}

input BrandManyRelationFilter {
  every: BrandWhereInput
  some: BrandWhereInput
  none: BrandWhereInput
}

input DepartmentOrderByInput {
  id: OrderDirection
  name: OrderDirection
  slug: OrderDirection
  description: OrderDirection
}

input DepartmentUpdateInput {
  name: String
  slug: String
  description: String
  members: UserRelateToManyForUpdateInput
  brands: BrandRelateToManyForUpdateInput
}

input BrandRelateToManyForUpdateInput {
  disconnect: [BrandWhereUniqueInput!]
  set: [BrandWhereUniqueInput!]
  create: [BrandCreateInput!]
  connect: [BrandWhereUniqueInput!]
}

input DepartmentUpdateArgs {
  where: DepartmentWhereUniqueInput!
  data: DepartmentUpdateInput!
}

input DepartmentCreateInput {
  name: String
  slug: String
  description: String
  members: UserRelateToManyForCreateInput
  brands: BrandRelateToManyForCreateInput
}

input BrandRelateToManyForCreateInput {
  create: [BrandCreateInput!]
  connect: [BrandWhereUniqueInput!]
}

type Brand {
  id: ID!
  name: String
  slug: String
  description: String
  complianceStatus: BrandComplianceStatusType
  guidelines: Brand_guidelines_Document
  department: Department
  owners(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserWhereUniqueInput): [User!]
  ownersCount(where: UserWhereInput! = {}): Int
  assets(where: AssetWhereInput! = {}, orderBy: [AssetOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: AssetWhereUniqueInput): [Asset!]
  assetsCount(where: AssetWhereInput! = {}): Int
  content(where: ContentWhereInput! = {}, orderBy: [ContentOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ContentWhereUniqueInput): [Content!]
  contentCount(where: ContentWhereInput! = {}): Int
}

enum BrandComplianceStatusType {
  compliant
  needs_review
  non_compliant
}

type Brand_guidelines_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input BrandWhereUniqueInput {
  id: ID
  slug: String
}

input BrandWhereInput {
  AND: [BrandWhereInput!]
  OR: [BrandWhereInput!]
  NOT: [BrandWhereInput!]
  id: IDFilter
  name: StringFilter
  slug: StringFilter
  description: StringFilter
  complianceStatus: BrandComplianceStatusTypeNullableFilter
  department: DepartmentWhereInput
  owners: UserManyRelationFilter
  assets: AssetManyRelationFilter
  content: ContentManyRelationFilter
}

input BrandComplianceStatusTypeNullableFilter {
  equals: BrandComplianceStatusType
  in: [BrandComplianceStatusType!]
  notIn: [BrandComplianceStatusType!]
  not: BrandComplianceStatusTypeNullableFilter
}

input AssetManyRelationFilter {
  every: AssetWhereInput
  some: AssetWhereInput
  none: AssetWhereInput
}

input ContentManyRelationFilter {
  every: ContentWhereInput
  some: ContentWhereInput
  none: ContentWhereInput
}

input BrandOrderByInput {
  id: OrderDirection
  name: OrderDirection
  slug: OrderDirection
  description: OrderDirection
  complianceStatus: OrderDirection
}

input BrandUpdateInput {
  name: String
  slug: String
  description: String
  complianceStatus: BrandComplianceStatusType
  guidelines: JSON
  department: DepartmentRelateToOneForUpdateInput
  owners: UserRelateToManyForUpdateInput
  assets: AssetRelateToManyForUpdateInput
  content: ContentRelateToManyForUpdateInput
}

input DepartmentRelateToOneForUpdateInput {
  create: DepartmentCreateInput
  connect: DepartmentWhereUniqueInput
  disconnect: Boolean
}

input AssetRelateToManyForUpdateInput {
  disconnect: [AssetWhereUniqueInput!]
  set: [AssetWhereUniqueInput!]
  create: [AssetCreateInput!]
  connect: [AssetWhereUniqueInput!]
}

input ContentRelateToManyForUpdateInput {
  disconnect: [ContentWhereUniqueInput!]
  set: [ContentWhereUniqueInput!]
  create: [ContentCreateInput!]
  connect: [ContentWhereUniqueInput!]
}

input BrandUpdateArgs {
  where: BrandWhereUniqueInput!
  data: BrandUpdateInput!
}

input BrandCreateInput {
  name: String
  slug: String
  description: String
  complianceStatus: BrandComplianceStatusType
  guidelines: JSON
  department: DepartmentRelateToOneForCreateInput
  owners: UserRelateToManyForCreateInput
  assets: AssetRelateToManyForCreateInput
  content: ContentRelateToManyForCreateInput
}

input DepartmentRelateToOneForCreateInput {
  create: DepartmentCreateInput
  connect: DepartmentWhereUniqueInput
}

input AssetRelateToManyForCreateInput {
  create: [AssetCreateInput!]
  connect: [AssetWhereUniqueInput!]
}

input ContentRelateToManyForCreateInput {
  create: [ContentCreateInput!]
  connect: [ContentWhereUniqueInput!]
}

type User {
  id: ID!
  name: String
  email: String
  password: PasswordState
  role: Role
  department: Department
}

type PasswordState {
  isSet: Boolean!
}

input UserWhereUniqueInput {
  id: ID
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  name: StringFilter
  email: StringFilter
  role: RoleWhereInput
  department: DepartmentWhereInput
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  role: RoleRelateToOneForUpdateInput
  department: DepartmentRelateToOneForUpdateInput
}

input RoleRelateToOneForUpdateInput {
  create: RoleCreateInput
  connect: RoleWhereUniqueInput
  disconnect: Boolean
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  name: String
  email: String
  password: String
  role: RoleRelateToOneForCreateInput
  department: DepartmentRelateToOneForCreateInput
}

input RoleRelateToOneForCreateInput {
  create: RoleCreateInput
  connect: RoleWhereUniqueInput
}

type Tag {
  id: ID!
  name: String
  assets(where: AssetWhereInput! = {}, orderBy: [AssetOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: AssetWhereUniqueInput): [Asset!]
  assetsCount(where: AssetWhereInput! = {}): Int
  content(where: ContentWhereInput! = {}, orderBy: [ContentOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ContentWhereUniqueInput): [Content!]
  contentCount(where: ContentWhereInput! = {}): Int
  questions(where: QuestionWhereInput! = {}, orderBy: [QuestionOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: QuestionWhereUniqueInput): [Question!]
  questionsCount(where: QuestionWhereInput! = {}): Int
}

input TagWhereUniqueInput {
  id: ID
}

input TagWhereInput {
  AND: [TagWhereInput!]
  OR: [TagWhereInput!]
  NOT: [TagWhereInput!]
  id: IDFilter
  name: StringFilter
  assets: AssetManyRelationFilter
  content: ContentManyRelationFilter
  questions: QuestionManyRelationFilter
}

input QuestionManyRelationFilter {
  every: QuestionWhereInput
  some: QuestionWhereInput
  none: QuestionWhereInput
}

input TagOrderByInput {
  id: OrderDirection
  name: OrderDirection
}

input TagUpdateInput {
  name: String
  assets: AssetRelateToManyForUpdateInput
  content: ContentRelateToManyForUpdateInput
  questions: QuestionRelateToManyForUpdateInput
}

input QuestionRelateToManyForUpdateInput {
  disconnect: [QuestionWhereUniqueInput!]
  set: [QuestionWhereUniqueInput!]
  create: [QuestionCreateInput!]
  connect: [QuestionWhereUniqueInput!]
}

input TagUpdateArgs {
  where: TagWhereUniqueInput!
  data: TagUpdateInput!
}

input TagCreateInput {
  name: String
  assets: AssetRelateToManyForCreateInput
  content: ContentRelateToManyForCreateInput
  questions: QuestionRelateToManyForCreateInput
}

input QuestionRelateToManyForCreateInput {
  create: [QuestionCreateInput!]
  connect: [QuestionWhereUniqueInput!]
}

type Asset {
  id: ID!
  title: String
  description: String
  status: AssetStatusType
  image: ImageFieldOutput
  file: FileFieldOutput
  brand: Brand
  department: Department
  uploadedBy: User
  approvedBy: User
  tags(where: TagWhereInput! = {}, orderBy: [TagOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TagWhereUniqueInput): [Tag!]
  tagsCount(where: TagWhereInput! = {}): Int
}

enum AssetStatusType {
  uploaded
  in_review
  approved
  archived
}

type ImageFieldOutput {
  id: ID!
  filesize: Int!
  width: Int!
  height: Int!
  extension: ImageExtension!
  url: String!
}

enum ImageExtension {
  jpg
  png
  webp
  gif
}

type FileFieldOutput {
  filename: String!
  filesize: Int!
  url: String!
}

input AssetWhereUniqueInput {
  id: ID
}

input AssetWhereInput {
  AND: [AssetWhereInput!]
  OR: [AssetWhereInput!]
  NOT: [AssetWhereInput!]
  id: IDFilter
  title: StringFilter
  description: StringFilter
  status: AssetStatusTypeNullableFilter
  brand: BrandWhereInput
  department: DepartmentWhereInput
  uploadedBy: UserWhereInput
  approvedBy: UserWhereInput
  tags: TagManyRelationFilter
}

input AssetStatusTypeNullableFilter {
  equals: AssetStatusType
  in: [AssetStatusType!]
  notIn: [AssetStatusType!]
  not: AssetStatusTypeNullableFilter
}

input TagManyRelationFilter {
  every: TagWhereInput
  some: TagWhereInput
  none: TagWhereInput
}

input AssetOrderByInput {
  id: OrderDirection
  title: OrderDirection
  description: OrderDirection
  status: OrderDirection
}

input AssetUpdateInput {
  title: String
  description: String
  status: AssetStatusType
  image: ImageFieldInput
  file: FileFieldInput
  brand: BrandRelateToOneForUpdateInput
  department: DepartmentRelateToOneForUpdateInput
  uploadedBy: UserRelateToOneForUpdateInput
  approvedBy: UserRelateToOneForUpdateInput
  tags: TagRelateToManyForUpdateInput
}

input ImageFieldInput {
  upload: Upload!
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

input FileFieldInput {
  upload: Upload!
}

input BrandRelateToOneForUpdateInput {
  create: BrandCreateInput
  connect: BrandWhereUniqueInput
  disconnect: Boolean
}

input UserRelateToOneForUpdateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
}

input TagRelateToManyForUpdateInput {
  disconnect: [TagWhereUniqueInput!]
  set: [TagWhereUniqueInput!]
  create: [TagCreateInput!]
  connect: [TagWhereUniqueInput!]
}

input AssetUpdateArgs {
  where: AssetWhereUniqueInput!
  data: AssetUpdateInput!
}

input AssetCreateInput {
  title: String
  description: String
  status: AssetStatusType
  image: ImageFieldInput
  file: FileFieldInput
  brand: BrandRelateToOneForCreateInput
  department: DepartmentRelateToOneForCreateInput
  uploadedBy: UserRelateToOneForCreateInput
  approvedBy: UserRelateToOneForCreateInput
  tags: TagRelateToManyForCreateInput
}

input BrandRelateToOneForCreateInput {
  create: BrandCreateInput
  connect: BrandWhereUniqueInput
}

input UserRelateToOneForCreateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

input TagRelateToManyForCreateInput {
  create: [TagCreateInput!]
  connect: [TagWhereUniqueInput!]
}

type Content {
  id: ID!
  title: String
  status: ContentStatusType
  body: Content_body_Document
  brand: Brand
  department: Department
  assets(where: AssetWhereInput! = {}, orderBy: [AssetOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: AssetWhereUniqueInput): [Asset!]
  assetsCount(where: AssetWhereInput! = {}): Int
  createdBy: User
  reviewers(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserWhereUniqueInput): [User!]
  reviewersCount(where: UserWhereInput! = {}): Int
  tags(where: TagWhereInput! = {}, orderBy: [TagOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TagWhereUniqueInput): [Tag!]
  tagsCount(where: TagWhereInput! = {}): Int
}

enum ContentStatusType {
  draft
  review
  approved
  published
}

type Content_body_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input ContentWhereUniqueInput {
  id: ID
}

input ContentWhereInput {
  AND: [ContentWhereInput!]
  OR: [ContentWhereInput!]
  NOT: [ContentWhereInput!]
  id: IDFilter
  title: StringFilter
  status: ContentStatusTypeNullableFilter
  brand: BrandWhereInput
  department: DepartmentWhereInput
  assets: AssetManyRelationFilter
  createdBy: UserWhereInput
  reviewers: UserManyRelationFilter
  tags: TagManyRelationFilter
}

input ContentStatusTypeNullableFilter {
  equals: ContentStatusType
  in: [ContentStatusType!]
  notIn: [ContentStatusType!]
  not: ContentStatusTypeNullableFilter
}

input ContentOrderByInput {
  id: OrderDirection
  title: OrderDirection
  status: OrderDirection
}

input ContentUpdateInput {
  title: String
  status: ContentStatusType
  body: JSON
  brand: BrandRelateToOneForUpdateInput
  department: DepartmentRelateToOneForUpdateInput
  assets: AssetRelateToManyForUpdateInput
  createdBy: UserRelateToOneForUpdateInput
  reviewers: UserRelateToManyForUpdateInput
  tags: TagRelateToManyForUpdateInput
}

input ContentUpdateArgs {
  where: ContentWhereUniqueInput!
  data: ContentUpdateInput!
}

input ContentCreateInput {
  title: String
  status: ContentStatusType
  body: JSON
  brand: BrandRelateToOneForCreateInput
  department: DepartmentRelateToOneForCreateInput
  assets: AssetRelateToManyForCreateInput
  createdBy: UserRelateToOneForCreateInput
  reviewers: UserRelateToManyForCreateInput
  tags: TagRelateToManyForCreateInput
}

type AuditLog {
  id: ID!
  action: String
  entityType: String
  entityId: String
  timestamp: DateTime
  meta: JSON
  user: User
  department: Department
}

scalar DateTime @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input AuditLogWhereUniqueInput {
  id: ID
}

input AuditLogWhereInput {
  AND: [AuditLogWhereInput!]
  OR: [AuditLogWhereInput!]
  NOT: [AuditLogWhereInput!]
  id: IDFilter
  action: StringFilter
  entityType: StringFilter
  entityId: StringFilter
  timestamp: DateTimeNullableFilter
  user: UserWhereInput
  department: DepartmentWhereInput
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input AuditLogOrderByInput {
  id: OrderDirection
  action: OrderDirection
  entityType: OrderDirection
  entityId: OrderDirection
  timestamp: OrderDirection
}

input AuditLogUpdateInput {
  action: String
  entityType: String
  entityId: String
  timestamp: DateTime
  meta: JSON
  user: UserRelateToOneForUpdateInput
  department: DepartmentRelateToOneForUpdateInput
}

input AuditLogUpdateArgs {
  where: AuditLogWhereUniqueInput!
  data: AuditLogUpdateInput!
}

input AuditLogCreateInput {
  action: String
  entityType: String
  entityId: String
  timestamp: DateTime
  meta: JSON
  user: UserRelateToOneForCreateInput
  department: DepartmentRelateToOneForCreateInput
}

type AnalyticsEvent {
  id: ID!
  eventType: AnalyticsEventEventTypeType
  timestamp: DateTime
  user: User
  entityType: String
  entityId: String
  meta: JSON
  department: Department
}

enum AnalyticsEventEventTypeType {
  view
  download
  share
  search
}

input AnalyticsEventWhereUniqueInput {
  id: ID
}

input AnalyticsEventWhereInput {
  AND: [AnalyticsEventWhereInput!]
  OR: [AnalyticsEventWhereInput!]
  NOT: [AnalyticsEventWhereInput!]
  id: IDFilter
  eventType: AnalyticsEventEventTypeTypeNullableFilter
  timestamp: DateTimeNullableFilter
  user: UserWhereInput
  entityType: StringFilter
  entityId: StringFilter
  department: DepartmentWhereInput
}

input AnalyticsEventEventTypeTypeNullableFilter {
  equals: AnalyticsEventEventTypeType
  in: [AnalyticsEventEventTypeType!]
  notIn: [AnalyticsEventEventTypeType!]
  not: AnalyticsEventEventTypeTypeNullableFilter
}

input AnalyticsEventOrderByInput {
  id: OrderDirection
  eventType: OrderDirection
  timestamp: OrderDirection
  entityType: OrderDirection
  entityId: OrderDirection
}

input AnalyticsEventUpdateInput {
  eventType: AnalyticsEventEventTypeType
  timestamp: DateTime
  user: UserRelateToOneForUpdateInput
  entityType: String
  entityId: String
  meta: JSON
  department: DepartmentRelateToOneForUpdateInput
}

input AnalyticsEventUpdateArgs {
  where: AnalyticsEventWhereUniqueInput!
  data: AnalyticsEventUpdateInput!
}

input AnalyticsEventCreateInput {
  eventType: AnalyticsEventEventTypeType
  timestamp: DateTime
  user: UserRelateToOneForCreateInput
  entityType: String
  entityId: String
  meta: JSON
  department: DepartmentRelateToOneForCreateInput
}

type Question {
  id: ID!
  subject: String
  body: Question_body_Document
  status: QuestionStatusType
  askedAt: DateTime
  roadmapType: QuestionRoadmapTypeType
  department: Department
  askedBy: User
  tags(where: TagWhereInput! = {}, orderBy: [TagOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TagWhereUniqueInput): [Tag!]
  tagsCount(where: TagWhereInput! = {}): Int
}

type Question_body_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

enum QuestionStatusType {
  new
  triage
  answered
  closed
}

enum QuestionRoadmapTypeType {
  none
  blocker
  fyi
  in_progress
}

input QuestionWhereUniqueInput {
  id: ID
}

input QuestionWhereInput {
  AND: [QuestionWhereInput!]
  OR: [QuestionWhereInput!]
  NOT: [QuestionWhereInput!]
  id: IDFilter
  subject: StringFilter
  status: QuestionStatusTypeNullableFilter
  askedAt: DateTimeNullableFilter
  roadmapType: QuestionRoadmapTypeTypeNullableFilter
  department: DepartmentWhereInput
  askedBy: UserWhereInput
  tags: TagManyRelationFilter
}

input QuestionStatusTypeNullableFilter {
  equals: QuestionStatusType
  in: [QuestionStatusType!]
  notIn: [QuestionStatusType!]
  not: QuestionStatusTypeNullableFilter
}

input QuestionRoadmapTypeTypeNullableFilter {
  equals: QuestionRoadmapTypeType
  in: [QuestionRoadmapTypeType!]
  notIn: [QuestionRoadmapTypeType!]
  not: QuestionRoadmapTypeTypeNullableFilter
}

input QuestionOrderByInput {
  id: OrderDirection
  subject: OrderDirection
  status: OrderDirection
  askedAt: OrderDirection
  roadmapType: OrderDirection
}

input QuestionUpdateInput {
  subject: String
  body: JSON
  status: QuestionStatusType
  askedAt: DateTime
  roadmapType: QuestionRoadmapTypeType
  department: DepartmentRelateToOneForUpdateInput
  askedBy: UserRelateToOneForUpdateInput
  tags: TagRelateToManyForUpdateInput
}

input QuestionUpdateArgs {
  where: QuestionWhereUniqueInput!
  data: QuestionUpdateInput!
}

input QuestionCreateInput {
  subject: String
  body: JSON
  status: QuestionStatusType
  askedAt: DateTime
  roadmapType: QuestionRoadmapTypeType
  department: DepartmentRelateToOneForCreateInput
  askedBy: UserRelateToOneForCreateInput
  tags: TagRelateToManyForCreateInput
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Mutation {
  createRole(data: RoleCreateInput!): Role
  createRoles(data: [RoleCreateInput!]!): [Role]
  updateRole(where: RoleWhereUniqueInput!, data: RoleUpdateInput!): Role
  updateRoles(data: [RoleUpdateArgs!]!): [Role]
  deleteRole(where: RoleWhereUniqueInput!): Role
  deleteRoles(where: [RoleWhereUniqueInput!]!): [Role]
  createDepartment(data: DepartmentCreateInput!): Department
  createDepartments(data: [DepartmentCreateInput!]!): [Department]
  updateDepartment(where: DepartmentWhereUniqueInput!, data: DepartmentUpdateInput!): Department
  updateDepartments(data: [DepartmentUpdateArgs!]!): [Department]
  deleteDepartment(where: DepartmentWhereUniqueInput!): Department
  deleteDepartments(where: [DepartmentWhereUniqueInput!]!): [Department]
  createBrand(data: BrandCreateInput!): Brand
  createBrands(data: [BrandCreateInput!]!): [Brand]
  updateBrand(where: BrandWhereUniqueInput!, data: BrandUpdateInput!): Brand
  updateBrands(data: [BrandUpdateArgs!]!): [Brand]
  deleteBrand(where: BrandWhereUniqueInput!): Brand
  deleteBrands(where: [BrandWhereUniqueInput!]!): [Brand]
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createTag(data: TagCreateInput!): Tag
  createTags(data: [TagCreateInput!]!): [Tag]
  updateTag(where: TagWhereUniqueInput!, data: TagUpdateInput!): Tag
  updateTags(data: [TagUpdateArgs!]!): [Tag]
  deleteTag(where: TagWhereUniqueInput!): Tag
  deleteTags(where: [TagWhereUniqueInput!]!): [Tag]
  createAsset(data: AssetCreateInput!): Asset
  createAssets(data: [AssetCreateInput!]!): [Asset]
  updateAsset(where: AssetWhereUniqueInput!, data: AssetUpdateInput!): Asset
  updateAssets(data: [AssetUpdateArgs!]!): [Asset]
  deleteAsset(where: AssetWhereUniqueInput!): Asset
  deleteAssets(where: [AssetWhereUniqueInput!]!): [Asset]
  createContent(data: ContentCreateInput!): Content
  createContents(data: [ContentCreateInput!]!): [Content]
  updateContent(where: ContentWhereUniqueInput!, data: ContentUpdateInput!): Content
  updateContents(data: [ContentUpdateArgs!]!): [Content]
  deleteContent(where: ContentWhereUniqueInput!): Content
  deleteContents(where: [ContentWhereUniqueInput!]!): [Content]
  createAuditLog(data: AuditLogCreateInput!): AuditLog
  createAuditLogs(data: [AuditLogCreateInput!]!): [AuditLog]
  updateAuditLog(where: AuditLogWhereUniqueInput!, data: AuditLogUpdateInput!): AuditLog
  updateAuditLogs(data: [AuditLogUpdateArgs!]!): [AuditLog]
  deleteAuditLog(where: AuditLogWhereUniqueInput!): AuditLog
  deleteAuditLogs(where: [AuditLogWhereUniqueInput!]!): [AuditLog]
  createAnalyticsEvent(data: AnalyticsEventCreateInput!): AnalyticsEvent
  createAnalyticsEvents(data: [AnalyticsEventCreateInput!]!): [AnalyticsEvent]
  updateAnalyticsEvent(where: AnalyticsEventWhereUniqueInput!, data: AnalyticsEventUpdateInput!): AnalyticsEvent
  updateAnalyticsEvents(data: [AnalyticsEventUpdateArgs!]!): [AnalyticsEvent]
  deleteAnalyticsEvent(where: AnalyticsEventWhereUniqueInput!): AnalyticsEvent
  deleteAnalyticsEvents(where: [AnalyticsEventWhereUniqueInput!]!): [AnalyticsEvent]
  createQuestion(data: QuestionCreateInput!): Question
  createQuestions(data: [QuestionCreateInput!]!): [Question]
  updateQuestion(where: QuestionWhereUniqueInput!, data: QuestionUpdateInput!): Question
  updateQuestions(data: [QuestionUpdateArgs!]!): [Question]
  deleteQuestion(where: QuestionWhereUniqueInput!): Question
  deleteQuestions(where: [QuestionWhereUniqueInput!]!): [Question]
  endSession: Boolean!
  authenticateUserWithPassword(email: String!, password: String!): UserAuthenticationWithPasswordResult
  createInitialUser(data: CreateInitialUserInput!): UserAuthenticationWithPasswordSuccess!
}

union UserAuthenticationWithPasswordResult = UserAuthenticationWithPasswordSuccess | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialUserInput {
  name: String
  email: String
  password: String
}

type Query {
  role(where: RoleWhereUniqueInput!): Role
  roles(where: RoleWhereInput! = {}, orderBy: [RoleOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: RoleWhereUniqueInput): [Role!]
  rolesCount(where: RoleWhereInput! = {}): Int
  department(where: DepartmentWhereUniqueInput!): Department
  departments(where: DepartmentWhereInput! = {}, orderBy: [DepartmentOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: DepartmentWhereUniqueInput): [Department!]
  departmentsCount(where: DepartmentWhereInput! = {}): Int
  brand(where: BrandWhereUniqueInput!): Brand
  brands(where: BrandWhereInput! = {}, orderBy: [BrandOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: BrandWhereUniqueInput): [Brand!]
  brandsCount(where: BrandWhereInput! = {}): Int
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserWhereUniqueInput): [User!]
  usersCount(where: UserWhereInput! = {}): Int
  tag(where: TagWhereUniqueInput!): Tag
  tags(where: TagWhereInput! = {}, orderBy: [TagOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TagWhereUniqueInput): [Tag!]
  tagsCount(where: TagWhereInput! = {}): Int
  asset(where: AssetWhereUniqueInput!): Asset
  assets(where: AssetWhereInput! = {}, orderBy: [AssetOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: AssetWhereUniqueInput): [Asset!]
  assetsCount(where: AssetWhereInput! = {}): Int
  content(where: ContentWhereUniqueInput!): Content
  contents(where: ContentWhereInput! = {}, orderBy: [ContentOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ContentWhereUniqueInput): [Content!]
  contentsCount(where: ContentWhereInput! = {}): Int
  auditLog(where: AuditLogWhereUniqueInput!): AuditLog
  auditLogs(where: AuditLogWhereInput! = {}, orderBy: [AuditLogOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: AuditLogWhereUniqueInput): [AuditLog!]
  auditLogsCount(where: AuditLogWhereInput! = {}): Int
  analyticsEvent(where: AnalyticsEventWhereUniqueInput!): AnalyticsEvent
  analyticsEvents(where: AnalyticsEventWhereInput! = {}, orderBy: [AnalyticsEventOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: AnalyticsEventWhereUniqueInput): [AnalyticsEvent!]
  analyticsEventsCount(where: AnalyticsEventWhereInput! = {}): Int
  question(where: QuestionWhereUniqueInput!): Question
  questions(where: QuestionWhereInput! = {}, orderBy: [QuestionOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: QuestionWhereUniqueInput): [Question!]
  questionsCount(where: QuestionWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
}

union AuthenticatedItem = User

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  groups: [KeystoneAdminUIFieldGroupMeta!]!
  graphql: KeystoneAdminUIGraphQL!
  initialColumns: [String!]!
  initialSearchFields: [String!]!
  initialSort: KeystoneAdminUISort
  isSingleton: Boolean!
  hideCreate: Boolean!
  hideDelete: Boolean!
  isHidden: Boolean!
  itemQueryName: String!
  listQueryName: String!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  description: String
  isOrderable: Boolean!
  isFilterable: Boolean!
  isNonNull: [KeystoneAdminUIFieldMetaIsNonNull!]
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

enum KeystoneAdminUIFieldMetaIsNonNull {
  read
  create
  update
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
  fieldPosition: KeystoneAdminUIFieldMetaItemViewFieldPosition
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum KeystoneAdminUIFieldMetaItemViewFieldPosition {
  form
  sidebar
}

enum QueryMode {
  default
  insensitive
}

type KeystoneAdminUIFieldGroupMeta {
  label: String!
  description: String
  fields: [KeystoneAdminUIFieldMeta!]!
}

type KeystoneAdminUIGraphQL {
  names: KeystoneAdminUIGraphQLNames!
}

type KeystoneAdminUIGraphQLNames {
  outputTypeName: String!
  whereInputName: String!
  whereUniqueInputName: String!
  createInputName: String!
  createMutationName: String!
  createManyMutationName: String!
  relateToOneForCreateInputName: String!
  relateToManyForCreateInputName: String!
  itemQueryName: String!
  listOrderName: String!
  listQueryCountName: String!
  listQueryName: String!
  updateInputName: String!
  updateMutationName: String!
  updateManyInputName: String!
  updateManyMutationName: String!
  relateToOneForUpdateInputName: String!
  relateToManyForUpdateInputName: String!
  deleteMutationName: String!
  deleteManyMutationName: String!
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
