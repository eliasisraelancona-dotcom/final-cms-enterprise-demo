{
  "version": 3,
  "sources": ["../keystone.ts", "../schema.ts", "../access.ts", "../seed-data.ts"],
  "sourcesContent": ["import { config } from '@keystone-6/core'\nimport { statelessSessions } from '@keystone-6/core/session'\nimport { createAuth } from '@keystone-6/auth'\nimport bytes from 'bytes'\n// express is not required; Keystone serves storage routes automatically\n\nimport { lists } from './schema'\nimport { seedDemoData } from './seed-data'\n\nconst session = statelessSessions()\n\nconst { withAuth } = createAuth({\n  listKey: 'User',\n  identityField: 'email',\n  secretField: 'password',\n  initFirstItem: {\n    fields: ['name', 'email', 'password'],\n    itemData: {\n      // Create an Admin role on first run so the initial user has access\n      role: {\n        create: {\n          name: 'Admin',\n          canUseAdminUI: true,\n          canManageUsers: true,\n          canManageAssets: true,\n          canApproveAssets: true,\n          canManageBrands: true,\n          canManageContent: true,\n          canPublishContent: true,\n          canViewAnalytics: true,\n          canManageDepartments: true,\n          canAnswerQuestions: true,\n          canManageAllDepartments: true,\n        },\n      },\n    },\n  },\n  sessionData: `\n    name\n    email\n    department { id name }\n    role {\n      id\n      name\n      canUseAdminUI\n      canManageUsers\n      canManageAssets\n      canApproveAssets\n      canManageBrands\n      canManageContent\n      canPublishContent\n      canViewAnalytics\n      canManageDepartments\n      canAnswerQuestions\n      canManageAllDepartments\n    }\n  `,\n})\n\nexport default withAuth(\n  config({\n    db: {\n      provider: 'sqlite',\n      url: process.env.DATABASE_URL || 'file:./keystone.db',\n      // Seed demo data on first run; safe to keep enabled. Use sudo to bypass access checks during seeding.\n      onConnect: async (context: any) => {\n        await seedDemoData(context.sudo())\n      },\n    },\n    lists,\n    storage: {\n      images: {\n        kind: 'local',\n        type: 'image',\n        storagePath: 'public/images',\n        serverRoute: {\n          path: '/images',\n        },\n        generateUrl: path => `/images${path}`,\n      },\n      files: {\n        kind: 'local',\n        type: 'file',\n        storagePath: 'public/files',\n        serverRoute: {\n          path: '/files',\n        },\n        generateUrl: path => `/files${path}`,\n      },\n    },\n    server: {\n      maxFileSize: bytes('40Mb')!,\n      // Keystone will serve local storage at serverRoute paths; no manual static routes required\n    },\n    ui: {\n      isAccessAllowed: ({ session }) => Boolean(session?.data.role?.canUseAdminUI),\n    },\n    session,\n  })\n)\n\n", "import { list } from '@keystone-6/core'\nimport { allowAll } from '@keystone-6/core/access'\nimport {\n  checkbox,\n  json,\n  password,\n  relationship,\n  select,\n  text,\n  timestamp,\n  image,\n  file,\n} from '@keystone-6/core/fields'\nimport { document } from '@keystone-6/fields-document'\n\nimport type { Lists } from '.keystone/types'\nimport { isSignedIn, permissions, departmentFilter } from './access'\n\nexport const lists = {\n  Role: list({\n    access: {\n      operation: {\n        query: permissions.canManageUsers,\n        create: permissions.canManageUsers,\n        update: permissions.canManageUsers,\n        delete: permissions.canManageUsers,\n      },\n    },\n    fields: {\n      name: text({ validation: { isRequired: true } }),\n      canUseAdminUI: checkbox({ defaultValue: true }),\n      canManageUsers: checkbox({ defaultValue: false }),\n      canManageAssets: checkbox({ defaultValue: true }),\n      canApproveAssets: checkbox({ defaultValue: false }),\n      canManageBrands: checkbox({ defaultValue: false }),\n      canManageContent: checkbox({ defaultValue: true }),\n      canPublishContent: checkbox({ defaultValue: false }),\n      canViewAnalytics: checkbox({ defaultValue: false }),\n      canManageDepartments: checkbox({ defaultValue: false }),\n      canAnswerQuestions: checkbox({ defaultValue: false }),\n      canManageAllDepartments: checkbox({ defaultValue: false }),\n      users: relationship({ ref: 'User.role', many: true }),\n    },\n  }),\n\n  Department: list({\n    access: allowAll,\n    fields: {\n      name: text({ validation: { isRequired: true } }),\n      slug: text({ validation: { isRequired: true }, isIndexed: 'unique' }),\n      description: text({ ui: { displayMode: 'textarea' } }),\n      members: relationship({ ref: 'User.department', many: true }),\n      brands: relationship({ ref: 'Brand.department', many: true }),\n    },\n  }),\n\n  Brand: list({\n    access: {\n      operation: {\n        query: isSignedIn,\n        create: permissions.canManageBrands,\n        update: permissions.canManageBrands,\n        delete: permissions.canManageBrands,\n      },\n      filter: {\n        query: departmentFilter,\n      },\n    },\n    fields: {\n      name: text({ validation: { isRequired: true } }),\n      slug: text({ validation: { isRequired: true }, isIndexed: 'unique' }),\n      description: text({ ui: { displayMode: 'textarea' } }),\n      complianceStatus: select({\n        type: 'enum',\n        options: [\n          { label: 'Compliant', value: 'compliant' },\n          { label: 'Needs Review', value: 'needs_review' },\n          { label: 'Non-Compliant', value: 'non_compliant' },\n        ],\n        defaultValue: 'needs_review',\n      }),\n      guidelines: document({ formatting: true, links: true }),\n      department: relationship({ ref: 'Department.brands' }),\n      owners: relationship({ ref: 'User', many: true }),\n      assets: relationship({ ref: 'Asset.brand', many: true }),\n      content: relationship({ ref: 'Content.brand', many: true }),\n    },\n  }),\n\n  User: list({\n    access: {\n      operation: {\n        query: isSignedIn,\n        create: permissions.canManageUsers,\n        update: permissions.canManageUsers,\n        delete: permissions.canManageUsers,\n      },\n      filter: {\n        query: ({ session }) => {\n          if (!session) return false\n          if (permissions.canManageAllDepartments({ session })) return true\n          if (!session.data.department?.id) return false\n          return {\n            OR: [\n              { id: { equals: session.itemId } },\n              { department: { id: { equals: session.data.department.id } } },\n            ],\n          }\n        },\n      },\n    },\n    fields: {\n      name: text({ validation: { isRequired: true } }),\n      email: text({ validation: { isRequired: true }, isIndexed: 'unique' }),\n      password: password({ validation: { isRequired: true } }),\n      role: relationship({ ref: 'Role.users' }),\n      department: relationship({ ref: 'Department.members' }),\n    },\n    ui: {\n      listView: {\n        initialColumns: ['name', 'email', 'role', 'department'],\n      },\n    },\n  }),\n\n  Tag: list({\n    access: allowAll,\n    fields: {\n      name: text({ validation: { isRequired: true } }),\n      assets: relationship({ ref: 'Asset.tags', many: true }),\n      content: relationship({ ref: 'Content.tags', many: true }),\n      questions: relationship({ ref: 'Question.tags', many: true }),\n    },\n  }),\n\n  Asset: list({\n    access: {\n      operation: {\n        query: isSignedIn,\n        create: permissions.canManageAssets,\n        update: permissions.canManageAssets,\n        delete: permissions.canManageAssets,\n      },\n      filter: { query: departmentFilter },\n    },\n    fields: {\n      title: text({ validation: { isRequired: true } }),\n      description: text({ ui: { displayMode: 'textarea' } }),\n      status: select({\n        type: 'enum',\n        options: [\n          { label: 'Uploaded', value: 'uploaded' },\n          { label: 'In Review', value: 'in_review' },\n          { label: 'Approved', value: 'approved' },\n          { label: 'Archived', value: 'archived' },\n        ],\n        defaultValue: 'uploaded',\n      }),\n      image: image({ storage: 'images' }),\n      file: file({ storage: 'files' }),\n      brand: relationship({ ref: 'Brand.assets' }),\n      department: relationship({ ref: 'Department' }),\n      uploadedBy: relationship({ ref: 'User' }),\n      approvedBy: relationship({ ref: 'User' }),\n      tags: relationship({ ref: 'Tag.assets', many: true }),\n    },\n  }),\n\n  Content: list({\n    access: {\n      operation: {\n        query: isSignedIn,\n        create: permissions.canManageContent,\n        update: permissions.canManageContent,\n        delete: permissions.canManageContent,\n      },\n      filter: { query: departmentFilter },\n    },\n    fields: {\n      title: text({ validation: { isRequired: true } }),\n      status: select({\n        type: 'enum',\n        options: [\n          { label: 'Draft', value: 'draft' },\n          { label: 'Review', value: 'review' },\n          { label: 'Approved', value: 'approved' },\n          { label: 'Published', value: 'published' },\n        ],\n        defaultValue: 'draft',\n      }),\n      body: document({ formatting: true, links: true, dividers: true }),\n      brand: relationship({ ref: 'Brand.content' }),\n      department: relationship({ ref: 'Department' }),\n      assets: relationship({ ref: 'Asset', many: true }),\n      createdBy: relationship({ ref: 'User' }),\n      reviewers: relationship({ ref: 'User', many: true }),\n      tags: relationship({ ref: 'Tag.content', many: true }),\n    },\n    ui: { listView: { initialColumns: ['title', 'status', 'brand', 'department'] } },\n  }),\n\n  AuditLog: list({\n    access: {\n      operation: {\n        query: ({ session }) =>\n          Boolean(session && (permissions.canManageUsers({ session }) || permissions.canViewAnalytics({ session }))),\n        create: permissions.canManageUsers,\n        update: permissions.canManageUsers,\n        delete: permissions.canManageUsers,\n      },\n    },\n    fields: {\n      action: text({ validation: { isRequired: true } }),\n      entityType: text({ validation: { isRequired: true } }),\n      entityId: text(),\n      timestamp: timestamp({ defaultValue: { kind: 'now' } }),\n      meta: json(),\n      user: relationship({ ref: 'User' }),\n      department: relationship({ ref: 'Department' }),\n    },\n  }),\n\n  AnalyticsEvent: list({\n    access: {\n      operation: {\n        query: permissions.canViewAnalytics,\n        create: allowAll,\n        update: permissions.canViewAnalytics,\n        delete: permissions.canViewAnalytics,\n      },\n    },\n    fields: {\n      eventType: select({\n        type: 'enum',\n        options: [\n          { label: 'View', value: 'view' },\n          { label: 'Download', value: 'download' },\n          { label: 'Share', value: 'share' },\n          { label: 'Search', value: 'search' },\n        ],\n        defaultValue: 'view',\n      }),\n      timestamp: timestamp({ defaultValue: { kind: 'now' } }),\n      user: relationship({ ref: 'User' }),\n      entityType: text(),\n      entityId: text(),\n      meta: json(),\n      department: relationship({ ref: 'Department' }),\n    },\n  }),\n\n  Question: list({\n    access: {\n      operation: {\n        query: isSignedIn,\n        create: isSignedIn,\n        update: permissions.canAnswerQuestions,\n        delete: permissions.canAnswerQuestions,\n      },\n      filter: { query: departmentFilter },\n    },\n    fields: {\n      subject: text({ validation: { isRequired: true } }),\n      body: document({ formatting: true, links: true }),\n      status: select({\n        type: 'enum',\n        options: [\n          { label: 'New', value: 'new' },\n          { label: 'Triage', value: 'triage' },\n          { label: 'Answered', value: 'answered' },\n          { label: 'Closed', value: 'closed' },\n        ],\n        defaultValue: 'new',\n      }),\n      // When was the question asked (set at create time via hook to avoid SQLite default limitation)\n      askedAt: timestamp(),\n      // Roadmap classification: none | blocker | fyi\n      roadmapType: select({\n        type: 'enum',\n        options: [\n          { label: 'None', value: 'none' },\n          { label: 'Blocker', value: 'blocker' },\n          { label: 'FYI', value: 'fyi' },\n        ],\n        defaultValue: 'none',\n      }),\n      department: relationship({ ref: 'Department' }),\n      askedBy: relationship({ ref: 'User' }),\n      tags: relationship({ ref: 'Tag.questions', many: true }),\n    },\n    ui: {\n      listView: {\n        initialColumns: ['subject', 'status', 'askedAt', 'roadmapType'],\n      },\n      labelField: 'subject',\n    },\n    hooks: {\n      resolveInput: async ({ operation, resolvedData }) => {\n        const data = resolvedData as any\n        if (operation === 'create' && !data.askedAt) {\n          data.askedAt = new Date()\n        }\n        return data\n      },\n    },\n  }),\n} satisfies Lists\n\n", "import type { BaseListTypeInfo } from '@keystone-6/core/types'\nimport type { Session } from '.keystone/types'\n\nexport type AccessArgs = {\n  session?: Session\n}\n\nexport const isSignedIn = ({ session }: AccessArgs) => Boolean(session)\n\nexport function hasPermission(\n  permission: keyof NonNullable<Session>['data']['role']\n): (args: AccessArgs) => boolean {\n  return ({ session }: AccessArgs) => Boolean(session?.data.role?.[permission])\n}\n\nexport const permissions = {\n  canUseAdminUI: hasPermission('canUseAdminUI'),\n  canManageUsers: hasPermission('canManageUsers'),\n  canManageAssets: hasPermission('canManageAssets'),\n  canApproveAssets: hasPermission('canApproveAssets'),\n  canManageBrands: hasPermission('canManageBrands'),\n  canManageContent: hasPermission('canManageContent'),\n  canPublishContent: hasPermission('canPublishContent'),\n  canViewAnalytics: hasPermission('canViewAnalytics'),\n  canManageDepartments: hasPermission('canManageDepartments'),\n  canAnswerQuestions: hasPermission('canAnswerQuestions'),\n  canManageAllDepartments: hasPermission('canManageAllDepartments'),\n}\n\nexport function departmentFilter<T extends BaseListTypeInfo['fields']>({\n  session,\n}: AccessArgs): Record<string, unknown> | boolean {\n  if (!session) return false\n  if (permissions.canManageAllDepartments({ session })) return true\n  if (!session.data.department?.id) return false\n  return { department: { id: { equals: session.data.department.id } } }\n}\n\n", "// Seeds rich demo data on first run. Safe to re-run (no duplicate users).\nasync function ensureSuperAdmin(context: any) {\n  const email = 'eliasisrael@adobe.com'\n  const existing = await context.db.User.findMany({\n    where: { email: { equals: email } },\n    take: 1,\n  })\n  if (existing.length > 0) return\n\n  let adminRole = (\n    await context.db.Role.findMany({ where: { name: { equals: 'Admin' } }, take: 1 })\n  )[0]\n\n  if (!adminRole) {\n    adminRole = await context.db.Role.createOne({\n      data: {\n        name: 'Admin',\n        canUseAdminUI: true,\n        canManageUsers: true,\n        canManageAssets: true,\n        canApproveAssets: true,\n        canManageBrands: true,\n        canManageContent: true,\n        canPublishContent: true,\n        canViewAnalytics: true,\n        canManageDepartments: true,\n        canAnswerQuestions: true,\n        canManageAllDepartments: true,\n      },\n    })\n  }\n\n  await context.db.User.createOne({\n    data: {\n      name: 'Elias Israel',\n      email,\n      password: '12345678',\n      role: { connect: { id: adminRole.id } },\n    },\n  })\n}\n\nexport async function seedDemoData(context: any) {\n  // If departments already exist, only ensure the super admin user exists\n  const existingDepartments = await context.db.Department.count()\n  if (existingDepartments > 0) {\n    await ensureSuperAdmin(context)\n    return\n  }\n\n  // Departments\n  const departments = await Promise.all(\n    [\n      { name: 'Marketing', slug: 'marketing', description: 'Marketing department' },\n      { name: 'Sales', slug: 'sales', description: 'Sales department' },\n      { name: 'Engineering', slug: 'engineering', description: 'Engineering department' },\n      { name: 'Legal', slug: 'legal', description: 'Legal & compliance' },\n    ].map((d: { name: string; slug: string; description: string }) =>\n      context.db.Department.createOne({ data: d })\n    )\n  )\n\n  const deptBySlug = Object.fromEntries(departments.map(d => [d.slug!, d]))\n\n  // Roles (7)\n  const roles = await Promise.all(\n    [\n      {\n        name: 'Admin',\n        canUseAdminUI: true,\n        canManageUsers: true,\n        canManageAssets: true,\n        canApproveAssets: true,\n        canManageBrands: true,\n        canManageContent: true,\n        canPublishContent: true,\n        canViewAnalytics: true,\n        canManageDepartments: true,\n        canAnswerQuestions: true,\n        canManageAllDepartments: true,\n      },\n      {\n        name: 'Content Manager',\n        canUseAdminUI: true,\n        canManageUsers: false,\n        canManageAssets: true,\n        canApproveAssets: true,\n        canManageBrands: true,\n        canManageContent: true,\n        canPublishContent: true,\n        canViewAnalytics: true,\n        canManageDepartments: false,\n        canAnswerQuestions: true,\n        canManageAllDepartments: false,\n      },\n      {\n        name: 'Creative',\n        canUseAdminUI: true,\n        canManageUsers: false,\n        canManageAssets: true,\n        canApproveAssets: false,\n        canManageBrands: false,\n        canManageContent: true,\n        canPublishContent: false,\n        canViewAnalytics: false,\n        canManageDepartments: false,\n        canAnswerQuestions: false,\n        canManageAllDepartments: false,\n      },\n      {\n        name: 'Viewer',\n        canUseAdminUI: true,\n        canManageUsers: false,\n        canManageAssets: false,\n        canApproveAssets: false,\n        canManageBrands: false,\n        canManageContent: false,\n        canPublishContent: false,\n        canViewAnalytics: false,\n        canManageDepartments: false,\n        canAnswerQuestions: false,\n        canManageAllDepartments: false,\n      },\n      {\n        name: 'Compliance',\n        canUseAdminUI: true,\n        canManageUsers: false,\n        canManageAssets: false,\n        canApproveAssets: true,\n        canManageBrands: false,\n        canManageContent: false,\n        canPublishContent: false,\n        canViewAnalytics: true,\n        canManageDepartments: false,\n        canAnswerQuestions: true,\n        canManageAllDepartments: false,\n      },\n      {\n        name: 'Brand Manager',\n        canUseAdminUI: true,\n        canManageUsers: false,\n        canManageAssets: true,\n        canApproveAssets: true,\n        canManageBrands: true,\n        canManageContent: true,\n        canPublishContent: true,\n        canViewAnalytics: true,\n        canManageDepartments: false,\n        canAnswerQuestions: true,\n        canManageAllDepartments: false,\n      },\n      {\n        name: 'Analyst',\n        canUseAdminUI: true,\n        canManageUsers: false,\n        canManageAssets: false,\n        canApproveAssets: false,\n        canManageBrands: false,\n        canManageContent: false,\n        canPublishContent: false,\n        canViewAnalytics: true,\n        canManageDepartments: false,\n        canAnswerQuestions: false,\n        canManageAllDepartments: false,\n      },\n    ].map((r: any) => context.db.Role.createOne({ data: r }))\n  )\n\n  const roleByName = Object.fromEntries(roles.map(r => [r.name!, r]))\n\n  // Users\n  const users = await Promise.all(\n    [\n      {\n        name: 'Alice Admin',\n        email: 'alice.admin@example.com',\n        password: 'password',\n        role: { connect: { id: roleByName['Admin'].id } },\n        department: { connect: { id: deptBySlug['marketing'].id } },\n      },\n      {\n        name: 'Elias Israel',\n        email: 'eliasisrael@adobe.com',\n        password: '12345678',\n        role: { connect: { id: roleByName['Admin'].id } },\n        // optional department; Admin can access all departments regardless\n      },\n      {\n        name: 'Cameron Content',\n        email: 'cameron.content@example.com',\n        password: 'password',\n        role: { connect: { id: roleByName['Content Manager'].id } },\n        department: { connect: { id: deptBySlug['marketing'].id } },\n      },\n      {\n        name: 'Chris Creative',\n        email: 'chris.creative@example.com',\n        password: 'password',\n        role: { connect: { id: roleByName['Creative'].id } },\n        department: { connect: { id: deptBySlug['marketing'].id } },\n      },\n      {\n        name: 'Vera Viewer',\n        email: 'vera.viewer@example.com',\n        password: 'password',\n        role: { connect: { id: roleByName['Viewer'].id } },\n        department: { connect: { id: deptBySlug['sales'].id } },\n      },\n      {\n        name: 'Connie Compliance',\n        email: 'connie.compliance@example.com',\n        password: 'password',\n        role: { connect: { id: roleByName['Compliance'].id } },\n        department: { connect: { id: deptBySlug['legal'].id } },\n      },\n      {\n        name: 'Brenda Brand',\n        email: 'brenda.brand@example.com',\n        password: 'password',\n        role: { connect: { id: roleByName['Brand Manager'].id } },\n        department: { connect: { id: deptBySlug['marketing'].id } },\n      },\n      {\n        name: 'Andy Analyst',\n        email: 'andy.analyst@example.com',\n        password: 'password',\n        role: { connect: { id: roleByName['Analyst'].id } },\n        department: { connect: { id: deptBySlug['engineering'].id } },\n      },\n    ].map((u: any) => context.db.User.createOne({ data: u }))\n  )\n\n  const userByEmail = Object.fromEntries(users.map(u => [u.email!, u]))\n\n  // Brands\n  const brands = await Promise.all(\n    [\n      {\n        name: 'Acme Global',\n        slug: 'acme',\n        description: 'Enterprise brand guidelines',\n        complianceStatus: 'needs_review',\n        department: { connect: { id: deptBySlug['marketing'].id } },\n      },\n      {\n        name: 'Contoso Health',\n        slug: 'contoso',\n        description: 'Healthcare brand',\n        complianceStatus: 'compliant',\n        department: { connect: { id: deptBySlug['legal'].id } },\n      },\n    ].map((b: any) => context.db.Brand.createOne({ data: b }))\n  )\n\n  const brandBySlug = Object.fromEntries(brands.map(b => [b.slug!, b]))\n\n  // Tags\n  const tags = await Promise.all(\n    ['Urgent', 'Brand', 'Campaign', 'Legal', 'Press'].map((name: string) =>\n      context.db.Tag.createOne({ data: { name } })\n    )\n  )\n\n  // Assets\n  const assets = await Promise.all(\n    [\n      {\n        title: 'Acme Logo',\n        description: 'Primary logo in SVG',\n        status: 'approved',\n        brand: { connect: { id: brandBySlug['acme'].id } },\n        department: { connect: { id: deptBySlug['marketing'].id } },\n        uploadedBy: { connect: { id: userByEmail['chris.creative@example.com'].id } },\n        approvedBy: { connect: { id: userByEmail['connie.compliance@example.com'].id } },\n        tags: { connect: tags.slice(0, 2).map(t => ({ id: t.id })) },\n      },\n      {\n        title: 'Press Kit 2025',\n        description: 'Zip with brand press assets',\n        status: 'in_review',\n        brand: { connect: { id: brandBySlug['acme'].id } },\n        department: { connect: { id: deptBySlug['marketing'].id } },\n        uploadedBy: { connect: { id: userByEmail['cameron.content@example.com'].id } },\n        tags: { connect: tags.slice(1, 4).map(t => ({ id: t.id })) },\n      },\n    ].map((a: any) => context.db.Asset.createOne({ data: a }))\n  )\n\n  // Content\n  await Promise.all(\n    [\n      {\n        title: 'Spring Campaign Brief',\n        status: 'review',\n        brand: { connect: { id: brandBySlug['acme'].id } },\n        department: { connect: { id: deptBySlug['marketing'].id } },\n        createdBy: { connect: { id: userByEmail['cameron.content@example.com'].id } },\n        reviewers: {\n          connect: [\n            userByEmail['connie.compliance@example.com'],\n            userByEmail['brenda.brand@example.com'],\n          ].map((u: any) => ({ id: u.id })),\n        },\n        tags: { connect: tags.slice(0, 3).map((t: any) => ({ id: t.id })) },\n      },\n      {\n        title: 'Brand Compliance Checklist',\n        status: 'approved',\n        brand: { connect: { id: brandBySlug['contoso'].id } },\n        department: { connect: { id: deptBySlug['legal'].id } },\n        createdBy: { connect: { id: userByEmail['connie.compliance@example.com'].id } },\n        reviewers: {\n          connect: [userByEmail['andy.analyst@example.com']].map((u: any) => ({ id: u.id })),\n        },\n        tags: { connect: tags.slice(2, 5).map((t: any) => ({ id: t.id })) },\n      },\n    ].map((c: any) => context.db.Content.createOne({ data: c }))\n  )\n\n  // Questions & Answers\n  const questions = await Promise.all(\n    [\n      {\n        subject: 'Can we use the old logo on social? ',\n        status: 'new',\n        askedAt: new Date(),\n        roadmapType: 'fyi',\n        department: { connect: { id: deptBySlug['marketing'].id } },\n        askedBy: { connect: { id: userByEmail['vera.viewer@example.com'].id } },\n        tags: { connect: tags.slice(0, 2).map(t => ({ id: t.id })) },\n      },\n      {\n        subject: 'Press kit approval timeline',\n        status: 'triage',\n        askedAt: new Date(),\n        roadmapType: 'blocker',\n        department: { connect: { id: deptBySlug['marketing'].id } },\n        askedBy: { connect: { id: userByEmail['cameron.content@example.com'].id } },\n        tags: { connect: tags.slice(1, 4).map(t => ({ id: t.id })) },\n      },\n      // --- Adobe FAQ (seeded) ---\n      {\n        subject: 'How does Cursor safeguard Adobe\u2019s source code and sensitive IP?',\n        status: 'answered',\n        askedAt: new Date(),\n        roadmapType: 'fyi',\n        department: { connect: { id: deptBySlug['engineering'].id } },\n        askedBy: { connect: { id: userByEmail['eliasisrael@adobe.com'].id } },\n        tags: { connect: tags.filter(t => ['Legal'].includes(t.name!)).map(t => ({ id: t.id })) },\n        body: [\n          {\n            type: 'paragraph',\n            children: [\n              {\n                text:\n                  'Cursor follows industry-standard practices for data security and privacy and operates with enterprise-grade controls. Adobe teams can enable Privacy Mode to prevent code and project files from being uploaded; editing and AI assistance then occur locally.',\n              },\n            ],\n          },\n          {\n            type: 'paragraph',\n            children: [\n              {\n                text:\n                  'For sensitive environments, Privacy Mode further reduces data surface area while preserving helpful tooling.',\n              },\n            ],\n          },\n        ],\n      },\n      {\n        subject: 'How does Cursor understand our codebase?',\n        status: 'answered',\n        askedAt: new Date(),\n        roadmapType: 'fyi',\n        department: { connect: { id: deptBySlug['engineering'].id } },\n        askedBy: { connect: { id: userByEmail['eliasisrael@adobe.com'].id } },\n        body: [\n          {\n            type: 'paragraph',\n            children: [\n              {\n                text:\n                  'Cursor ingests your workspace (code and docs) to build an internal representation. This context allows it to reference surrounding files and project structure when proposing edits and answers.',\n              },\n            ],\n          },\n          {\n            type: 'paragraph',\n            children: [\n              {\n                text:\n                  'Metaphor: imagine your repository as a large library. Cursor does not read or store every book each time. Instead, it maintains smart index cards summarizing chapters and where to find them. When you ask a question, it uses those cards to locate only the relevant chapters before reading them.',\n              },\n            ],\n          },\n        ],\n      },\n      {\n        subject: 'Can you explain Privacy Mode guarantees?',\n        status: 'answered',\n        askedAt: new Date(),\n        roadmapType: 'fyi',\n        department: { connect: { id: deptBySlug['legal'].id } },\n        askedBy: { connect: { id: userByEmail['eliasisrael@adobe.com'].id } },\n        tags: { connect: tags.filter(t => ['Legal'].includes(t.name!)).map(t => ({ id: t.id })) },\n        body: [\n          { type: 'paragraph', children: [{ text: 'Key guarantees:' }] },\n          {\n            type: 'paragraph',\n            children: [\n              { text: '\u2022 No training on your code. ' },\n              { text: '\u2022 No storage of code content. ' },\n              { text: '\u2022 No logging of code content. ' },\n              {\n                text:\n                  '\u2022 Requests are handled by isolated privacy services (including background jobs and queues).',\n              },\n            ],\n          },\n          { type: 'paragraph', children: [{ text: 'Enforcement:' }] },\n          {\n            type: 'paragraph',\n            children: [\n              {\n                text:\n                  '\u2022 For team plans, Privacy Mode is enforced by default. Client and server both apply safeguards with conservative fallbacks.',\n              },\n            ],\n          },\n          { type: 'paragraph', children: [{ text: 'How it works (at a glance):' }] },\n          {\n            type: 'paragraph',\n            children: [\n              {\n                text:\n                  '\u2022 Requests include a privacy flag; they are routed to dedicated privacy-safe services that do not log, store, or retain prompts/completions. If the flag is missing, the system assumes privacy mode to be safe.',\n              },\n            ],\n          },\n        ],\n      },\n      {\n        subject: 'What is your client security model?',\n        status: 'answered',\n        askedAt: new Date(),\n        roadmapType: 'fyi',\n        department: { connect: { id: deptBySlug['engineering'].id } },\n        askedBy: { connect: { id: userByEmail['eliasisrael@adobe.com'].id } },\n        body: [\n          {\n            type: 'paragraph',\n            children: [\n              {\n                text:\n                  'Cursor is a fork of VS Code. High-severity upstream security fixes are cherry-picked promptly between merges.',\n              },\n            ],\n          },\n        ],\n      },\n      {\n        subject: 'How can we customize Cursor\u2019s behavior?',\n        status: 'answered',\n        askedAt: new Date(),\n        roadmapType: 'fyi',\n        department: { connect: { id: deptBySlug['engineering'].id } },\n        askedBy: { connect: { id: userByEmail['eliasisrael@adobe.com'].id } },\n        body: [\n          {\n            type: 'paragraph',\n            children: [\n              {\n                text:\n                  'Cursor supports Rules \u2014 persistent, system-level instructions that guide style, linting, workflows, and team conventions. Rules can be applied per user and per repository.',\n              },\n            ],\n          },\n          {\n            type: 'paragraph',\n            children: [\n              {\n                text:\n                  'There are User rules (global to your projects) and Project rules (checked into a repo-specific folder) so teams can enforce standards automatically.',\n              },\n            ],\n          },\n        ],\n      },\n      {\n        subject: 'How do we deploy and manage Cursor across Adobe\u2019s teams?',\n        status: 'answered',\n        askedAt: new Date(),\n        roadmapType: 'fyi',\n        department: { connect: { id: deptBySlug['engineering'].id } },\n        askedBy: { connect: { id: userByEmail['eliasisrael@adobe.com'].id } },\n        body: [\n          {\n            type: 'paragraph',\n            children: [\n              {\n                text:\n                  'Cursor Enterprise offers admin controls for rollout, access permissions, SSO/IdP integration, and shared rules. Teams can centrally define rules and context integrations across repositories from day one.',\n              },\n            ],\n          },\n        ],\n      },\n      {\n        subject: 'How does Cursor work with Security and Privacy overall?',\n        status: 'answered',\n        askedAt: new Date(),\n        roadmapType: 'fyi',\n        department: { connect: { id: deptBySlug['legal'].id } },\n        askedBy: { connect: { id: userByEmail['eliasisrael@adobe.com'].id } },\n        tags: { connect: tags.filter(t => ['Legal'].includes(t.name!)).map(t => ({ id: t.id })) },\n        body: [\n          {\n            type: 'paragraph',\n            children: [\n              { text: '\u2022 Your code is never used to train our models.' },\n            ],\n          },\n          {\n            type: 'paragraph',\n            children: [\n              { text: '\u2022 Requests are processed securely; code is not sent to public LLMs.' },\n            ],\n          },\n          {\n            type: 'paragraph',\n            children: [\n              { text: '\u2022 .cursorignore is respected; only explicitly allowed paths are indexed.' },\n            ],\n          },\n          {\n            type: 'paragraph',\n            children: [\n              { text: '\u2022 Infrastructure is built for auditability, data control, and compliance alignment.' },\n            ],\n          },\n          {\n            type: 'paragraph',\n            children: [\n              { text: 'We can schedule a session with the security team to review architecture and policies in detail.' },\n            ],\n          },\n        ],\n      },\n      {\n        subject: 'How will the TAM help us?',\n        status: 'answered',\n        askedAt: new Date(),\n        roadmapType: 'fyi',\n        department: { connect: { id: deptBySlug['engineering'].id } },\n        askedBy: { connect: { id: userByEmail['eliasisrael@adobe.com'].id } },\n        body: [\n          {\n            type: 'paragraph',\n            children: [\n              { text: 'Dedicated enablement and support to unblock your team quickly.' },\n            ],\n          },\n          {\n            type: 'paragraph',\n            children: [\n              { text: 'Direct line to product for feedback, roadmap input, and escalations.' },\n            ],\n          },\n          {\n            type: 'paragraph',\n            children: [\n              { text: 'Security and privacy guidance tailored for enterprise workflows.' },\n            ],\n          },\n        ],\n      },\n      {\n        subject: 'What is the difference between Copilot / Codeium (Windsurf) and Cursor?',\n        status: 'answered',\n        askedAt: new Date(),\n        roadmapType: 'fyi',\n        department: { connect: { id: deptBySlug['engineering'].id } },\n        askedBy: { connect: { id: userByEmail['eliasisrael@adobe.com'].id } },\n        body: [\n          {\n            type: 'paragraph',\n            children: [\n              {\n                text:\n                  'Copilot excels at inline suggestions but is weaker on repository-wide context and edit flows. Codeium/Windsurf is fast but lacks full IDE integration, limiting deep repository understanding.',\n              },\n            ],\n          },\n          {\n            type: 'paragraph',\n            children: [\n              {\n                text:\n                  'Cursor focuses on end-to-end developer UX inside the IDE, combining context awareness with powerful edit workflows to boost productivity. The community continues to grow with events and shared practices.',\n              },\n            ],\n          },\n        ],\n      },\n    ].map((q: any) => context.db.Question.createOne({ data: q }))\n  )\n\n  // Answers removed from schema; skip creating answers\n\n  // Analytics Events\n  await Promise.all(\n    [\n      {\n        eventType: 'view',\n        user: { connect: { id: userByEmail['vera.viewer@example.com'].id } },\n        entityType: 'Asset',\n        entityId: assets[0].id,\n        department: { connect: { id: deptBySlug['marketing'].id } },\n      },\n      {\n        eventType: 'download',\n        user: { connect: { id: userByEmail['cameron.content@example.com'].id } },\n        entityType: 'Asset',\n        entityId: assets[1].id,\n        department: { connect: { id: deptBySlug['marketing'].id } },\n      },\n    ].map((e: any) => context.db.AnalyticsEvent.createOne({ data: e }))\n  )\n\n  // Audit logs\n  await Promise.all(\n    [\n      {\n        action: 'ASSET_APPROVED',\n        entityType: 'Asset',\n        entityId: assets[0].id,\n        user: { connect: { id: userByEmail['connie.compliance@example.com'].id } },\n        department: { connect: { id: deptBySlug['legal'].id } },\n      },\n      {\n        action: 'CONTENT_SUBMITTED',\n        entityType: 'Content',\n        user: { connect: { id: userByEmail['cameron.content@example.com'].id } },\n        department: { connect: { id: deptBySlug['marketing'].id } },\n      },\n    ].map((l: any) => context.db.AuditLog.createOne({ data: l }))\n  )\n\n  // Ensure requested super admin user exists (in case user list was changed)\n  await ensureSuperAdmin(context)\n}\n\n"],
  "mappings": "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",
  "names": ["import_core", "session", "session", "bytes", "session"]
}
