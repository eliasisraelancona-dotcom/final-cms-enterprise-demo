"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/slate-react@0.112.1_react-dom@19.0.0_react@19.0.0__react@19.0.0_slate-dom@0.112.2_slate@0.112.0__slate@0.112.0";
exports.ids = ["vendor-chunks/slate-react@0.112.1_react-dom@19.0.0_react@19.0.0__react@19.0.0_slate-dom@0.112.2_slate@0.112.0__slate@0.112.0"];
exports.modules = {

/***/ "(pages-dir-node)/../../../../node_modules/.pnpm/slate-react@0.112.1_react-dom@19.0.0_react@19.0.0__react@19.0.0_slate-dom@0.112.2_slate@0.112.0__slate@0.112.0/node_modules/slate-react/dist/index.js":
/*!********************************************************************************************************************************************************************************************!*\
  !*** ../../../../node_modules/.pnpm/slate-react@0.112.1_react-dom@19.0.0_react@19.0.0__react@19.0.0_slate-dom@0.112.2_slate@0.112.0__slate@0.112.0/node_modules/slate-react/dist/index.js ***!
  \********************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nvar getDirection = __webpack_require__(/*! direction */ \"(pages-dir-node)/../../../../node_modules/.pnpm/direction@1.0.4/node_modules/direction/index.js\");\nvar debounce = __webpack_require__(/*! lodash/debounce */ \"(pages-dir-node)/../../../../node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/debounce.js\");\nvar throttle = __webpack_require__(/*! lodash/throttle */ \"(pages-dir-node)/../../../../node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/throttle.js\");\nvar React = __webpack_require__(/*! react */ \"react\");\nvar scrollIntoView = __webpack_require__(/*! scroll-into-view-if-needed */ \"(pages-dir-node)/../../../../node_modules/.pnpm/scroll-into-view-if-needed@3.1.0/node_modules/scroll-into-view-if-needed/dist/index.cjs\");\nvar slate = __webpack_require__(/*! slate */ \"(pages-dir-node)/../../../../node_modules/.pnpm/slate@0.112.0/node_modules/slate/dist/index.js\");\nvar slateDom = __webpack_require__(/*! slate-dom */ \"(pages-dir-node)/../../../../node_modules/.pnpm/slate-dom@0.112.2_slate@0.112.0/node_modules/slate-dom/dist/index.js\");\nvar resizeObserver = __webpack_require__(/*! @juggle/resize-observer */ \"(pages-dir-node)/../../../../node_modules/.pnpm/@juggle+resize-observer@3.4.0/node_modules/@juggle/resize-observer/lib/exports/resize-observer.umd.js\");\nvar ReactDOM = __webpack_require__(/*! react-dom */ \"react-dom\");\n\nfunction unwrapExports (x) {\n\treturn x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;\n}\n\nfunction createCommonjsModule(fn, module) {\n\treturn module = { exports: {} }, fn(module, module.exports), module.exports;\n}\n\nvar arrayWithHoles = createCommonjsModule(function (module) {\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\nmodule.exports = _arrayWithHoles, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n});\n\nunwrapExports(arrayWithHoles);\n\nvar iterableToArrayLimit = createCommonjsModule(function (module) {\nfunction _iterableToArrayLimit(r, l) {\n  var t = null == r ? null : \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"];\n  if (null != t) {\n    var e,\n      n,\n      i,\n      u,\n      a = [],\n      f = !0,\n      o = !1;\n    try {\n      if (i = (t = t.call(r)).next, 0 === l) {\n        if (Object(t) !== t) return;\n        f = !1;\n      } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0);\n    } catch (r) {\n      o = !0, n = r;\n    } finally {\n      try {\n        if (!f && null != t[\"return\"] && (u = t[\"return\"](), Object(u) !== u)) return;\n      } finally {\n        if (o) throw n;\n      }\n    }\n    return a;\n  }\n}\nmodule.exports = _iterableToArrayLimit, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n});\n\nunwrapExports(iterableToArrayLimit);\n\nvar arrayLikeToArray = createCommonjsModule(function (module) {\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n  return arr2;\n}\nmodule.exports = _arrayLikeToArray, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n});\n\nunwrapExports(arrayLikeToArray);\n\nvar unsupportedIterableToArray = createCommonjsModule(function (module) {\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return arrayLikeToArray(o, minLen);\n}\nmodule.exports = _unsupportedIterableToArray, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n});\n\nunwrapExports(unsupportedIterableToArray);\n\nvar nonIterableRest = createCommonjsModule(function (module) {\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nmodule.exports = _nonIterableRest, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n});\n\nunwrapExports(nonIterableRest);\n\nvar slicedToArray = createCommonjsModule(function (module) {\nfunction _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}\nmodule.exports = _slicedToArray, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n});\n\nvar _slicedToArray = unwrapExports(slicedToArray);\n\nvar objectWithoutPropertiesLoose = createCommonjsModule(function (module) {\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n  return target;\n}\nmodule.exports = _objectWithoutPropertiesLoose, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n});\n\nunwrapExports(objectWithoutPropertiesLoose);\n\nvar objectWithoutProperties = createCommonjsModule(function (module) {\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n  return target;\n}\nmodule.exports = _objectWithoutProperties, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n});\n\nvar _objectWithoutProperties = unwrapExports(objectWithoutProperties);\n\nvar _typeof_1 = createCommonjsModule(function (module) {\nfunction _typeof(o) {\n  \"@babel/helpers - typeof\";\n\n  return (module.exports = _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) {\n    return typeof o;\n  } : function (o) {\n    return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o;\n  }, module.exports.__esModule = true, module.exports[\"default\"] = module.exports), _typeof(o);\n}\nmodule.exports = _typeof, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n});\n\nunwrapExports(_typeof_1);\n\nvar toPrimitive = createCommonjsModule(function (module) {\nvar _typeof = _typeof_1[\"default\"];\nfunction _toPrimitive(input, hint) {\n  if (_typeof(input) !== \"object\" || input === null) return input;\n  var prim = input[Symbol.toPrimitive];\n  if (prim !== undefined) {\n    var res = prim.call(input, hint || \"default\");\n    if (_typeof(res) !== \"object\") return res;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (hint === \"string\" ? String : Number)(input);\n}\nmodule.exports = _toPrimitive, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n});\n\nunwrapExports(toPrimitive);\n\nvar toPropertyKey = createCommonjsModule(function (module) {\nvar _typeof = _typeof_1[\"default\"];\n\nfunction _toPropertyKey(arg) {\n  var key = toPrimitive(arg, \"string\");\n  return _typeof(key) === \"symbol\" ? key : String(key);\n}\nmodule.exports = _toPropertyKey, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n});\n\nunwrapExports(toPropertyKey);\n\nvar defineProperty = createCommonjsModule(function (module) {\nfunction _defineProperty(obj, key, value) {\n  key = toPropertyKey(key);\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nmodule.exports = _defineProperty, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n});\n\nvar _defineProperty = unwrapExports(defineProperty);\n\n/**\n * A React context for sharing the editor object.\n */\nvar EditorContext = /*#__PURE__*/React.createContext(null);\n/**\n * Get the current editor object from the React context.\n */\nvar useSlateStatic = function useSlateStatic() {\n  var editor = React.useContext(EditorContext);\n  if (!editor) {\n    throw new Error(\"The `useSlateStatic` hook must be used inside the <Slate> component's context.\");\n  }\n  return editor;\n};\n\n// eslint-disable-next-line no-redeclare\nvar ReactEditor = slateDom.DOMEditor;\n\nfunction ownKeys$5(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread$5(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$5(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$5(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\n// https://github.com/facebook/draft-js/blob/main/src/component/handlers/composition/DraftEditorCompositionHandler.js#L41\n// When using keyboard English association function, conpositionEnd triggered too fast, resulting in after `insertText` still maintain association state.\nvar RESOLVE_DELAY = 25;\n// Time with no user interaction before the current user action is considered as done.\nvar FLUSH_DELAY = 200;\n// Replace with `const debug = console.log` to debug\nvar debug = function debug() {};\n// Type guard to check if a value is a DataTransfer\nvar isDataTransfer = function isDataTransfer(value) {\n  return (value === null || value === void 0 ? void 0 : value.constructor.name) === 'DataTransfer';\n};\nfunction createAndroidInputManager(_ref) {\n  var editor = _ref.editor,\n    scheduleOnDOMSelectionChange = _ref.scheduleOnDOMSelectionChange,\n    onDOMSelectionChange = _ref.onDOMSelectionChange;\n  var flushing = false;\n  var compositionEndTimeoutId = null;\n  var flushTimeoutId = null;\n  var actionTimeoutId = null;\n  var idCounter = 0;\n  var insertPositionHint = false;\n  var applyPendingSelection = function applyPendingSelection() {\n    var pendingSelection = slateDom.EDITOR_TO_PENDING_SELECTION.get(editor);\n    slateDom.EDITOR_TO_PENDING_SELECTION[\"delete\"](editor);\n    if (pendingSelection) {\n      var selection = editor.selection;\n      var normalized = slateDom.normalizeRange(editor, pendingSelection);\n      if (normalized && (!selection || !slate.Range.equals(normalized, selection))) {\n        slate.Transforms.select(editor, normalized);\n      }\n    }\n  };\n  var performAction = function performAction() {\n    var action = slateDom.EDITOR_TO_PENDING_ACTION.get(editor);\n    slateDom.EDITOR_TO_PENDING_ACTION[\"delete\"](editor);\n    if (!action) {\n      return;\n    }\n    if (action.at) {\n      var target = slate.Point.isPoint(action.at) ? slateDom.normalizePoint(editor, action.at) : slateDom.normalizeRange(editor, action.at);\n      if (!target) {\n        return;\n      }\n      var _targetRange = slate.Editor.range(editor, target);\n      if (!editor.selection || !slate.Range.equals(editor.selection, _targetRange)) {\n        slate.Transforms.select(editor, target);\n      }\n    }\n    action.run();\n  };\n  var flush = function flush() {\n    if (flushTimeoutId) {\n      clearTimeout(flushTimeoutId);\n      flushTimeoutId = null;\n    }\n    if (actionTimeoutId) {\n      clearTimeout(actionTimeoutId);\n      actionTimeoutId = null;\n    }\n    if (!hasPendingDiffs() && !hasPendingAction()) {\n      applyPendingSelection();\n      return;\n    }\n    if (!flushing) {\n      flushing = true;\n      setTimeout(function () {\n        return flushing = false;\n      });\n    }\n    if (hasPendingAction()) {\n      flushing = 'action';\n    }\n    var selectionRef = editor.selection && slate.Editor.rangeRef(editor, editor.selection, {\n      affinity: 'forward'\n    });\n    slateDom.EDITOR_TO_USER_MARKS.set(editor, editor.marks);\n    debug('flush', slateDom.EDITOR_TO_PENDING_ACTION.get(editor), slateDom.EDITOR_TO_PENDING_DIFFS.get(editor));\n    var scheduleSelectionChange = hasPendingDiffs();\n    var diff;\n    while (diff = (_EDITOR_TO_PENDING_DI = slateDom.EDITOR_TO_PENDING_DIFFS.get(editor)) === null || _EDITOR_TO_PENDING_DI === void 0 ? void 0 : _EDITOR_TO_PENDING_DI[0]) {\n      var _EDITOR_TO_PENDING_DI, _EDITOR_TO_PENDING_DI2;\n      var pendingMarks = slateDom.EDITOR_TO_PENDING_INSERTION_MARKS.get(editor);\n      if (pendingMarks !== undefined) {\n        slateDom.EDITOR_TO_PENDING_INSERTION_MARKS[\"delete\"](editor);\n        editor.marks = pendingMarks;\n      }\n      if (pendingMarks && insertPositionHint === false) {\n        insertPositionHint = null;\n      }\n      var range = slateDom.targetRange(diff);\n      if (!editor.selection || !slate.Range.equals(editor.selection, range)) {\n        slate.Transforms.select(editor, range);\n      }\n      if (diff.diff.text) {\n        slate.Editor.insertText(editor, diff.diff.text);\n      } else {\n        slate.Editor.deleteFragment(editor);\n      }\n      // Remove diff only after we have applied it to account for it when transforming\n      // pending ranges.\n      slateDom.EDITOR_TO_PENDING_DIFFS.set(editor, (_EDITOR_TO_PENDING_DI2 = slateDom.EDITOR_TO_PENDING_DIFFS.get(editor)) === null || _EDITOR_TO_PENDING_DI2 === void 0 ? void 0 : _EDITOR_TO_PENDING_DI2.filter(function (_ref2) {\n        var id = _ref2.id;\n        return id !== diff.id;\n      }));\n      if (!slateDom.verifyDiffState(editor, diff)) {\n        scheduleSelectionChange = false;\n        slateDom.EDITOR_TO_PENDING_ACTION[\"delete\"](editor);\n        slateDom.EDITOR_TO_USER_MARKS[\"delete\"](editor);\n        flushing = 'action';\n        // Ensure we don't restore the pending user (dom) selection\n        // since the document and dom state do not match.\n        slateDom.EDITOR_TO_PENDING_SELECTION[\"delete\"](editor);\n        scheduleOnDOMSelectionChange.cancel();\n        onDOMSelectionChange.cancel();\n        selectionRef === null || selectionRef === void 0 || selectionRef.unref();\n      }\n    }\n    var selection = selectionRef === null || selectionRef === void 0 ? void 0 : selectionRef.unref();\n    if (selection && !slateDom.EDITOR_TO_PENDING_SELECTION.get(editor) && (!editor.selection || !slate.Range.equals(selection, editor.selection))) {\n      slate.Transforms.select(editor, selection);\n    }\n    if (hasPendingAction()) {\n      performAction();\n      return;\n    }\n    // COMPAT: The selectionChange event is fired after the action is performed,\n    // so we have to manually schedule it to ensure we don't 'throw away' the selection\n    // while rendering if we have pending changes.\n    if (scheduleSelectionChange) {\n      scheduleOnDOMSelectionChange();\n    }\n    scheduleOnDOMSelectionChange.flush();\n    onDOMSelectionChange.flush();\n    applyPendingSelection();\n    var userMarks = slateDom.EDITOR_TO_USER_MARKS.get(editor);\n    slateDom.EDITOR_TO_USER_MARKS[\"delete\"](editor);\n    if (userMarks !== undefined) {\n      editor.marks = userMarks;\n      editor.onChange();\n    }\n  };\n  var handleCompositionEnd = function handleCompositionEnd(_event) {\n    if (compositionEndTimeoutId) {\n      clearTimeout(compositionEndTimeoutId);\n    }\n    compositionEndTimeoutId = setTimeout(function () {\n      slateDom.IS_COMPOSING.set(editor, false);\n      flush();\n    }, RESOLVE_DELAY);\n  };\n  var handleCompositionStart = function handleCompositionStart(_event) {\n    slateDom.IS_COMPOSING.set(editor, true);\n    if (compositionEndTimeoutId) {\n      clearTimeout(compositionEndTimeoutId);\n      compositionEndTimeoutId = null;\n    }\n  };\n  var updatePlaceholderVisibility = function updatePlaceholderVisibility() {\n    var forceHide = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    var placeholderElement = slateDom.EDITOR_TO_PLACEHOLDER_ELEMENT.get(editor);\n    if (!placeholderElement) {\n      return;\n    }\n    if (hasPendingDiffs() || forceHide) {\n      placeholderElement.style.display = 'none';\n      return;\n    }\n    placeholderElement.style.removeProperty('display');\n  };\n  var storeDiff = function storeDiff(path, diff) {\n    var _EDITOR_TO_PENDING_DI3;\n    var pendingDiffs = (_EDITOR_TO_PENDING_DI3 = slateDom.EDITOR_TO_PENDING_DIFFS.get(editor)) !== null && _EDITOR_TO_PENDING_DI3 !== void 0 ? _EDITOR_TO_PENDING_DI3 : [];\n    slateDom.EDITOR_TO_PENDING_DIFFS.set(editor, pendingDiffs);\n    var target = slate.Node.leaf(editor, path);\n    var idx = pendingDiffs.findIndex(function (change) {\n      return slate.Path.equals(change.path, path);\n    });\n    if (idx < 0) {\n      var normalized = slateDom.normalizeStringDiff(target.text, diff);\n      if (normalized) {\n        pendingDiffs.push({\n          path: path,\n          diff: diff,\n          id: idCounter++\n        });\n      }\n      updatePlaceholderVisibility();\n      return;\n    }\n    var merged = slateDom.mergeStringDiffs(target.text, pendingDiffs[idx].diff, diff);\n    if (!merged) {\n      pendingDiffs.splice(idx, 1);\n      updatePlaceholderVisibility();\n      return;\n    }\n    pendingDiffs[idx] = _objectSpread$5(_objectSpread$5({}, pendingDiffs[idx]), {}, {\n      diff: merged\n    });\n  };\n  var scheduleAction = function scheduleAction(run) {\n    var _ref3 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n      at = _ref3.at;\n    insertPositionHint = false;\n    slateDom.EDITOR_TO_PENDING_SELECTION[\"delete\"](editor);\n    scheduleOnDOMSelectionChange.cancel();\n    onDOMSelectionChange.cancel();\n    if (hasPendingAction()) {\n      flush();\n    }\n    slateDom.EDITOR_TO_PENDING_ACTION.set(editor, {\n      at: at,\n      run: run\n    });\n    // COMPAT: When deleting before a non-contenteditable element chrome only fires a beforeinput,\n    // (no input) and doesn't perform any dom mutations. Without a flush timeout we would never flush\n    // in this case and thus never actually perform the action.\n    actionTimeoutId = setTimeout(flush);\n  };\n  var handleDOMBeforeInput = function handleDOMBeforeInput(event) {\n    var _targetRange2;\n    if (flushTimeoutId) {\n      clearTimeout(flushTimeoutId);\n      flushTimeoutId = null;\n    }\n    if (slateDom.IS_NODE_MAP_DIRTY.get(editor)) {\n      return;\n    }\n    var type = event.inputType;\n    var targetRange = null;\n    var data = event.dataTransfer || event.data || undefined;\n    if (insertPositionHint !== false && type !== 'insertText' && type !== 'insertCompositionText') {\n      insertPositionHint = false;\n    }\n    var _event$getTargetRange = event.getTargetRanges(),\n      _event$getTargetRange2 = _slicedToArray(_event$getTargetRange, 1),\n      nativeTargetRange = _event$getTargetRange2[0];\n    if (nativeTargetRange) {\n      targetRange = ReactEditor.toSlateRange(editor, nativeTargetRange, {\n        exactMatch: false,\n        suppressThrow: true\n      });\n    }\n    // COMPAT: SelectionChange event is fired after the action is performed, so we\n    // have to manually get the selection here to ensure it's up-to-date.\n    var window = ReactEditor.getWindow(editor);\n    var domSelection = window.getSelection();\n    if (!targetRange && domSelection) {\n      nativeTargetRange = domSelection;\n      targetRange = ReactEditor.toSlateRange(editor, domSelection, {\n        exactMatch: false,\n        suppressThrow: true\n      });\n    }\n    targetRange = (_targetRange2 = targetRange) !== null && _targetRange2 !== void 0 ? _targetRange2 : editor.selection;\n    if (!targetRange) {\n      return;\n    }\n    // By default, the input manager tries to store text diffs so that we can\n    // defer flushing them at a later point in time. We don't want to flush\n    // for every input event as this can be expensive. However, there are some\n    // scenarios where we cannot safely store the text diff and must instead\n    // schedule an action to let Slate normalize the editor state.\n    var canStoreDiff = true;\n    if (type.startsWith('delete')) {\n      if (slate.Range.isExpanded(targetRange)) {\n        var _Range$edges = slate.Range.edges(targetRange),\n          _Range$edges2 = _slicedToArray(_Range$edges, 2),\n          _start = _Range$edges2[0],\n          _end = _Range$edges2[1];\n        var _leaf = slate.Node.leaf(editor, _start.path);\n        if (_leaf.text.length === _start.offset && _end.offset === 0) {\n          var next = slate.Editor.next(editor, {\n            at: _start.path,\n            match: slate.Text.isText\n          });\n          if (next && slate.Path.equals(next[1], _end.path)) {\n            targetRange = {\n              anchor: _end,\n              focus: _end\n            };\n          }\n        }\n      }\n      var direction = type.endsWith('Backward') ? 'backward' : 'forward';\n      var _Range$edges3 = slate.Range.edges(targetRange),\n        _Range$edges4 = _slicedToArray(_Range$edges3, 2),\n        start = _Range$edges4[0],\n        end = _Range$edges4[1];\n      var _Editor$leaf = slate.Editor.leaf(editor, start.path),\n        _Editor$leaf2 = _slicedToArray(_Editor$leaf, 2),\n        leaf = _Editor$leaf2[0],\n        path = _Editor$leaf2[1];\n      var diff = {\n        text: '',\n        start: start.offset,\n        end: end.offset\n      };\n      var pendingDiffs = slateDom.EDITOR_TO_PENDING_DIFFS.get(editor);\n      var relevantPendingDiffs = pendingDiffs === null || pendingDiffs === void 0 ? void 0 : pendingDiffs.find(function (change) {\n        return slate.Path.equals(change.path, path);\n      });\n      var diffs = relevantPendingDiffs ? [relevantPendingDiffs.diff, diff] : [diff];\n      var text = slateDom.applyStringDiff.apply(void 0, [leaf.text].concat(diffs));\n      if (text.length === 0) {\n        // Text leaf will be removed, so we need to schedule an\n        // action to remove it so that Slate can normalize instead\n        // of storing as a diff\n        canStoreDiff = false;\n      }\n      if (slate.Range.isExpanded(targetRange)) {\n        if (canStoreDiff && slate.Path.equals(targetRange.anchor.path, targetRange.focus.path)) {\n          var point = {\n            path: targetRange.anchor.path,\n            offset: start.offset\n          };\n          var range = slate.Editor.range(editor, point, point);\n          handleUserSelect(range);\n          return storeDiff(targetRange.anchor.path, {\n            text: '',\n            end: end.offset,\n            start: start.offset\n          });\n        }\n        return scheduleAction(function () {\n          return slate.Editor.deleteFragment(editor, {\n            direction: direction\n          });\n        }, {\n          at: targetRange\n        });\n      }\n    }\n    switch (type) {\n      case 'deleteByComposition':\n      case 'deleteByCut':\n      case 'deleteByDrag':\n        {\n          return scheduleAction(function () {\n            return slate.Editor.deleteFragment(editor);\n          }, {\n            at: targetRange\n          });\n        }\n      case 'deleteContent':\n      case 'deleteContentForward':\n        {\n          var _targetRange3 = targetRange,\n            anchor = _targetRange3.anchor;\n          if (canStoreDiff && slate.Range.isCollapsed(targetRange)) {\n            var targetNode = slate.Node.leaf(editor, anchor.path);\n            if (anchor.offset < targetNode.text.length) {\n              return storeDiff(anchor.path, {\n                text: '',\n                start: anchor.offset,\n                end: anchor.offset + 1\n              });\n            }\n          }\n          return scheduleAction(function () {\n            return slate.Editor.deleteForward(editor);\n          }, {\n            at: targetRange\n          });\n        }\n      case 'deleteContentBackward':\n        {\n          var _nativeTargetRange;\n          var _targetRange4 = targetRange,\n            _anchor = _targetRange4.anchor;\n          // If we have a mismatch between the native and slate selection being collapsed\n          // we are most likely deleting a zero-width placeholder and thus should perform it\n          // as an action to ensure correct behavior (mostly happens with mark placeholders)\n          var nativeCollapsed = slateDom.isDOMSelection(nativeTargetRange) ? nativeTargetRange.isCollapsed : !!((_nativeTargetRange = nativeTargetRange) !== null && _nativeTargetRange !== void 0 && _nativeTargetRange.collapsed);\n          if (canStoreDiff && nativeCollapsed && slate.Range.isCollapsed(targetRange) && _anchor.offset > 0) {\n            return storeDiff(_anchor.path, {\n              text: '',\n              start: _anchor.offset - 1,\n              end: _anchor.offset\n            });\n          }\n          return scheduleAction(function () {\n            return slate.Editor.deleteBackward(editor);\n          }, {\n            at: targetRange\n          });\n        }\n      case 'deleteEntireSoftLine':\n        {\n          return scheduleAction(function () {\n            slate.Editor.deleteBackward(editor, {\n              unit: 'line'\n            });\n            slate.Editor.deleteForward(editor, {\n              unit: 'line'\n            });\n          }, {\n            at: targetRange\n          });\n        }\n      case 'deleteHardLineBackward':\n        {\n          return scheduleAction(function () {\n            return slate.Editor.deleteBackward(editor, {\n              unit: 'block'\n            });\n          }, {\n            at: targetRange\n          });\n        }\n      case 'deleteSoftLineBackward':\n        {\n          return scheduleAction(function () {\n            return slate.Editor.deleteBackward(editor, {\n              unit: 'line'\n            });\n          }, {\n            at: targetRange\n          });\n        }\n      case 'deleteHardLineForward':\n        {\n          return scheduleAction(function () {\n            return slate.Editor.deleteForward(editor, {\n              unit: 'block'\n            });\n          }, {\n            at: targetRange\n          });\n        }\n      case 'deleteSoftLineForward':\n        {\n          return scheduleAction(function () {\n            return slate.Editor.deleteForward(editor, {\n              unit: 'line'\n            });\n          }, {\n            at: targetRange\n          });\n        }\n      case 'deleteWordBackward':\n        {\n          return scheduleAction(function () {\n            return slate.Editor.deleteBackward(editor, {\n              unit: 'word'\n            });\n          }, {\n            at: targetRange\n          });\n        }\n      case 'deleteWordForward':\n        {\n          return scheduleAction(function () {\n            return slate.Editor.deleteForward(editor, {\n              unit: 'word'\n            });\n          }, {\n            at: targetRange\n          });\n        }\n      case 'insertLineBreak':\n        {\n          return scheduleAction(function () {\n            return slate.Editor.insertSoftBreak(editor);\n          }, {\n            at: targetRange\n          });\n        }\n      case 'insertParagraph':\n        {\n          return scheduleAction(function () {\n            return slate.Editor.insertBreak(editor);\n          }, {\n            at: targetRange\n          });\n        }\n      case 'insertCompositionText':\n      case 'deleteCompositionText':\n      case 'insertFromComposition':\n      case 'insertFromDrop':\n      case 'insertFromPaste':\n      case 'insertFromYank':\n      case 'insertReplacementText':\n      case 'insertText':\n        {\n          if (isDataTransfer(data)) {\n            return scheduleAction(function () {\n              return ReactEditor.insertData(editor, data);\n            }, {\n              at: targetRange\n            });\n          }\n          var _text = data !== null && data !== void 0 ? data : '';\n          // COMPAT: If we are writing inside a placeholder, the ime inserts the text inside\n          // the placeholder itself and thus includes the zero-width space inside edit events.\n          if (slateDom.EDITOR_TO_PENDING_INSERTION_MARKS.get(editor)) {\n            _text = _text.replace(\"\\uFEFF\", '');\n          }\n          // Pastes from the Android clipboard will generate `insertText` events.\n          // If the copied text contains any newlines, Android will append an\n          // extra newline to the end of the copied text.\n          if (type === 'insertText' && /.*\\n.*\\n$/.test(_text)) {\n            _text = _text.slice(0, -1);\n          }\n          // If the text includes a newline, split it at newlines and paste each component\n          // string, with soft breaks in between each.\n          if (_text.includes('\\n')) {\n            return scheduleAction(function () {\n              var parts = _text.split('\\n');\n              parts.forEach(function (line, i) {\n                if (line) {\n                  slate.Editor.insertText(editor, line);\n                }\n                if (i !== parts.length - 1) {\n                  slate.Editor.insertSoftBreak(editor);\n                }\n              });\n            }, {\n              at: targetRange\n            });\n          }\n          if (slate.Path.equals(targetRange.anchor.path, targetRange.focus.path)) {\n            var _Range$edges5 = slate.Range.edges(targetRange),\n              _Range$edges6 = _slicedToArray(_Range$edges5, 2),\n              _start2 = _Range$edges6[0],\n              _end2 = _Range$edges6[1];\n            var _diff = {\n              start: _start2.offset,\n              end: _end2.offset,\n              text: _text\n            };\n            // COMPAT: Swiftkey has a weird bug where the target range of the 2nd word\n            // inserted after a mark placeholder is inserted with an anchor offset off by 1.\n            // So writing 'some text' will result in 'some ttext'. Luckily all 'normal' insert\n            // text events are fired with the correct target ranges, only the final 'insertComposition'\n            // isn't, so we can adjust the target range start offset if we are confident this is the\n            // swiftkey insert causing the issue.\n            if (_text && insertPositionHint && type === 'insertCompositionText') {\n              var hintPosition = insertPositionHint.start + insertPositionHint.text.search(/\\S|$/);\n              var diffPosition = _diff.start + _diff.text.search(/\\S|$/);\n              if (diffPosition === hintPosition + 1 && _diff.end === insertPositionHint.start + insertPositionHint.text.length) {\n                _diff.start -= 1;\n                insertPositionHint = null;\n                scheduleFlush();\n              } else {\n                insertPositionHint = false;\n              }\n            } else if (type === 'insertText') {\n              if (insertPositionHint === null) {\n                insertPositionHint = _diff;\n              } else if (insertPositionHint && slate.Range.isCollapsed(targetRange) && insertPositionHint.end + insertPositionHint.text.length === _start2.offset) {\n                insertPositionHint = _objectSpread$5(_objectSpread$5({}, insertPositionHint), {}, {\n                  text: insertPositionHint.text + _text\n                });\n              } else {\n                insertPositionHint = false;\n              }\n            } else {\n              insertPositionHint = false;\n            }\n            if (canStoreDiff) {\n              storeDiff(_start2.path, _diff);\n              return;\n            }\n          }\n          return scheduleAction(function () {\n            return slate.Editor.insertText(editor, _text);\n          }, {\n            at: targetRange\n          });\n        }\n    }\n  };\n  var hasPendingAction = function hasPendingAction() {\n    return !!slateDom.EDITOR_TO_PENDING_ACTION.get(editor);\n  };\n  var hasPendingDiffs = function hasPendingDiffs() {\n    var _EDITOR_TO_PENDING_DI4;\n    return !!((_EDITOR_TO_PENDING_DI4 = slateDom.EDITOR_TO_PENDING_DIFFS.get(editor)) !== null && _EDITOR_TO_PENDING_DI4 !== void 0 && _EDITOR_TO_PENDING_DI4.length);\n  };\n  var hasPendingChanges = function hasPendingChanges() {\n    return hasPendingAction() || hasPendingDiffs();\n  };\n  var isFlushing = function isFlushing() {\n    return flushing;\n  };\n  var handleUserSelect = function handleUserSelect(range) {\n    slateDom.EDITOR_TO_PENDING_SELECTION.set(editor, range);\n    if (flushTimeoutId) {\n      clearTimeout(flushTimeoutId);\n      flushTimeoutId = null;\n    }\n    var selection = editor.selection;\n    if (!range) {\n      return;\n    }\n    var pathChanged = !selection || !slate.Path.equals(selection.anchor.path, range.anchor.path);\n    var parentPathChanged = !selection || !slate.Path.equals(selection.anchor.path.slice(0, -1), range.anchor.path.slice(0, -1));\n    if (pathChanged && insertPositionHint || parentPathChanged) {\n      insertPositionHint = false;\n    }\n    if (pathChanged || hasPendingDiffs()) {\n      flushTimeoutId = setTimeout(flush, FLUSH_DELAY);\n    }\n  };\n  var handleInput = function handleInput() {\n    if (hasPendingAction() || !hasPendingDiffs()) {\n      flush();\n    }\n  };\n  var handleKeyDown = function handleKeyDown(_) {\n    // COMPAT: Swiftkey closes the keyboard when typing inside a empty node\n    // directly next to a non-contenteditable element (= the placeholder).\n    // The only event fired soon enough for us to allow hiding the placeholder\n    // without swiftkey picking it up is the keydown event, so we have to hide it\n    // here. See https://github.com/ianstormtaylor/slate/pull/4988#issuecomment-1201050535\n    if (!hasPendingDiffs()) {\n      updatePlaceholderVisibility(true);\n      setTimeout(updatePlaceholderVisibility);\n    }\n  };\n  var scheduleFlush = function scheduleFlush() {\n    if (!hasPendingAction()) {\n      actionTimeoutId = setTimeout(flush);\n    }\n  };\n  var handleDomMutations = function handleDomMutations(mutations) {\n    if (hasPendingDiffs() || hasPendingAction()) {\n      return;\n    }\n    if (mutations.some(function (mutation) {\n      return slateDom.isTrackedMutation(editor, mutation, mutations);\n    })) {\n      var _EDITOR_TO_FORCE_REND;\n      // Cause a re-render to restore the dom state if we encounter tracked mutations without\n      // a corresponding pending action.\n      (_EDITOR_TO_FORCE_REND = slateDom.EDITOR_TO_FORCE_RENDER.get(editor)) === null || _EDITOR_TO_FORCE_REND === void 0 || _EDITOR_TO_FORCE_REND();\n    }\n  };\n  return {\n    flush: flush,\n    scheduleFlush: scheduleFlush,\n    hasPendingDiffs: hasPendingDiffs,\n    hasPendingAction: hasPendingAction,\n    hasPendingChanges: hasPendingChanges,\n    isFlushing: isFlushing,\n    handleUserSelect: handleUserSelect,\n    handleCompositionEnd: handleCompositionEnd,\n    handleCompositionStart: handleCompositionStart,\n    handleDOMBeforeInput: handleDOMBeforeInput,\n    handleKeyDown: handleKeyDown,\n    handleDomMutations: handleDomMutations,\n    handleInput: handleInput\n  };\n}\n\nfunction useIsMounted() {\n  var isMountedRef = React.useRef(false);\n  React.useEffect(function () {\n    isMountedRef.current = true;\n    return function () {\n      isMountedRef.current = false;\n    };\n  }, []);\n  return isMountedRef.current;\n}\n\n/**\n * Prevent warning on SSR by falling back to useEffect when DOM isn't available\n */\nvar useIsomorphicLayoutEffect = slateDom.CAN_USE_DOM ? React.useLayoutEffect : React.useEffect;\n\nfunction useMutationObserver(node, callback, options) {\n  var _useState = React.useState(function () {\n      return new MutationObserver(callback);\n    }),\n    _useState2 = _slicedToArray(_useState, 1),\n    mutationObserver = _useState2[0];\n  useIsomorphicLayoutEffect(function () {\n    // Discard mutations caused during render phase. This works due to react calling\n    // useLayoutEffect synchronously after the render phase before the next tick.\n    mutationObserver.takeRecords();\n  });\n  React.useEffect(function () {\n    if (!node.current) {\n      throw new Error('Failed to attach MutationObserver, `node` is undefined');\n    }\n    mutationObserver.observe(node.current, options);\n    return function () {\n      return mutationObserver.disconnect();\n    };\n  }, [mutationObserver, node, options]);\n}\n\nvar _excluded$2 = [\"node\"];\nfunction ownKeys$4(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread$4(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$4(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$4(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nvar MUTATION_OBSERVER_CONFIG$1 = {\n  subtree: true,\n  childList: true,\n  characterData: true\n};\nvar useAndroidInputManager = !slateDom.IS_ANDROID ? function () {\n  return null;\n} : function (_ref) {\n  var node = _ref.node,\n    options = _objectWithoutProperties(_ref, _excluded$2);\n  if (!slateDom.IS_ANDROID) {\n    return null;\n  }\n  var editor = useSlateStatic();\n  var isMounted = useIsMounted();\n  var _useState = React.useState(function () {\n      return createAndroidInputManager(_objectSpread$4({\n        editor: editor\n      }, options));\n    }),\n    _useState2 = _slicedToArray(_useState, 1),\n    inputManager = _useState2[0];\n  useMutationObserver(node, inputManager.handleDomMutations, MUTATION_OBSERVER_CONFIG$1);\n  slateDom.EDITOR_TO_SCHEDULE_FLUSH.set(editor, inputManager.scheduleFlush);\n  if (isMounted) {\n    inputManager.flush();\n  }\n  return inputManager;\n};\n\nfunction ownKeys$3(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread$3(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$3(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$3(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\n/**\n * Leaf content strings.\n */\nvar String$1 = function String(props) {\n  var isLast = props.isLast,\n    leaf = props.leaf,\n    parent = props.parent,\n    text = props.text;\n  var editor = useSlateStatic();\n  var path = ReactEditor.findPath(editor, text);\n  var parentPath = slate.Path.parent(path);\n  var isMarkPlaceholder = Boolean(leaf[slateDom.MARK_PLACEHOLDER_SYMBOL]);\n  // COMPAT: Render text inside void nodes with a zero-width space.\n  // So the node can contain selection but the text is not visible.\n  if (editor.isVoid(parent)) {\n    return /*#__PURE__*/React.createElement(ZeroWidthString, {\n      length: slate.Node.string(parent).length\n    });\n  }\n  // COMPAT: If this is the last text node in an empty block, render a zero-\n  // width space that will convert into a line break when copying and pasting\n  // to support expected plain text.\n  if (leaf.text === '' && parent.children[parent.children.length - 1] === text && !editor.isInline(parent) && slate.Editor.string(editor, parentPath) === '') {\n    return /*#__PURE__*/React.createElement(ZeroWidthString, {\n      isLineBreak: true,\n      isMarkPlaceholder: isMarkPlaceholder\n    });\n  }\n  // COMPAT: If the text is empty, it's because it's on the edge of an inline\n  // node, so we render a zero-width space so that the selection can be\n  // inserted next to it still.\n  if (leaf.text === '') {\n    return /*#__PURE__*/React.createElement(ZeroWidthString, {\n      isMarkPlaceholder: isMarkPlaceholder\n    });\n  }\n  // COMPAT: Browsers will collapse trailing new lines at the end of blocks,\n  // so we need to add an extra trailing new lines to prevent that.\n  if (isLast && leaf.text.slice(-1) === '\\n') {\n    return /*#__PURE__*/React.createElement(TextString, {\n      isTrailing: true,\n      text: leaf.text\n    });\n  }\n  return /*#__PURE__*/React.createElement(TextString, {\n    text: leaf.text\n  });\n};\n/**\n * Leaf strings with text in them.\n */\nvar TextString = function TextString(props) {\n  var text = props.text,\n    _props$isTrailing = props.isTrailing,\n    isTrailing = _props$isTrailing === void 0 ? false : _props$isTrailing;\n  var ref = React.useRef(null);\n  var getTextContent = function getTextContent() {\n    return \"\".concat(text !== null && text !== void 0 ? text : '').concat(isTrailing ? '\\n' : '');\n  };\n  var _useState = React.useState(getTextContent),\n    _useState2 = _slicedToArray(_useState, 1),\n    initialText = _useState2[0];\n  // This is the actual text rendering boundary where we interface with the DOM\n  // The text is not rendered as part of the virtual DOM, as since we handle basic character insertions natively,\n  // updating the DOM is not a one way dataflow anymore. What we need here is not reconciliation and diffing\n  // with previous version of the virtual DOM, but rather diffing with the actual DOM element, and replace the DOM <span> content\n  // exactly if and only if its current content does not match our current virtual DOM.\n  // Otherwise the DOM TextNode would always be replaced by React as the user types, which interferes with native text features,\n  // eg makes native spellcheck opt out from checking the text node.\n  // useLayoutEffect: updating our span before browser paint\n  useIsomorphicLayoutEffect(function () {\n    // null coalescing text to make sure we're not outputing \"null\" as a string in the extreme case it is nullish at runtime\n    var textWithTrailing = getTextContent();\n    if (ref.current && ref.current.textContent !== textWithTrailing) {\n      ref.current.textContent = textWithTrailing;\n    }\n    // intentionally not specifying dependencies, so that this effect runs on every render\n    // as this effectively replaces \"specifying the text in the virtual DOM under the <span> below\" on each render\n  });\n  // We intentionally render a memoized <span> that only receives the initial text content when the component is mounted.\n  // We defer to the layout effect above to update the `textContent` of the span element when needed.\n  return /*#__PURE__*/React.createElement(MemoizedText$1, {\n    ref: ref\n  }, initialText);\n};\nvar MemoizedText$1 = /*#__PURE__*/React.memo( /*#__PURE__*/React.forwardRef(function (props, ref) {\n  return /*#__PURE__*/React.createElement(\"span\", {\n    \"data-slate-string\": true,\n    ref: ref\n  }, props.children);\n}));\n/**\n * Leaf strings without text, render as zero-width strings.\n */\nvar ZeroWidthString = function ZeroWidthString(props) {\n  var _props$length = props.length,\n    length = _props$length === void 0 ? 0 : _props$length,\n    _props$isLineBreak = props.isLineBreak,\n    isLineBreak = _props$isLineBreak === void 0 ? false : _props$isLineBreak,\n    _props$isMarkPlacehol = props.isMarkPlaceholder,\n    isMarkPlaceholder = _props$isMarkPlacehol === void 0 ? false : _props$isMarkPlacehol;\n  var attributes = {\n    'data-slate-zero-width': isLineBreak ? 'n' : 'z',\n    'data-slate-length': length\n  };\n  if (isMarkPlaceholder) {\n    attributes['data-slate-mark-placeholder'] = true;\n  }\n  return /*#__PURE__*/React.createElement(\"span\", _objectSpread$3({}, attributes), !(slateDom.IS_ANDROID || slateDom.IS_IOS) || !isLineBreak ? \"\\uFEFF\" : null, isLineBreak ? /*#__PURE__*/React.createElement(\"br\", null) : null);\n};\n\nfunction ownKeys$2(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread$2(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$2(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$2(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\n// Delay the placeholder on Android to prevent the keyboard from closing.\n// (https://github.com/ianstormtaylor/slate/pull/5368)\nvar PLACEHOLDER_DELAY = slateDom.IS_ANDROID ? 300 : 0;\nfunction disconnectPlaceholderResizeObserver(placeholderResizeObserver, releaseObserver) {\n  if (placeholderResizeObserver.current) {\n    placeholderResizeObserver.current.disconnect();\n    if (releaseObserver) {\n      placeholderResizeObserver.current = null;\n    }\n  }\n}\nfunction clearTimeoutRef(timeoutRef) {\n  if (timeoutRef.current) {\n    clearTimeout(timeoutRef.current);\n    timeoutRef.current = null;\n  }\n}\n/**\n * Individual leaves in a text node with unique formatting.\n */\nvar Leaf = function Leaf(props) {\n  var leaf = props.leaf,\n    isLast = props.isLast,\n    text = props.text,\n    parent = props.parent,\n    renderPlaceholder = props.renderPlaceholder,\n    _props$renderLeaf = props.renderLeaf,\n    renderLeaf = _props$renderLeaf === void 0 ? function (props) {\n      return /*#__PURE__*/React.createElement(DefaultLeaf, _objectSpread$2({}, props));\n    } : _props$renderLeaf;\n  var editor = useSlateStatic();\n  var placeholderResizeObserver = React.useRef(null);\n  var placeholderRef = React.useRef(null);\n  var _useState = React.useState(false),\n    _useState2 = _slicedToArray(_useState, 2),\n    showPlaceholder = _useState2[0],\n    setShowPlaceholder = _useState2[1];\n  var showPlaceholderTimeoutRef = React.useRef(null);\n  var callbackPlaceholderRef = React.useCallback(function (placeholderEl) {\n    disconnectPlaceholderResizeObserver(placeholderResizeObserver, placeholderEl == null);\n    if (placeholderEl == null) {\n      var _leaf$onPlaceholderRe;\n      slateDom.EDITOR_TO_PLACEHOLDER_ELEMENT[\"delete\"](editor);\n      (_leaf$onPlaceholderRe = leaf.onPlaceholderResize) === null || _leaf$onPlaceholderRe === void 0 || _leaf$onPlaceholderRe.call(leaf, null);\n    } else {\n      slateDom.EDITOR_TO_PLACEHOLDER_ELEMENT.set(editor, placeholderEl);\n      if (!placeholderResizeObserver.current) {\n        // Create a new observer and observe the placeholder element.\n        var ResizeObserver = window.ResizeObserver || resizeObserver.ResizeObserver;\n        placeholderResizeObserver.current = new ResizeObserver(function () {\n          var _leaf$onPlaceholderRe2;\n          (_leaf$onPlaceholderRe2 = leaf.onPlaceholderResize) === null || _leaf$onPlaceholderRe2 === void 0 || _leaf$onPlaceholderRe2.call(leaf, placeholderEl);\n        });\n      }\n      placeholderResizeObserver.current.observe(placeholderEl);\n      placeholderRef.current = placeholderEl;\n    }\n  }, [placeholderRef, leaf, editor]);\n  var children = /*#__PURE__*/React.createElement(String$1, {\n    isLast: isLast,\n    leaf: leaf,\n    parent: parent,\n    text: text\n  });\n  var leafIsPlaceholder = Boolean(leaf[slateDom.PLACEHOLDER_SYMBOL]);\n  React.useEffect(function () {\n    if (leafIsPlaceholder) {\n      if (!showPlaceholderTimeoutRef.current) {\n        // Delay the placeholder, so it will not render in a selection\n        showPlaceholderTimeoutRef.current = setTimeout(function () {\n          setShowPlaceholder(true);\n          showPlaceholderTimeoutRef.current = null;\n        }, PLACEHOLDER_DELAY);\n      }\n    } else {\n      clearTimeoutRef(showPlaceholderTimeoutRef);\n      setShowPlaceholder(false);\n    }\n    return function () {\n      return clearTimeoutRef(showPlaceholderTimeoutRef);\n    };\n  }, [leafIsPlaceholder, setShowPlaceholder]);\n  if (leafIsPlaceholder && showPlaceholder) {\n    var placeholderProps = {\n      children: leaf.placeholder,\n      attributes: {\n        'data-slate-placeholder': true,\n        style: {\n          position: 'absolute',\n          top: 0,\n          pointerEvents: 'none',\n          width: '100%',\n          maxWidth: '100%',\n          display: 'block',\n          opacity: '0.333',\n          userSelect: 'none',\n          textDecoration: 'none',\n          // Fixes https://github.com/udecode/plate/issues/2315\n          WebkitUserModify: slateDom.IS_WEBKIT ? 'inherit' : undefined\n        },\n        contentEditable: false,\n        ref: callbackPlaceholderRef\n      }\n    };\n    children = /*#__PURE__*/React.createElement(React.Fragment, null, renderPlaceholder(placeholderProps), children);\n  }\n  // COMPAT: Having the `data-` attributes on these leaf elements ensures that\n  // in certain misbehaving browsers they aren't weirdly cloned/destroyed by\n  // contenteditable behaviors. (2019/05/08)\n  var attributes = {\n    'data-slate-leaf': true\n  };\n  return renderLeaf({\n    attributes: attributes,\n    children: children,\n    leaf: leaf,\n    text: text\n  });\n};\nvar MemoizedLeaf = /*#__PURE__*/React.memo(Leaf, function (prev, next) {\n  return next.parent === prev.parent && next.isLast === prev.isLast && next.renderLeaf === prev.renderLeaf && next.renderPlaceholder === prev.renderPlaceholder && next.text === prev.text && slate.Text.equals(next.leaf, prev.leaf) && next.leaf[slateDom.PLACEHOLDER_SYMBOL] === prev.leaf[slateDom.PLACEHOLDER_SYMBOL];\n});\nvar DefaultLeaf = function DefaultLeaf(props) {\n  var attributes = props.attributes,\n    children = props.children;\n  return /*#__PURE__*/React.createElement(\"span\", _objectSpread$2({}, attributes), children);\n};\n\n/**\n * Text.\n */\nvar Text = function Text(props) {\n  var decorations = props.decorations,\n    isLast = props.isLast,\n    parent = props.parent,\n    renderPlaceholder = props.renderPlaceholder,\n    renderLeaf = props.renderLeaf,\n    text = props.text;\n  var editor = useSlateStatic();\n  var ref = React.useRef(null);\n  var leaves = slate.Text.decorations(text, decorations);\n  var key = ReactEditor.findKey(editor, text);\n  var children = [];\n  for (var i = 0; i < leaves.length; i++) {\n    var leaf = leaves[i];\n    children.push( /*#__PURE__*/React.createElement(MemoizedLeaf, {\n      isLast: isLast && i === leaves.length - 1,\n      key: \"\".concat(key.id, \"-\").concat(i),\n      renderPlaceholder: renderPlaceholder,\n      leaf: leaf,\n      text: text,\n      parent: parent,\n      renderLeaf: renderLeaf\n    }));\n  }\n  // Update element-related weak maps with the DOM element ref.\n  var callbackRef = React.useCallback(function (span) {\n    var KEY_TO_ELEMENT = slateDom.EDITOR_TO_KEY_TO_ELEMENT.get(editor);\n    if (span) {\n      KEY_TO_ELEMENT === null || KEY_TO_ELEMENT === void 0 || KEY_TO_ELEMENT.set(key, span);\n      slateDom.NODE_TO_ELEMENT.set(text, span);\n      slateDom.ELEMENT_TO_NODE.set(span, text);\n    } else {\n      KEY_TO_ELEMENT === null || KEY_TO_ELEMENT === void 0 || KEY_TO_ELEMENT[\"delete\"](key);\n      slateDom.NODE_TO_ELEMENT[\"delete\"](text);\n      if (ref.current) {\n        slateDom.ELEMENT_TO_NODE[\"delete\"](ref.current);\n      }\n    }\n    ref.current = span;\n  }, [ref, editor, key, text]);\n  return /*#__PURE__*/React.createElement(\"span\", {\n    \"data-slate-node\": \"text\",\n    ref: callbackRef\n  }, children);\n};\nvar MemoizedText = /*#__PURE__*/React.memo(Text, function (prev, next) {\n  return next.parent === prev.parent && next.isLast === prev.isLast && next.renderLeaf === prev.renderLeaf && next.renderPlaceholder === prev.renderPlaceholder && next.text === prev.text && slateDom.isTextDecorationsEqual(next.decorations, prev.decorations);\n});\n\nfunction ownKeys$1(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread$1(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$1(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$1(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\n/**\n * Element.\n */\nvar Element = function Element(props) {\n  var decorations = props.decorations,\n    element = props.element,\n    _props$renderElement = props.renderElement,\n    renderElement = _props$renderElement === void 0 ? function (p) {\n      return /*#__PURE__*/React.createElement(DefaultElement, _objectSpread$1({}, p));\n    } : _props$renderElement,\n    renderPlaceholder = props.renderPlaceholder,\n    renderLeaf = props.renderLeaf,\n    selection = props.selection;\n  var editor = useSlateStatic();\n  var readOnly = useReadOnly();\n  var isInline = editor.isInline(element);\n  var key = ReactEditor.findKey(editor, element);\n  var ref = React.useCallback(function (ref) {\n    // Update element-related weak maps with the DOM element ref.\n    var KEY_TO_ELEMENT = slateDom.EDITOR_TO_KEY_TO_ELEMENT.get(editor);\n    if (ref) {\n      KEY_TO_ELEMENT === null || KEY_TO_ELEMENT === void 0 || KEY_TO_ELEMENT.set(key, ref);\n      slateDom.NODE_TO_ELEMENT.set(element, ref);\n      slateDom.ELEMENT_TO_NODE.set(ref, element);\n    } else {\n      KEY_TO_ELEMENT === null || KEY_TO_ELEMENT === void 0 || KEY_TO_ELEMENT[\"delete\"](key);\n      slateDom.NODE_TO_ELEMENT[\"delete\"](element);\n    }\n  }, [editor, key, element]);\n  var children = useChildren({\n    decorations: decorations,\n    node: element,\n    renderElement: renderElement,\n    renderPlaceholder: renderPlaceholder,\n    renderLeaf: renderLeaf,\n    selection: selection\n  });\n  // Attributes that the developer must mix into the element in their\n  // custom node renderer component.\n  var attributes = {\n    'data-slate-node': 'element',\n    ref: ref\n  };\n  if (isInline) {\n    attributes['data-slate-inline'] = true;\n  }\n  // If it's a block node with inline children, add the proper `dir` attribute\n  // for text direction.\n  if (!isInline && slate.Editor.hasInlines(editor, element)) {\n    var text = slate.Node.string(element);\n    var dir = getDirection(text);\n    if (dir === 'rtl') {\n      attributes.dir = dir;\n    }\n  }\n  // If it's a void node, wrap the children in extra void-specific elements.\n  if (slate.Editor.isVoid(editor, element)) {\n    attributes['data-slate-void'] = true;\n    if (!readOnly && isInline) {\n      attributes.contentEditable = false;\n    }\n    var Tag = isInline ? 'span' : 'div';\n    var _Node$texts = slate.Node.texts(element),\n      _Node$texts2 = _slicedToArray(_Node$texts, 1),\n      _Node$texts2$ = _slicedToArray(_Node$texts2[0], 1),\n      _text = _Node$texts2$[0];\n    children = /*#__PURE__*/React.createElement(Tag, {\n      \"data-slate-spacer\": true,\n      style: {\n        height: '0',\n        color: 'transparent',\n        outline: 'none',\n        position: 'absolute'\n      }\n    }, /*#__PURE__*/React.createElement(MemoizedText, {\n      renderPlaceholder: renderPlaceholder,\n      decorations: [],\n      isLast: false,\n      parent: element,\n      text: _text\n    }));\n    slateDom.NODE_TO_INDEX.set(_text, 0);\n    slateDom.NODE_TO_PARENT.set(_text, element);\n  }\n  return renderElement({\n    attributes: attributes,\n    children: children,\n    element: element\n  });\n};\nvar MemoizedElement = /*#__PURE__*/React.memo(Element, function (prev, next) {\n  return prev.element === next.element && prev.renderElement === next.renderElement && prev.renderLeaf === next.renderLeaf && prev.renderPlaceholder === next.renderPlaceholder && slateDom.isElementDecorationsEqual(prev.decorations, next.decorations) && (prev.selection === next.selection || !!prev.selection && !!next.selection && slate.Range.equals(prev.selection, next.selection));\n});\n/**\n * The default element renderer.\n */\nvar DefaultElement = function DefaultElement(props) {\n  var attributes = props.attributes,\n    children = props.children,\n    element = props.element;\n  var editor = useSlateStatic();\n  var Tag = editor.isInline(element) ? 'span' : 'div';\n  return /*#__PURE__*/React.createElement(Tag, _objectSpread$1(_objectSpread$1({}, attributes), {}, {\n    style: {\n      position: 'relative'\n    }\n  }), children);\n};\n\n/**\n * A React context for sharing the `decorate` prop of the editable.\n */\nvar DecorateContext = /*#__PURE__*/React.createContext(function () {\n  return [];\n});\n/**\n * Get the current `decorate` prop of the editable.\n */\nvar useDecorate = function useDecorate() {\n  return React.useContext(DecorateContext);\n};\n\n/**\n * A React context for sharing the `selected` state of an element.\n */\nvar SelectedContext = /*#__PURE__*/React.createContext(false);\n/**\n * Get the current `selected` state of an element.\n */\nvar useSelected = function useSelected() {\n  return React.useContext(SelectedContext);\n};\n\nfunction _createForOfIteratorHelper$1(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray$1(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\nfunction _unsupportedIterableToArray$1(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray$1(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray$1(o, minLen); }\nfunction _arrayLikeToArray$1(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\n/**\n * Children.\n */\nvar useChildren = function useChildren(props) {\n  var decorations = props.decorations,\n    node = props.node,\n    renderElement = props.renderElement,\n    renderPlaceholder = props.renderPlaceholder,\n    renderLeaf = props.renderLeaf,\n    selection = props.selection;\n  var decorate = useDecorate();\n  var editor = useSlateStatic();\n  slateDom.IS_NODE_MAP_DIRTY.set(editor, false);\n  var path = ReactEditor.findPath(editor, node);\n  var children = [];\n  var isLeafBlock = slate.Element.isElement(node) && !editor.isInline(node) && slate.Editor.hasInlines(editor, node);\n  for (var i = 0; i < node.children.length; i++) {\n    var p = path.concat(i);\n    var n = node.children[i];\n    var key = ReactEditor.findKey(editor, n);\n    var range = slate.Editor.range(editor, p);\n    var sel = selection && slate.Range.intersection(range, selection);\n    var ds = decorate([n, p]);\n    var _iterator = _createForOfIteratorHelper$1(decorations),\n      _step;\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var dec = _step.value;\n        var d = slate.Range.intersection(dec, range);\n        if (d) {\n          ds.push(d);\n        }\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n    if (slate.Element.isElement(n)) {\n      children.push( /*#__PURE__*/React.createElement(SelectedContext.Provider, {\n        key: \"provider-\".concat(key.id),\n        value: !!sel\n      }, /*#__PURE__*/React.createElement(MemoizedElement, {\n        decorations: ds,\n        element: n,\n        key: key.id,\n        renderElement: renderElement,\n        renderPlaceholder: renderPlaceholder,\n        renderLeaf: renderLeaf,\n        selection: sel\n      })));\n    } else {\n      children.push( /*#__PURE__*/React.createElement(MemoizedText, {\n        decorations: ds,\n        key: key.id,\n        isLast: isLeafBlock && i === node.children.length - 1,\n        parent: node,\n        renderPlaceholder: renderPlaceholder,\n        renderLeaf: renderLeaf,\n        text: n\n      }));\n    }\n    slateDom.NODE_TO_INDEX.set(n, i);\n    slateDom.NODE_TO_PARENT.set(n, node);\n  }\n  return children;\n};\n\n/**\n * A React context for sharing the `readOnly` state of the editor.\n */\nvar ReadOnlyContext = /*#__PURE__*/React.createContext(false);\n/**\n * Get the current `readOnly` state of the editor.\n */\nvar useReadOnly = function useReadOnly() {\n  return React.useContext(ReadOnlyContext);\n};\n\nvar SlateContext = /*#__PURE__*/React.createContext(null);\n/**\n * Get the current editor object from the React context.\n */\nvar useSlate = function useSlate() {\n  var context = React.useContext(SlateContext);\n  if (!context) {\n    throw new Error(\"The `useSlate` hook must be used inside the <Slate> component's context.\");\n  }\n  var editor = context.editor;\n  return editor;\n};\nvar useSlateWithV = function useSlateWithV() {\n  var context = React.useContext(SlateContext);\n  if (!context) {\n    throw new Error(\"The `useSlate` hook must be used inside the <Slate> component's context.\");\n  }\n  return context;\n};\n\nfunction useTrackUserInput() {\n  var editor = useSlateStatic();\n  var receivedUserInput = React.useRef(false);\n  var animationFrameIdRef = React.useRef(0);\n  var onUserInput = React.useCallback(function () {\n    if (receivedUserInput.current) {\n      return;\n    }\n    receivedUserInput.current = true;\n    var window = ReactEditor.getWindow(editor);\n    window.cancelAnimationFrame(animationFrameIdRef.current);\n    animationFrameIdRef.current = window.requestAnimationFrame(function () {\n      receivedUserInput.current = false;\n    });\n  }, [editor]);\n  React.useEffect(function () {\n    return function () {\n      return cancelAnimationFrame(animationFrameIdRef.current);\n    };\n  }, []);\n  return {\n    receivedUserInput: receivedUserInput,\n    onUserInput: onUserInput\n  };\n}\n\nvar classCallCheck = createCommonjsModule(function (module) {\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nmodule.exports = _classCallCheck, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n});\n\nvar _classCallCheck = unwrapExports(classCallCheck);\n\nvar createClass = createCommonjsModule(function (module) {\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, toPropertyKey(descriptor.key), descriptor);\n  }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  Object.defineProperty(Constructor, \"prototype\", {\n    writable: false\n  });\n  return Constructor;\n}\nmodule.exports = _createClass, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n});\n\nvar _createClass = unwrapExports(createClass);\n\nvar assertThisInitialized = createCommonjsModule(function (module) {\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n  return self;\n}\nmodule.exports = _assertThisInitialized, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n});\n\nvar _assertThisInitialized = unwrapExports(assertThisInitialized);\n\nvar setPrototypeOf = createCommonjsModule(function (module) {\nfunction _setPrototypeOf(o, p) {\n  module.exports = _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  }, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n  return _setPrototypeOf(o, p);\n}\nmodule.exports = _setPrototypeOf, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n});\n\nunwrapExports(setPrototypeOf);\n\nvar inherits = createCommonjsModule(function (module) {\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  Object.defineProperty(subClass, \"prototype\", {\n    writable: false\n  });\n  if (superClass) setPrototypeOf(subClass, superClass);\n}\nmodule.exports = _inherits, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n});\n\nvar _inherits = unwrapExports(inherits);\n\nvar possibleConstructorReturn = createCommonjsModule(function (module) {\nvar _typeof = _typeof_1[\"default\"];\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  } else if (call !== void 0) {\n    throw new TypeError(\"Derived constructors may only return object or undefined\");\n  }\n  return assertThisInitialized(self);\n}\nmodule.exports = _possibleConstructorReturn, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n});\n\nvar _possibleConstructorReturn = unwrapExports(possibleConstructorReturn);\n\nvar getPrototypeOf = createCommonjsModule(function (module) {\nfunction _getPrototypeOf(o) {\n  module.exports = _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  }, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n  return _getPrototypeOf(o);\n}\nmodule.exports = _getPrototypeOf, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n});\n\nvar _getPrototypeOf = unwrapExports(getPrototypeOf);\n\nvar arrayWithoutHoles = createCommonjsModule(function (module) {\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}\nmodule.exports = _arrayWithoutHoles, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n});\n\nunwrapExports(arrayWithoutHoles);\n\nvar iterableToArray = createCommonjsModule(function (module) {\nfunction _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\nmodule.exports = _iterableToArray, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n});\n\nunwrapExports(iterableToArray);\n\nvar nonIterableSpread = createCommonjsModule(function (module) {\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nmodule.exports = _nonIterableSpread, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n});\n\nunwrapExports(nonIterableSpread);\n\nvar toConsumableArray = createCommonjsModule(function (module) {\nfunction _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}\nmodule.exports = _toConsumableArray, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n});\n\nvar _toConsumableArray = unwrapExports(toConsumableArray);\n\nvar createRestoreDomManager = function createRestoreDomManager(editor, receivedUserInput) {\n  var bufferedMutations = [];\n  var clear = function clear() {\n    bufferedMutations = [];\n  };\n  var registerMutations = function registerMutations(mutations) {\n    var _bufferedMutations;\n    if (!receivedUserInput.current) {\n      return;\n    }\n    var trackedMutations = mutations.filter(function (mutation) {\n      return slateDom.isTrackedMutation(editor, mutation, mutations);\n    });\n    (_bufferedMutations = bufferedMutations).push.apply(_bufferedMutations, _toConsumableArray(trackedMutations));\n  };\n  function restoreDOM() {\n    if (bufferedMutations.length > 0) {\n      bufferedMutations.reverse().forEach(function (mutation) {\n        if (mutation.type === 'characterData') {\n          // We don't want to restore the DOM for characterData mutations\n          // because this interrupts the composition.\n          return;\n        }\n        mutation.removedNodes.forEach(function (node) {\n          mutation.target.insertBefore(node, mutation.nextSibling);\n        });\n        mutation.addedNodes.forEach(function (node) {\n          mutation.target.removeChild(node);\n        });\n      });\n      // Clear buffered mutations to ensure we don't undo them twice\n      clear();\n    }\n  }\n  return {\n    registerMutations: registerMutations,\n    restoreDOM: restoreDOM,\n    clear: clear\n  };\n};\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nvar MUTATION_OBSERVER_CONFIG = {\n  subtree: true,\n  childList: true,\n  characterData: true,\n  characterDataOldValue: true\n};\n// We have to use a class component here since we rely on `getSnapshotBeforeUpdate` which has no FC equivalent\n// to run code synchronously immediately before react commits the component update to the DOM.\nvar RestoreDOMComponent = /*#__PURE__*/function (_Component) {\n  _inherits(RestoreDOMComponent, _Component);\n  var _super = _createSuper(RestoreDOMComponent);\n  function RestoreDOMComponent() {\n    var _this;\n    _classCallCheck(this, RestoreDOMComponent);\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    _this = _super.call.apply(_super, [this].concat(args));\n    _defineProperty(_assertThisInitialized(_this), \"context\", null);\n    _defineProperty(_assertThisInitialized(_this), \"manager\", null);\n    _defineProperty(_assertThisInitialized(_this), \"mutationObserver\", null);\n    return _this;\n  }\n  _createClass(RestoreDOMComponent, [{\n    key: \"observe\",\n    value: function observe() {\n      var _this$mutationObserve;\n      var node = this.props.node;\n      if (!node.current) {\n        throw new Error('Failed to attach MutationObserver, `node` is undefined');\n      }\n      (_this$mutationObserve = this.mutationObserver) === null || _this$mutationObserve === void 0 || _this$mutationObserve.observe(node.current, MUTATION_OBSERVER_CONFIG);\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var receivedUserInput = this.props.receivedUserInput;\n      var editor = this.context;\n      this.manager = createRestoreDomManager(editor, receivedUserInput);\n      this.mutationObserver = new MutationObserver(this.manager.registerMutations);\n      this.observe();\n    }\n  }, {\n    key: \"getSnapshotBeforeUpdate\",\n    value: function getSnapshotBeforeUpdate() {\n      var _this$mutationObserve2, _this$mutationObserve3, _this$manager2;\n      var pendingMutations = (_this$mutationObserve2 = this.mutationObserver) === null || _this$mutationObserve2 === void 0 ? void 0 : _this$mutationObserve2.takeRecords();\n      if (pendingMutations !== null && pendingMutations !== void 0 && pendingMutations.length) {\n        var _this$manager;\n        (_this$manager = this.manager) === null || _this$manager === void 0 || _this$manager.registerMutations(pendingMutations);\n      }\n      (_this$mutationObserve3 = this.mutationObserver) === null || _this$mutationObserve3 === void 0 || _this$mutationObserve3.disconnect();\n      (_this$manager2 = this.manager) === null || _this$manager2 === void 0 || _this$manager2.restoreDOM();\n      return null;\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      var _this$manager3;\n      (_this$manager3 = this.manager) === null || _this$manager3 === void 0 || _this$manager3.clear();\n      this.observe();\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      var _this$mutationObserve4;\n      (_this$mutationObserve4 = this.mutationObserver) === null || _this$mutationObserve4 === void 0 || _this$mutationObserve4.disconnect();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return this.props.children;\n    }\n  }]);\n  return RestoreDOMComponent;\n}(React.Component);\n_defineProperty(RestoreDOMComponent, \"contextType\", EditorContext);\nvar RestoreDOM = slateDom.IS_ANDROID ? RestoreDOMComponent : function (_ref) {\n  var children = _ref.children;\n  return /*#__PURE__*/React.createElement(React.Fragment, null, children);\n};\n\n/**\n * A React context for sharing the `composing` state of the editor.\n */\nvar ComposingContext = /*#__PURE__*/React.createContext(false);\n/**\n * Get the current `composing` state of the editor.\n */\nvar useComposing = function useComposing() {\n  return React.useContext(ComposingContext);\n};\n\nvar _excluded$1 = [\"autoFocus\", \"decorate\", \"onDOMBeforeInput\", \"placeholder\", \"readOnly\", \"renderElement\", \"renderLeaf\", \"renderPlaceholder\", \"scrollSelectionIntoView\", \"style\", \"as\", \"disableDefaultStyles\"],\n  _excluded2 = [\"text\"];\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nvar Children = function Children(props) {\n  return /*#__PURE__*/React.createElement(React.Fragment, null, useChildren(props));\n};\n/**\n * Editable.\n */\nvar Editable = /*#__PURE__*/React.forwardRef(function (props, forwardedRef) {\n  var defaultRenderPlaceholder = React.useCallback(function (props) {\n    return /*#__PURE__*/React.createElement(DefaultPlaceholder, _objectSpread({}, props));\n  }, []);\n  var autoFocus = props.autoFocus,\n    _props$decorate = props.decorate,\n    decorate = _props$decorate === void 0 ? defaultDecorate : _props$decorate,\n    propsOnDOMBeforeInput = props.onDOMBeforeInput,\n    placeholder = props.placeholder,\n    _props$readOnly = props.readOnly,\n    readOnly = _props$readOnly === void 0 ? false : _props$readOnly,\n    renderElement = props.renderElement,\n    renderLeaf = props.renderLeaf,\n    _props$renderPlacehol = props.renderPlaceholder,\n    renderPlaceholder = _props$renderPlacehol === void 0 ? defaultRenderPlaceholder : _props$renderPlacehol,\n    _props$scrollSelectio = props.scrollSelectionIntoView,\n    scrollSelectionIntoView = _props$scrollSelectio === void 0 ? defaultScrollSelectionIntoView : _props$scrollSelectio,\n    _props$style = props.style,\n    userStyle = _props$style === void 0 ? {} : _props$style,\n    _props$as = props.as,\n    Component = _props$as === void 0 ? 'div' : _props$as,\n    _props$disableDefault = props.disableDefaultStyles,\n    disableDefaultStyles = _props$disableDefault === void 0 ? false : _props$disableDefault,\n    attributes = _objectWithoutProperties(props, _excluded$1);\n  var editor = useSlate();\n  // Rerender editor when composition status changed\n  var _useState = React.useState(false),\n    _useState2 = _slicedToArray(_useState, 2),\n    isComposing = _useState2[0],\n    setIsComposing = _useState2[1];\n  var ref = React.useRef(null);\n  var deferredOperations = React.useRef([]);\n  var _useState3 = React.useState(),\n    _useState4 = _slicedToArray(_useState3, 2),\n    placeholderHeight = _useState4[0],\n    setPlaceholderHeight = _useState4[1];\n  var processing = React.useRef(false);\n  var _useTrackUserInput = useTrackUserInput(),\n    onUserInput = _useTrackUserInput.onUserInput,\n    receivedUserInput = _useTrackUserInput.receivedUserInput;\n  var _useReducer = React.useReducer(function (s) {\n      return s + 1;\n    }, 0),\n    _useReducer2 = _slicedToArray(_useReducer, 2),\n    forceRender = _useReducer2[1];\n  slateDom.EDITOR_TO_FORCE_RENDER.set(editor, forceRender);\n  // Update internal state on each render.\n  slateDom.IS_READ_ONLY.set(editor, readOnly);\n  // Keep track of some state for the event handler logic.\n  var state = React.useMemo(function () {\n    return {\n      isDraggingInternally: false,\n      isUpdatingSelection: false,\n      latestElement: null,\n      hasMarkPlaceholder: false\n    };\n  }, []);\n  // The autoFocus TextareaHTMLAttribute doesn't do anything on a div, so it\n  // needs to be manually focused.\n  React.useEffect(function () {\n    if (ref.current && autoFocus) {\n      ref.current.focus();\n    }\n  }, [autoFocus]);\n  /**\n   * The AndroidInputManager object has a cyclical dependency on onDOMSelectionChange\n   *\n   * It is defined as a reference to simplify hook dependencies and clarify that\n   * it needs to be initialized.\n   */\n  var androidInputManagerRef = React.useRef();\n  // Listen on the native `selectionchange` event to be able to update any time\n  // the selection changes. This is required because React's `onSelect` is leaky\n  // and non-standard so it doesn't fire until after a selection has been\n  // released. This causes issues in situations where another change happens\n  // while a selection is being dragged.\n  var onDOMSelectionChange = React.useMemo(function () {\n    return throttle(function () {\n      if (slateDom.IS_NODE_MAP_DIRTY.get(editor)) {\n        onDOMSelectionChange();\n        return;\n      }\n      var el = ReactEditor.toDOMNode(editor, editor);\n      var root = el.getRootNode();\n      if (!processing.current && slateDom.IS_WEBKIT && root instanceof ShadowRoot) {\n        processing.current = true;\n        var active = slateDom.getActiveElement();\n        if (active) {\n          document.execCommand('indent');\n        } else {\n          slate.Transforms.deselect(editor);\n        }\n        processing.current = false;\n        return;\n      }\n      var androidInputManager = androidInputManagerRef.current;\n      if ((slateDom.IS_ANDROID || !ReactEditor.isComposing(editor)) && (!state.isUpdatingSelection || androidInputManager !== null && androidInputManager !== void 0 && androidInputManager.isFlushing()) && !state.isDraggingInternally) {\n        var _root = ReactEditor.findDocumentOrShadowRoot(editor);\n        var activeElement = _root.activeElement;\n        var _el = ReactEditor.toDOMNode(editor, editor);\n        var domSelection = slateDom.getSelection(_root);\n        if (activeElement === _el) {\n          state.latestElement = activeElement;\n          slateDom.IS_FOCUSED.set(editor, true);\n        } else {\n          slateDom.IS_FOCUSED[\"delete\"](editor);\n        }\n        if (!domSelection) {\n          return slate.Transforms.deselect(editor);\n        }\n        var anchorNode = domSelection.anchorNode,\n          focusNode = domSelection.focusNode;\n        var anchorNodeSelectable = ReactEditor.hasEditableTarget(editor, anchorNode) || ReactEditor.isTargetInsideNonReadonlyVoid(editor, anchorNode);\n        var focusNodeInEditor = ReactEditor.hasTarget(editor, focusNode);\n        if (anchorNodeSelectable && focusNodeInEditor) {\n          var range = ReactEditor.toSlateRange(editor, domSelection, {\n            exactMatch: false,\n            suppressThrow: true\n          });\n          if (range) {\n            if (!ReactEditor.isComposing(editor) && !(androidInputManager !== null && androidInputManager !== void 0 && androidInputManager.hasPendingChanges()) && !(androidInputManager !== null && androidInputManager !== void 0 && androidInputManager.isFlushing())) {\n              slate.Transforms.select(editor, range);\n            } else {\n              androidInputManager === null || androidInputManager === void 0 || androidInputManager.handleUserSelect(range);\n            }\n          }\n        }\n        // Deselect the editor if the dom selection is not selectable in readonly mode\n        if (readOnly && (!anchorNodeSelectable || !focusNodeInEditor)) {\n          slate.Transforms.deselect(editor);\n        }\n      }\n    }, 100);\n  }, [editor, readOnly, state]);\n  var scheduleOnDOMSelectionChange = React.useMemo(function () {\n    return debounce(onDOMSelectionChange, 0);\n  }, [onDOMSelectionChange]);\n  androidInputManagerRef.current = useAndroidInputManager({\n    node: ref,\n    onDOMSelectionChange: onDOMSelectionChange,\n    scheduleOnDOMSelectionChange: scheduleOnDOMSelectionChange\n  });\n  useIsomorphicLayoutEffect(function () {\n    var _androidInputManagerR, _androidInputManagerR2;\n    // Update element-related weak maps with the DOM element ref.\n    var window;\n    if (ref.current && (window = slateDom.getDefaultView(ref.current))) {\n      slateDom.EDITOR_TO_WINDOW.set(editor, window);\n      slateDom.EDITOR_TO_ELEMENT.set(editor, ref.current);\n      slateDom.NODE_TO_ELEMENT.set(editor, ref.current);\n      slateDom.ELEMENT_TO_NODE.set(ref.current, editor);\n    } else {\n      slateDom.NODE_TO_ELEMENT[\"delete\"](editor);\n    }\n    // Make sure the DOM selection state is in sync.\n    var selection = editor.selection;\n    var root = ReactEditor.findDocumentOrShadowRoot(editor);\n    var domSelection = slateDom.getSelection(root);\n    if (!domSelection || !ReactEditor.isFocused(editor) || (_androidInputManagerR = androidInputManagerRef.current) !== null && _androidInputManagerR !== void 0 && _androidInputManagerR.hasPendingAction()) {\n      return;\n    }\n    var setDomSelection = function setDomSelection(forceChange) {\n      var hasDomSelection = domSelection.type !== 'None';\n      // If the DOM selection is properly unset, we're done.\n      if (!selection && !hasDomSelection) {\n        return;\n      }\n      // Get anchorNode and focusNode\n      var focusNode = domSelection.focusNode;\n      var anchorNode;\n      // COMPAT: In firefox the normal selection way does not work\n      // (https://github.com/ianstormtaylor/slate/pull/5486#issue-1820720223)\n      if (slateDom.IS_FIREFOX && domSelection.rangeCount > 1) {\n        var firstRange = domSelection.getRangeAt(0);\n        var lastRange = domSelection.getRangeAt(domSelection.rangeCount - 1);\n        // Right to left\n        if (firstRange.startContainer === focusNode) {\n          anchorNode = lastRange.endContainer;\n        } else {\n          // Left to right\n          anchorNode = firstRange.startContainer;\n        }\n      } else {\n        anchorNode = domSelection.anchorNode;\n      }\n      // verify that the dom selection is in the editor\n      var editorElement = slateDom.EDITOR_TO_ELEMENT.get(editor);\n      var hasDomSelectionInEditor = false;\n      if (editorElement.contains(anchorNode) && editorElement.contains(focusNode)) {\n        hasDomSelectionInEditor = true;\n      }\n      // If the DOM selection is in the editor and the editor selection is already correct, we're done.\n      if (hasDomSelection && hasDomSelectionInEditor && selection && !forceChange) {\n        var slateRange = ReactEditor.toSlateRange(editor, domSelection, {\n          exactMatch: true,\n          // domSelection is not necessarily a valid Slate range\n          // (e.g. when clicking on contentEditable:false element)\n          suppressThrow: true\n        });\n        if (slateRange && slate.Range.equals(slateRange, selection)) {\n          var _anchorNode;\n          if (!state.hasMarkPlaceholder) {\n            return;\n          }\n          // Ensure selection is inside the mark placeholder\n          if ((_anchorNode = anchorNode) !== null && _anchorNode !== void 0 && (_anchorNode = _anchorNode.parentElement) !== null && _anchorNode !== void 0 && _anchorNode.hasAttribute('data-slate-mark-placeholder')) {\n            return;\n          }\n        }\n      }\n      // when <Editable/> is being controlled through external value\n      // then its children might just change - DOM responds to it on its own\n      // but Slate's value is not being updated through any operation\n      // and thus it doesn't transform selection on its own\n      if (selection && !ReactEditor.hasRange(editor, selection)) {\n        editor.selection = ReactEditor.toSlateRange(editor, domSelection, {\n          exactMatch: false,\n          suppressThrow: true\n        });\n        return;\n      }\n      // Otherwise the DOM selection is out of sync, so update it.\n      state.isUpdatingSelection = true;\n      var newDomRange = null;\n      try {\n        newDomRange = selection && ReactEditor.toDOMRange(editor, selection);\n      } catch (e) {\n        // Ignore, dom and state might be out of sync\n      }\n      if (newDomRange) {\n        if (ReactEditor.isComposing(editor) && !slateDom.IS_ANDROID) {\n          domSelection.collapseToEnd();\n        } else if (slate.Range.isBackward(selection)) {\n          domSelection.setBaseAndExtent(newDomRange.endContainer, newDomRange.endOffset, newDomRange.startContainer, newDomRange.startOffset);\n        } else {\n          domSelection.setBaseAndExtent(newDomRange.startContainer, newDomRange.startOffset, newDomRange.endContainer, newDomRange.endOffset);\n        }\n        scrollSelectionIntoView(editor, newDomRange);\n      } else {\n        domSelection.removeAllRanges();\n      }\n      return newDomRange;\n    };\n    // In firefox if there is more then 1 range and we call setDomSelection we remove the ability to select more cells in a table\n    if (domSelection.rangeCount <= 1) {\n      setDomSelection();\n    }\n    var ensureSelection = ((_androidInputManagerR2 = androidInputManagerRef.current) === null || _androidInputManagerR2 === void 0 ? void 0 : _androidInputManagerR2.isFlushing()) === 'action';\n    if (!slateDom.IS_ANDROID || !ensureSelection) {\n      setTimeout(function () {\n        state.isUpdatingSelection = false;\n      });\n      return;\n    }\n    var timeoutId = null;\n    var animationFrameId = requestAnimationFrame(function () {\n      if (ensureSelection) {\n        var ensureDomSelection = function ensureDomSelection(forceChange) {\n          try {\n            var el = ReactEditor.toDOMNode(editor, editor);\n            el.focus();\n            setDomSelection(forceChange);\n          } catch (e) {\n            // Ignore, dom and state might be out of sync\n          }\n        };\n        // Compat: Android IMEs try to force their selection by manually re-applying it even after we set it.\n        // This essentially would make setting the slate selection during an update meaningless, so we force it\n        // again here. We can't only do it in the setTimeout after the animation frame since that would cause a\n        // visible flicker.\n        ensureDomSelection();\n        timeoutId = setTimeout(function () {\n          // COMPAT: While setting the selection in an animation frame visually correctly sets the selection,\n          // it doesn't update GBoards spellchecker state. We have to manually trigger a selection change after\n          // the animation frame to ensure it displays the correct state.\n          ensureDomSelection(true);\n          state.isUpdatingSelection = false;\n        });\n      }\n    });\n    return function () {\n      cancelAnimationFrame(animationFrameId);\n      if (timeoutId) {\n        clearTimeout(timeoutId);\n      }\n    };\n  });\n  // Listen on the native `beforeinput` event to get real \"Level 2\" events. This\n  // is required because React's `beforeinput` is fake and never really attaches\n  // to the real event sadly. (2019/11/01)\n  // https://github.com/facebook/react/issues/11211\n  var onDOMBeforeInput = React.useCallback(function (event) {\n    var el = ReactEditor.toDOMNode(editor, editor);\n    var root = el.getRootNode();\n    if (processing !== null && processing !== void 0 && processing.current && slateDom.IS_WEBKIT && root instanceof ShadowRoot) {\n      var ranges = event.getTargetRanges();\n      var range = ranges[0];\n      var newRange = new window.Range();\n      newRange.setStart(range.startContainer, range.startOffset);\n      newRange.setEnd(range.endContainer, range.endOffset);\n      // Translate the DOM Range into a Slate Range\n      var slateRange = ReactEditor.toSlateRange(editor, newRange, {\n        exactMatch: false,\n        suppressThrow: false\n      });\n      slate.Transforms.select(editor, slateRange);\n      event.preventDefault();\n      event.stopImmediatePropagation();\n      return;\n    }\n    onUserInput();\n    if (!readOnly && ReactEditor.hasEditableTarget(editor, event.target) && !isDOMEventHandled(event, propsOnDOMBeforeInput)) {\n      var _EDITOR_TO_USER_SELEC;\n      // COMPAT: BeforeInput events aren't cancelable on android, so we have to handle them differently using the android input manager.\n      if (androidInputManagerRef.current) {\n        return androidInputManagerRef.current.handleDOMBeforeInput(event);\n      }\n      // Some IMEs/Chrome extensions like e.g. Grammarly set the selection immediately before\n      // triggering a `beforeinput` expecting the change to be applied to the immediately before\n      // set selection.\n      scheduleOnDOMSelectionChange.flush();\n      onDOMSelectionChange.flush();\n      var selection = editor.selection;\n      var type = event.inputType;\n      var data = event.dataTransfer || event.data || undefined;\n      var isCompositionChange = type === 'insertCompositionText' || type === 'deleteCompositionText';\n      // COMPAT: use composition change events as a hint to where we should insert\n      // composition text if we aren't composing to work around https://github.com/ianstormtaylor/slate/issues/5038\n      if (isCompositionChange && ReactEditor.isComposing(editor)) {\n        return;\n      }\n      var _native = false;\n      if (type === 'insertText' && selection && slate.Range.isCollapsed(selection) &&\n      // Only use native character insertion for single characters a-z or space for now.\n      // Long-press events (hold a + press 4 = ä) to choose a special character otherwise\n      // causes duplicate inserts.\n      event.data && event.data.length === 1 && /[a-z ]/i.test(event.data) &&\n      // Chrome has issues correctly editing the start of nodes: https://bugs.chromium.org/p/chromium/issues/detail?id=1249405\n      // When there is an inline element, e.g. a link, and you select\n      // right after it (the start of the next node).\n      selection.anchor.offset !== 0) {\n        _native = true;\n        // Skip native if there are marks, as\n        // `insertText` will insert a node, not just text.\n        if (editor.marks) {\n          _native = false;\n        }\n        // If the NODE_MAP is dirty, we can't trust the selection anchor (eg ReactEditor.toDOMPoint)\n        if (!slateDom.IS_NODE_MAP_DIRTY.get(editor)) {\n          var _node$parentElement, _window$getComputedSt;\n          // Chrome also has issues correctly editing the end of anchor elements: https://bugs.chromium.org/p/chromium/issues/detail?id=1259100\n          // Therefore we don't allow native events to insert text at the end of anchor nodes.\n          var anchor = selection.anchor;\n          var _ReactEditor$toDOMPoi = ReactEditor.toDOMPoint(editor, anchor),\n            _ReactEditor$toDOMPoi2 = _slicedToArray(_ReactEditor$toDOMPoi, 2),\n            node = _ReactEditor$toDOMPoi2[0],\n            offset = _ReactEditor$toDOMPoi2[1];\n          var anchorNode = (_node$parentElement = node.parentElement) === null || _node$parentElement === void 0 ? void 0 : _node$parentElement.closest('a');\n          var _window = ReactEditor.getWindow(editor);\n          if (_native && anchorNode && ReactEditor.hasDOMNode(editor, anchorNode)) {\n            var _lastText$textContent;\n            // Find the last text node inside the anchor.\n            var lastText = _window === null || _window === void 0 ? void 0 : _window.document.createTreeWalker(anchorNode, NodeFilter.SHOW_TEXT).lastChild();\n            if (lastText === node && ((_lastText$textContent = lastText.textContent) === null || _lastText$textContent === void 0 ? void 0 : _lastText$textContent.length) === offset) {\n              _native = false;\n            }\n          }\n          // Chrome has issues with the presence of tab characters inside elements with whiteSpace = 'pre'\n          // causing abnormal insert behavior: https://bugs.chromium.org/p/chromium/issues/detail?id=1219139\n          if (_native && node.parentElement && (_window === null || _window === void 0 || (_window$getComputedSt = _window.getComputedStyle(node.parentElement)) === null || _window$getComputedSt === void 0 ? void 0 : _window$getComputedSt.whiteSpace) === 'pre') {\n            var block = slate.Editor.above(editor, {\n              at: anchor.path,\n              match: function match(n) {\n                return slate.Element.isElement(n) && slate.Editor.isBlock(editor, n);\n              }\n            });\n            if (block && slate.Node.string(block[0]).includes('\\t')) {\n              _native = false;\n            }\n          }\n        }\n      }\n      // COMPAT: For the deleting forward/backward input types we don't want\n      // to change the selection because it is the range that will be deleted,\n      // and those commands determine that for themselves.\n      // If the NODE_MAP is dirty, we can't trust the selection anchor (eg ReactEditor.toDOMPoint via ReactEditor.toSlateRange)\n      if ((!type.startsWith('delete') || type.startsWith('deleteBy')) && !slateDom.IS_NODE_MAP_DIRTY.get(editor)) {\n        var _event$getTargetRange = event.getTargetRanges(),\n          _event$getTargetRange2 = _slicedToArray(_event$getTargetRange, 1),\n          targetRange = _event$getTargetRange2[0];\n        if (targetRange) {\n          var _range = ReactEditor.toSlateRange(editor, targetRange, {\n            exactMatch: false,\n            suppressThrow: false\n          });\n          if (!selection || !slate.Range.equals(selection, _range)) {\n            _native = false;\n            var selectionRef = !isCompositionChange && editor.selection && slate.Editor.rangeRef(editor, editor.selection);\n            slate.Transforms.select(editor, _range);\n            if (selectionRef) {\n              slateDom.EDITOR_TO_USER_SELECTION.set(editor, selectionRef);\n            }\n          }\n        }\n      }\n      // Composition change types occur while a user is composing text and can't be\n      // cancelled. Let them through and wait for the composition to end.\n      if (isCompositionChange) {\n        return;\n      }\n      if (!_native) {\n        event.preventDefault();\n      }\n      // COMPAT: If the selection is expanded, even if the command seems like\n      // a delete forward/backward command it should delete the selection.\n      if (selection && slate.Range.isExpanded(selection) && type.startsWith('delete')) {\n        var direction = type.endsWith('Backward') ? 'backward' : 'forward';\n        slate.Editor.deleteFragment(editor, {\n          direction: direction\n        });\n        return;\n      }\n      switch (type) {\n        case 'deleteByComposition':\n        case 'deleteByCut':\n        case 'deleteByDrag':\n          {\n            slate.Editor.deleteFragment(editor);\n            break;\n          }\n        case 'deleteContent':\n        case 'deleteContentForward':\n          {\n            slate.Editor.deleteForward(editor);\n            break;\n          }\n        case 'deleteContentBackward':\n          {\n            slate.Editor.deleteBackward(editor);\n            break;\n          }\n        case 'deleteEntireSoftLine':\n          {\n            slate.Editor.deleteBackward(editor, {\n              unit: 'line'\n            });\n            slate.Editor.deleteForward(editor, {\n              unit: 'line'\n            });\n            break;\n          }\n        case 'deleteHardLineBackward':\n          {\n            slate.Editor.deleteBackward(editor, {\n              unit: 'block'\n            });\n            break;\n          }\n        case 'deleteSoftLineBackward':\n          {\n            slate.Editor.deleteBackward(editor, {\n              unit: 'line'\n            });\n            break;\n          }\n        case 'deleteHardLineForward':\n          {\n            slate.Editor.deleteForward(editor, {\n              unit: 'block'\n            });\n            break;\n          }\n        case 'deleteSoftLineForward':\n          {\n            slate.Editor.deleteForward(editor, {\n              unit: 'line'\n            });\n            break;\n          }\n        case 'deleteWordBackward':\n          {\n            slate.Editor.deleteBackward(editor, {\n              unit: 'word'\n            });\n            break;\n          }\n        case 'deleteWordForward':\n          {\n            slate.Editor.deleteForward(editor, {\n              unit: 'word'\n            });\n            break;\n          }\n        case 'insertLineBreak':\n          slate.Editor.insertSoftBreak(editor);\n          break;\n        case 'insertParagraph':\n          {\n            slate.Editor.insertBreak(editor);\n            break;\n          }\n        case 'insertFromComposition':\n        case 'insertFromDrop':\n        case 'insertFromPaste':\n        case 'insertFromYank':\n        case 'insertReplacementText':\n        case 'insertText':\n          {\n            if (type === 'insertFromComposition') {\n              // COMPAT: in Safari, `compositionend` is dispatched after the\n              // `beforeinput` for \"insertFromComposition\". But if we wait for it\n              // then we will abort because we're still composing and the selection\n              // won't be updated properly.\n              // https://www.w3.org/TR/input-events-2/\n              if (ReactEditor.isComposing(editor)) {\n                setIsComposing(false);\n                slateDom.IS_COMPOSING.set(editor, false);\n              }\n            }\n            // use a weak comparison instead of 'instanceof' to allow\n            // programmatic access of paste events coming from external windows\n            // like cypress where cy.window does not work realibly\n            if ((data === null || data === void 0 ? void 0 : data.constructor.name) === 'DataTransfer') {\n              ReactEditor.insertData(editor, data);\n            } else if (typeof data === 'string') {\n              // Only insertText operations use the native functionality, for now.\n              // Potentially expand to single character deletes, as well.\n              if (_native) {\n                deferredOperations.current.push(function () {\n                  return slate.Editor.insertText(editor, data);\n                });\n              } else {\n                slate.Editor.insertText(editor, data);\n              }\n            }\n            break;\n          }\n      }\n      // Restore the actual user section if nothing manually set it.\n      var toRestore = (_EDITOR_TO_USER_SELEC = slateDom.EDITOR_TO_USER_SELECTION.get(editor)) === null || _EDITOR_TO_USER_SELEC === void 0 ? void 0 : _EDITOR_TO_USER_SELEC.unref();\n      slateDom.EDITOR_TO_USER_SELECTION[\"delete\"](editor);\n      if (toRestore && (!editor.selection || !slate.Range.equals(editor.selection, toRestore))) {\n        slate.Transforms.select(editor, toRestore);\n      }\n    }\n  }, [editor, onDOMSelectionChange, onUserInput, propsOnDOMBeforeInput, readOnly, scheduleOnDOMSelectionChange]);\n  var callbackRef = React.useCallback(function (node) {\n    if (node == null) {\n      onDOMSelectionChange.cancel();\n      scheduleOnDOMSelectionChange.cancel();\n      slateDom.EDITOR_TO_ELEMENT[\"delete\"](editor);\n      slateDom.NODE_TO_ELEMENT[\"delete\"](editor);\n      if (ref.current && slateDom.HAS_BEFORE_INPUT_SUPPORT) {\n        // @ts-ignore The `beforeinput` event isn't recognized.\n        ref.current.removeEventListener('beforeinput', onDOMBeforeInput);\n      }\n    } else {\n      // Attach a native DOM event handler for `beforeinput` events, because React's\n      // built-in `onBeforeInput` is actually a leaky polyfill that doesn't expose\n      // real `beforeinput` events sadly... (2019/11/04)\n      // https://github.com/facebook/react/issues/11211\n      if (slateDom.HAS_BEFORE_INPUT_SUPPORT) {\n        // @ts-ignore The `beforeinput` event isn't recognized.\n        node.addEventListener('beforeinput', onDOMBeforeInput);\n      }\n    }\n    ref.current = node;\n    if (typeof forwardedRef === 'function') {\n      forwardedRef(node);\n    } else if (forwardedRef) {\n      forwardedRef.current = node;\n    }\n  }, [onDOMSelectionChange, scheduleOnDOMSelectionChange, editor, onDOMBeforeInput, forwardedRef]);\n  useIsomorphicLayoutEffect(function () {\n    var window = ReactEditor.getWindow(editor);\n    // COMPAT: In Chrome, `selectionchange` events can fire when <input> and\n    // <textarea> elements are appended to the DOM, causing\n    // `editor.selection` to be overwritten in some circumstances.\n    // (2025/01/16) https://issues.chromium.org/issues/389368412\n    var onSelectionChange = function onSelectionChange(_ref) {\n      var target = _ref.target;\n      var targetElement = target instanceof HTMLElement ? target : null;\n      var targetTagName = targetElement === null || targetElement === void 0 ? void 0 : targetElement.tagName;\n      if (targetTagName === 'INPUT' || targetTagName === 'TEXTAREA') {\n        return;\n      }\n      scheduleOnDOMSelectionChange();\n    };\n    // Attach a native DOM event handler for `selectionchange`, because React's\n    // built-in `onSelect` handler doesn't fire for all selection changes. It's\n    // a leaky polyfill that only fires on keypresses or clicks. Instead, we\n    // want to fire for any change to the selection inside the editor.\n    // (2019/11/04) https://github.com/facebook/react/issues/5785\n    window.document.addEventListener('selectionchange', onSelectionChange);\n    // Listen for dragend and drop globally. In Firefox, if a drop handler\n    // initiates an operation that causes the originally dragged element to\n    // unmount, that element will not emit a dragend event. (2024/06/21)\n    var stoppedDragging = function stoppedDragging() {\n      state.isDraggingInternally = false;\n    };\n    window.document.addEventListener('dragend', stoppedDragging);\n    window.document.addEventListener('drop', stoppedDragging);\n    return function () {\n      window.document.removeEventListener('selectionchange', onSelectionChange);\n      window.document.removeEventListener('dragend', stoppedDragging);\n      window.document.removeEventListener('drop', stoppedDragging);\n    };\n  }, [scheduleOnDOMSelectionChange, state]);\n  var decorations = decorate([editor, []]);\n  var showPlaceholder = placeholder && editor.children.length === 1 && Array.from(slate.Node.texts(editor)).length === 1 && slate.Node.string(editor) === '' && !isComposing;\n  var placeHolderResizeHandler = React.useCallback(function (placeholderEl) {\n    if (placeholderEl && showPlaceholder) {\n      var _placeholderEl$getBou;\n      setPlaceholderHeight((_placeholderEl$getBou = placeholderEl.getBoundingClientRect()) === null || _placeholderEl$getBou === void 0 ? void 0 : _placeholderEl$getBou.height);\n    } else {\n      setPlaceholderHeight(undefined);\n    }\n  }, [showPlaceholder]);\n  if (showPlaceholder) {\n    var _decorations$push;\n    var start = slate.Editor.start(editor, []);\n    decorations.push((_decorations$push = {}, _defineProperty(_decorations$push, slateDom.PLACEHOLDER_SYMBOL, true), _defineProperty(_decorations$push, \"placeholder\", placeholder), _defineProperty(_decorations$push, \"onPlaceholderResize\", placeHolderResizeHandler), _defineProperty(_decorations$push, \"anchor\", start), _defineProperty(_decorations$push, \"focus\", start), _decorations$push));\n  }\n  var marks = editor.marks;\n  state.hasMarkPlaceholder = false;\n  if (editor.selection && slate.Range.isCollapsed(editor.selection) && marks) {\n    var anchor = editor.selection.anchor;\n    var leaf = slate.Node.leaf(editor, anchor.path);\n    leaf.text;\n      var rest = _objectWithoutProperties(leaf, _excluded2);\n    // While marks isn't a 'complete' text, we can still use loose Text.equals\n    // here which only compares marks anyway.\n    if (!slate.Text.equals(leaf, marks, {\n      loose: true\n    })) {\n      state.hasMarkPlaceholder = true;\n      var unset = Object.fromEntries(Object.keys(rest).map(function (mark) {\n        return [mark, null];\n      }));\n      decorations.push(_objectSpread(_objectSpread(_objectSpread(_defineProperty({}, slateDom.MARK_PLACEHOLDER_SYMBOL, true), unset), marks), {}, {\n        anchor: anchor,\n        focus: anchor\n      }));\n    }\n  }\n  // Update EDITOR_TO_MARK_PLACEHOLDER_MARKS in setTimeout useEffect to ensure we don't set it\n  // before we receive the composition end event.\n  React.useEffect(function () {\n    setTimeout(function () {\n      var selection = editor.selection;\n      if (selection) {\n        var _anchor = selection.anchor;\n        var _text = slate.Node.leaf(editor, _anchor.path);\n        // While marks isn't a 'complete' text, we can still use loose Text.equals\n        // here which only compares marks anyway.\n        if (marks && !slate.Text.equals(_text, marks, {\n          loose: true\n        })) {\n          slateDom.EDITOR_TO_PENDING_INSERTION_MARKS.set(editor, marks);\n          return;\n        }\n      }\n      slateDom.EDITOR_TO_PENDING_INSERTION_MARKS[\"delete\"](editor);\n    });\n  });\n  return /*#__PURE__*/React.createElement(ReadOnlyContext.Provider, {\n    value: readOnly\n  }, /*#__PURE__*/React.createElement(ComposingContext.Provider, {\n    value: isComposing\n  }, /*#__PURE__*/React.createElement(DecorateContext.Provider, {\n    value: decorate\n  }, /*#__PURE__*/React.createElement(RestoreDOM, {\n    node: ref,\n    receivedUserInput: receivedUserInput\n  }, /*#__PURE__*/React.createElement(Component, _objectSpread(_objectSpread({\n    role: readOnly ? undefined : 'textbox',\n    \"aria-multiline\": readOnly ? undefined : true\n  }, attributes), {}, {\n    // COMPAT: Certain browsers don't support the `beforeinput` event, so we'd\n    // have to use hacks to make these replacement-based features work.\n    // For SSR situations HAS_BEFORE_INPUT_SUPPORT is false and results in prop\n    // mismatch warning app moves to browser. Pass-through consumer props when\n    // not CAN_USE_DOM (SSR) and default to falsy value\n    spellCheck: slateDom.HAS_BEFORE_INPUT_SUPPORT || !slateDom.CAN_USE_DOM ? attributes.spellCheck : false,\n    autoCorrect: slateDom.HAS_BEFORE_INPUT_SUPPORT || !slateDom.CAN_USE_DOM ? attributes.autoCorrect : 'false',\n    autoCapitalize: slateDom.HAS_BEFORE_INPUT_SUPPORT || !slateDom.CAN_USE_DOM ? attributes.autoCapitalize : 'false',\n    \"data-slate-editor\": true,\n    \"data-slate-node\": \"value\",\n    // explicitly set this\n    contentEditable: !readOnly,\n    // in some cases, a decoration needs access to the range / selection to decorate a text node,\n    // then you will select the whole text node when you select part the of text\n    // this magic zIndex=\"-1\" will fix it\n    zindex: -1,\n    suppressContentEditableWarning: true,\n    ref: callbackRef,\n    style: _objectSpread(_objectSpread({}, disableDefaultStyles ? {} : _objectSpread({\n      // Allow positioning relative to the editable element.\n      position: 'relative',\n      // Preserve adjacent whitespace and new lines.\n      whiteSpace: 'pre-wrap',\n      // Allow words to break if they are too long.\n      wordWrap: 'break-word'\n    }, placeholderHeight ? {\n      minHeight: placeholderHeight\n    } : {})), userStyle),\n    onBeforeInput: React.useCallback(function (event) {\n      // COMPAT: Certain browsers don't support the `beforeinput` event, so we\n      // fall back to React's leaky polyfill instead just for it. It\n      // only works for the `insertText` input type.\n      if (!slateDom.HAS_BEFORE_INPUT_SUPPORT && !readOnly && !isEventHandled(event, attributes.onBeforeInput) && ReactEditor.hasSelectableTarget(editor, event.target)) {\n        event.preventDefault();\n        if (!ReactEditor.isComposing(editor)) {\n          var _text2 = event.data;\n          slate.Editor.insertText(editor, _text2);\n        }\n      }\n    }, [attributes.onBeforeInput, editor, readOnly]),\n    onInput: React.useCallback(function (event) {\n      if (isEventHandled(event, attributes.onInput)) {\n        return;\n      }\n      if (androidInputManagerRef.current) {\n        androidInputManagerRef.current.handleInput();\n        return;\n      }\n      // Flush native operations, as native events will have propogated\n      // and we can correctly compare DOM text values in components\n      // to stop rendering, so that browser functions like autocorrect\n      // and spellcheck work as expected.\n      var _iterator = _createForOfIteratorHelper(deferredOperations.current),\n        _step;\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var op = _step.value;\n          op();\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n      deferredOperations.current = [];\n      // COMPAT: Since `beforeinput` doesn't fully `preventDefault`,\n      // there's a chance that content might be placed in the browser's undo stack.\n      // This means undo can be triggered even when the div is not focused,\n      // and it only triggers the input event for the node. (2024/10/09)\n      if (!ReactEditor.isFocused(editor)) {\n        var _native2 = event.nativeEvent;\n        var maybeHistoryEditor = editor;\n        if (_native2.inputType === 'historyUndo' && typeof maybeHistoryEditor.undo === 'function') {\n          maybeHistoryEditor.undo();\n          return;\n        }\n        if (_native2.inputType === 'historyRedo' && typeof maybeHistoryEditor.redo === 'function') {\n          maybeHistoryEditor.redo();\n          return;\n        }\n      }\n    }, [attributes.onInput, editor]),\n    onBlur: React.useCallback(function (event) {\n      if (readOnly || state.isUpdatingSelection || !ReactEditor.hasSelectableTarget(editor, event.target) || isEventHandled(event, attributes.onBlur)) {\n        return;\n      }\n      // COMPAT: If the current `activeElement` is still the previous\n      // one, this is due to the window being blurred when the tab\n      // itself becomes unfocused, so we want to abort early to allow to\n      // editor to stay focused when the tab becomes focused again.\n      var root = ReactEditor.findDocumentOrShadowRoot(editor);\n      if (state.latestElement === root.activeElement) {\n        return;\n      }\n      var relatedTarget = event.relatedTarget;\n      var el = ReactEditor.toDOMNode(editor, editor);\n      // COMPAT: The event should be ignored if the focus is returning\n      // to the editor from an embedded editable element (eg. an <input>\n      // element inside a void node).\n      if (relatedTarget === el) {\n        return;\n      }\n      // COMPAT: The event should be ignored if the focus is moving from\n      // the editor to inside a void node's spacer element.\n      if (slateDom.isDOMElement(relatedTarget) && relatedTarget.hasAttribute('data-slate-spacer')) {\n        return;\n      }\n      // COMPAT: The event should be ignored if the focus is moving to a\n      // non- editable section of an element that isn't a void node (eg.\n      // a list item of the check list example).\n      if (relatedTarget != null && slateDom.isDOMNode(relatedTarget) && ReactEditor.hasDOMNode(editor, relatedTarget)) {\n        var node = ReactEditor.toSlateNode(editor, relatedTarget);\n        if (slate.Element.isElement(node) && !editor.isVoid(node)) {\n          return;\n        }\n      }\n      // COMPAT: Safari doesn't always remove the selection even if the content-\n      // editable element no longer has focus. Refer to:\n      // https://stackoverflow.com/questions/12353247/force-contenteditable-div-to-stop-accepting-input-after-it-loses-focus-under-web\n      if (slateDom.IS_WEBKIT) {\n        var domSelection = slateDom.getSelection(root);\n        domSelection === null || domSelection === void 0 || domSelection.removeAllRanges();\n      }\n      slateDom.IS_FOCUSED[\"delete\"](editor);\n    }, [readOnly, state.isUpdatingSelection, state.latestElement, editor, attributes.onBlur]),\n    onClick: React.useCallback(function (event) {\n      if (ReactEditor.hasTarget(editor, event.target) && !isEventHandled(event, attributes.onClick) && slateDom.isDOMNode(event.target)) {\n        var node = ReactEditor.toSlateNode(editor, event.target);\n        var path = ReactEditor.findPath(editor, node);\n        // At this time, the Slate document may be arbitrarily different,\n        // because onClick handlers can change the document before we get here.\n        // Therefore we must check that this path actually exists,\n        // and that it still refers to the same node.\n        if (!slate.Editor.hasPath(editor, path) || slate.Node.get(editor, path) !== node) {\n          return;\n        }\n        if (event.detail === slateDom.TRIPLE_CLICK && path.length >= 1) {\n          var blockPath = path;\n          if (!(slate.Element.isElement(node) && slate.Editor.isBlock(editor, node))) {\n            var _block$;\n            var block = slate.Editor.above(editor, {\n              match: function match(n) {\n                return slate.Element.isElement(n) && slate.Editor.isBlock(editor, n);\n              },\n              at: path\n            });\n            blockPath = (_block$ = block === null || block === void 0 ? void 0 : block[1]) !== null && _block$ !== void 0 ? _block$ : path.slice(0, 1);\n          }\n          var range = slate.Editor.range(editor, blockPath);\n          slate.Transforms.select(editor, range);\n          return;\n        }\n        if (readOnly) {\n          return;\n        }\n        var _start = slate.Editor.start(editor, path);\n        var end = slate.Editor.end(editor, path);\n        var startVoid = slate.Editor[\"void\"](editor, {\n          at: _start\n        });\n        var endVoid = slate.Editor[\"void\"](editor, {\n          at: end\n        });\n        if (startVoid && endVoid && slate.Path.equals(startVoid[1], endVoid[1])) {\n          var _range2 = slate.Editor.range(editor, _start);\n          slate.Transforms.select(editor, _range2);\n        }\n      }\n    }, [editor, attributes.onClick, readOnly]),\n    onCompositionEnd: React.useCallback(function (event) {\n      if (ReactEditor.hasSelectableTarget(editor, event.target)) {\n        var _androidInputManagerR3;\n        if (ReactEditor.isComposing(editor)) {\n          Promise.resolve().then(function () {\n            setIsComposing(false);\n            slateDom.IS_COMPOSING.set(editor, false);\n          });\n        }\n        (_androidInputManagerR3 = androidInputManagerRef.current) === null || _androidInputManagerR3 === void 0 || _androidInputManagerR3.handleCompositionEnd(event);\n        if (isEventHandled(event, attributes.onCompositionEnd) || slateDom.IS_ANDROID) {\n          return;\n        }\n        // COMPAT: In Chrome, `beforeinput` events for compositions\n        // aren't correct and never fire the \"insertFromComposition\"\n        // type that we need. So instead, insert whenever a composition\n        // ends since it will already have been committed to the DOM.\n        if (!slateDom.IS_WEBKIT && !slateDom.IS_FIREFOX_LEGACY && !slateDom.IS_IOS && !slateDom.IS_WECHATBROWSER && !slateDom.IS_UC_MOBILE && event.data) {\n          var placeholderMarks = slateDom.EDITOR_TO_PENDING_INSERTION_MARKS.get(editor);\n          slateDom.EDITOR_TO_PENDING_INSERTION_MARKS[\"delete\"](editor);\n          // Ensure we insert text with the marks the user was actually seeing\n          if (placeholderMarks !== undefined) {\n            slateDom.EDITOR_TO_USER_MARKS.set(editor, editor.marks);\n            editor.marks = placeholderMarks;\n          }\n          slate.Editor.insertText(editor, event.data);\n          var userMarks = slateDom.EDITOR_TO_USER_MARKS.get(editor);\n          slateDom.EDITOR_TO_USER_MARKS[\"delete\"](editor);\n          if (userMarks !== undefined) {\n            editor.marks = userMarks;\n          }\n        }\n      }\n    }, [attributes.onCompositionEnd, editor]),\n    onCompositionUpdate: React.useCallback(function (event) {\n      if (ReactEditor.hasSelectableTarget(editor, event.target) && !isEventHandled(event, attributes.onCompositionUpdate)) {\n        if (!ReactEditor.isComposing(editor)) {\n          setIsComposing(true);\n          slateDom.IS_COMPOSING.set(editor, true);\n        }\n      }\n    }, [attributes.onCompositionUpdate, editor]),\n    onCompositionStart: React.useCallback(function (event) {\n      if (ReactEditor.hasSelectableTarget(editor, event.target)) {\n        var _androidInputManagerR4;\n        (_androidInputManagerR4 = androidInputManagerRef.current) === null || _androidInputManagerR4 === void 0 || _androidInputManagerR4.handleCompositionStart(event);\n        if (isEventHandled(event, attributes.onCompositionStart) || slateDom.IS_ANDROID) {\n          return;\n        }\n        setIsComposing(true);\n        var selection = editor.selection;\n        if (selection && slate.Range.isExpanded(selection)) {\n          slate.Editor.deleteFragment(editor);\n          return;\n        }\n      }\n    }, [attributes.onCompositionStart, editor]),\n    onCopy: React.useCallback(function (event) {\n      if (ReactEditor.hasSelectableTarget(editor, event.target) && !isEventHandled(event, attributes.onCopy) && !isDOMEventTargetInput(event)) {\n        event.preventDefault();\n        ReactEditor.setFragmentData(editor, event.clipboardData, 'copy');\n      }\n    }, [attributes.onCopy, editor]),\n    onCut: React.useCallback(function (event) {\n      if (!readOnly && ReactEditor.hasSelectableTarget(editor, event.target) && !isEventHandled(event, attributes.onCut) && !isDOMEventTargetInput(event)) {\n        event.preventDefault();\n        ReactEditor.setFragmentData(editor, event.clipboardData, 'cut');\n        var selection = editor.selection;\n        if (selection) {\n          if (slate.Range.isExpanded(selection)) {\n            slate.Editor.deleteFragment(editor);\n          } else {\n            var node = slate.Node.parent(editor, selection.anchor.path);\n            if (slate.Editor.isVoid(editor, node)) {\n              slate.Transforms[\"delete\"](editor);\n            }\n          }\n        }\n      }\n    }, [readOnly, editor, attributes.onCut]),\n    onDragOver: React.useCallback(function (event) {\n      if (ReactEditor.hasTarget(editor, event.target) && !isEventHandled(event, attributes.onDragOver)) {\n        // Only when the target is void, call `preventDefault` to signal\n        // that drops are allowed. Editable content is droppable by\n        // default, and calling `preventDefault` hides the cursor.\n        var node = ReactEditor.toSlateNode(editor, event.target);\n        if (slate.Element.isElement(node) && slate.Editor.isVoid(editor, node)) {\n          event.preventDefault();\n        }\n      }\n    }, [attributes.onDragOver, editor]),\n    onDragStart: React.useCallback(function (event) {\n      if (!readOnly && ReactEditor.hasTarget(editor, event.target) && !isEventHandled(event, attributes.onDragStart)) {\n        var node = ReactEditor.toSlateNode(editor, event.target);\n        var path = ReactEditor.findPath(editor, node);\n        var voidMatch = slate.Element.isElement(node) && slate.Editor.isVoid(editor, node) || slate.Editor[\"void\"](editor, {\n          at: path,\n          voids: true\n        });\n        // If starting a drag on a void node, make sure it is selected\n        // so that it shows up in the selection's fragment.\n        if (voidMatch) {\n          var range = slate.Editor.range(editor, path);\n          slate.Transforms.select(editor, range);\n        }\n        state.isDraggingInternally = true;\n        ReactEditor.setFragmentData(editor, event.dataTransfer, 'drag');\n      }\n    }, [readOnly, editor, attributes.onDragStart, state]),\n    onDrop: React.useCallback(function (event) {\n      if (!readOnly && ReactEditor.hasTarget(editor, event.target) && !isEventHandled(event, attributes.onDrop)) {\n        event.preventDefault();\n        // Keep a reference to the dragged range before updating selection\n        var draggedRange = editor.selection;\n        // Find the range where the drop happened\n        var range = ReactEditor.findEventRange(editor, event);\n        var data = event.dataTransfer;\n        slate.Transforms.select(editor, range);\n        if (state.isDraggingInternally) {\n          if (draggedRange && !slate.Range.equals(draggedRange, range) && !slate.Editor[\"void\"](editor, {\n            at: range,\n            voids: true\n          })) {\n            slate.Transforms[\"delete\"](editor, {\n              at: draggedRange\n            });\n          }\n        }\n        ReactEditor.insertData(editor, data);\n        // When dragging from another source into the editor, it's possible\n        // that the current editor does not have focus.\n        if (!ReactEditor.isFocused(editor)) {\n          ReactEditor.focus(editor);\n        }\n      }\n    }, [readOnly, editor, attributes.onDrop, state]),\n    onDragEnd: React.useCallback(function (event) {\n      if (!readOnly && state.isDraggingInternally && attributes.onDragEnd && ReactEditor.hasTarget(editor, event.target)) {\n        attributes.onDragEnd(event);\n      }\n    }, [readOnly, state, attributes, editor]),\n    onFocus: React.useCallback(function (event) {\n      if (!readOnly && !state.isUpdatingSelection && ReactEditor.hasEditableTarget(editor, event.target) && !isEventHandled(event, attributes.onFocus)) {\n        var el = ReactEditor.toDOMNode(editor, editor);\n        var root = ReactEditor.findDocumentOrShadowRoot(editor);\n        state.latestElement = root.activeElement;\n        // COMPAT: If the editor has nested editable elements, the focus\n        // can go to them. In Firefox, this must be prevented because it\n        // results in issues with keyboard navigation. (2017/03/30)\n        if (slateDom.IS_FIREFOX && event.target !== el) {\n          el.focus();\n          return;\n        }\n        slateDom.IS_FOCUSED.set(editor, true);\n      }\n    }, [readOnly, state, editor, attributes.onFocus]),\n    onKeyDown: React.useCallback(function (event) {\n      if (!readOnly && ReactEditor.hasEditableTarget(editor, event.target)) {\n        var _androidInputManagerR5;\n        (_androidInputManagerR5 = androidInputManagerRef.current) === null || _androidInputManagerR5 === void 0 || _androidInputManagerR5.handleKeyDown(event);\n        var nativeEvent = event.nativeEvent;\n        // COMPAT: The composition end event isn't fired reliably in all browsers,\n        // so we sometimes might end up stuck in a composition state even though we\n        // aren't composing any more.\n        if (ReactEditor.isComposing(editor) && nativeEvent.isComposing === false) {\n          slateDom.IS_COMPOSING.set(editor, false);\n          setIsComposing(false);\n        }\n        if (isEventHandled(event, attributes.onKeyDown) || ReactEditor.isComposing(editor)) {\n          return;\n        }\n        var selection = editor.selection;\n        var element = editor.children[selection !== null ? selection.focus.path[0] : 0];\n        var isRTL = getDirection(slate.Node.string(element)) === 'rtl';\n        // COMPAT: Since we prevent the default behavior on\n        // `beforeinput` events, the browser doesn't think there's ever\n        // any history stack to undo or redo, so we have to manage these\n        // hotkeys ourselves. (2019/11/06)\n        if (slateDom.Hotkeys.isRedo(nativeEvent)) {\n          event.preventDefault();\n          var maybeHistoryEditor = editor;\n          if (typeof maybeHistoryEditor.redo === 'function') {\n            maybeHistoryEditor.redo();\n          }\n          return;\n        }\n        if (slateDom.Hotkeys.isUndo(nativeEvent)) {\n          event.preventDefault();\n          var _maybeHistoryEditor = editor;\n          if (typeof _maybeHistoryEditor.undo === 'function') {\n            _maybeHistoryEditor.undo();\n          }\n          return;\n        }\n        // COMPAT: Certain browsers don't handle the selection updates\n        // properly. In Chrome, the selection isn't properly extended.\n        // And in Firefox, the selection isn't properly collapsed.\n        // (2017/10/17)\n        if (slateDom.Hotkeys.isMoveLineBackward(nativeEvent)) {\n          event.preventDefault();\n          slate.Transforms.move(editor, {\n            unit: 'line',\n            reverse: true\n          });\n          return;\n        }\n        if (slateDom.Hotkeys.isMoveLineForward(nativeEvent)) {\n          event.preventDefault();\n          slate.Transforms.move(editor, {\n            unit: 'line'\n          });\n          return;\n        }\n        if (slateDom.Hotkeys.isExtendLineBackward(nativeEvent)) {\n          event.preventDefault();\n          slate.Transforms.move(editor, {\n            unit: 'line',\n            edge: 'focus',\n            reverse: true\n          });\n          return;\n        }\n        if (slateDom.Hotkeys.isExtendLineForward(nativeEvent)) {\n          event.preventDefault();\n          slate.Transforms.move(editor, {\n            unit: 'line',\n            edge: 'focus'\n          });\n          return;\n        }\n        // COMPAT: If a void node is selected, or a zero-width text node\n        // adjacent to an inline is selected, we need to handle these\n        // hotkeys manually because browsers won't be able to skip over\n        // the void node with the zero-width space not being an empty\n        // string.\n        if (slateDom.Hotkeys.isMoveBackward(nativeEvent)) {\n          event.preventDefault();\n          if (selection && slate.Range.isCollapsed(selection)) {\n            slate.Transforms.move(editor, {\n              reverse: !isRTL\n            });\n          } else {\n            slate.Transforms.collapse(editor, {\n              edge: isRTL ? 'end' : 'start'\n            });\n          }\n          return;\n        }\n        if (slateDom.Hotkeys.isMoveForward(nativeEvent)) {\n          event.preventDefault();\n          if (selection && slate.Range.isCollapsed(selection)) {\n            slate.Transforms.move(editor, {\n              reverse: isRTL\n            });\n          } else {\n            slate.Transforms.collapse(editor, {\n              edge: isRTL ? 'start' : 'end'\n            });\n          }\n          return;\n        }\n        if (slateDom.Hotkeys.isMoveWordBackward(nativeEvent)) {\n          event.preventDefault();\n          if (selection && slate.Range.isExpanded(selection)) {\n            slate.Transforms.collapse(editor, {\n              edge: 'focus'\n            });\n          }\n          slate.Transforms.move(editor, {\n            unit: 'word',\n            reverse: !isRTL\n          });\n          return;\n        }\n        if (slateDom.Hotkeys.isMoveWordForward(nativeEvent)) {\n          event.preventDefault();\n          if (selection && slate.Range.isExpanded(selection)) {\n            slate.Transforms.collapse(editor, {\n              edge: 'focus'\n            });\n          }\n          slate.Transforms.move(editor, {\n            unit: 'word',\n            reverse: isRTL\n          });\n          return;\n        }\n        // COMPAT: Certain browsers don't support the `beforeinput` event, so we\n        // fall back to guessing at the input intention for hotkeys.\n        // COMPAT: In iOS, some of these hotkeys are handled in the\n        if (!slateDom.HAS_BEFORE_INPUT_SUPPORT) {\n          // We don't have a core behavior for these, but they change the\n          // DOM if we don't prevent them, so we have to.\n          if (slateDom.Hotkeys.isBold(nativeEvent) || slateDom.Hotkeys.isItalic(nativeEvent) || slateDom.Hotkeys.isTransposeCharacter(nativeEvent)) {\n            event.preventDefault();\n            return;\n          }\n          if (slateDom.Hotkeys.isSoftBreak(nativeEvent)) {\n            event.preventDefault();\n            slate.Editor.insertSoftBreak(editor);\n            return;\n          }\n          if (slateDom.Hotkeys.isSplitBlock(nativeEvent)) {\n            event.preventDefault();\n            slate.Editor.insertBreak(editor);\n            return;\n          }\n          if (slateDom.Hotkeys.isDeleteBackward(nativeEvent)) {\n            event.preventDefault();\n            if (selection && slate.Range.isExpanded(selection)) {\n              slate.Editor.deleteFragment(editor, {\n                direction: 'backward'\n              });\n            } else {\n              slate.Editor.deleteBackward(editor);\n            }\n            return;\n          }\n          if (slateDom.Hotkeys.isDeleteForward(nativeEvent)) {\n            event.preventDefault();\n            if (selection && slate.Range.isExpanded(selection)) {\n              slate.Editor.deleteFragment(editor, {\n                direction: 'forward'\n              });\n            } else {\n              slate.Editor.deleteForward(editor);\n            }\n            return;\n          }\n          if (slateDom.Hotkeys.isDeleteLineBackward(nativeEvent)) {\n            event.preventDefault();\n            if (selection && slate.Range.isExpanded(selection)) {\n              slate.Editor.deleteFragment(editor, {\n                direction: 'backward'\n              });\n            } else {\n              slate.Editor.deleteBackward(editor, {\n                unit: 'line'\n              });\n            }\n            return;\n          }\n          if (slateDom.Hotkeys.isDeleteLineForward(nativeEvent)) {\n            event.preventDefault();\n            if (selection && slate.Range.isExpanded(selection)) {\n              slate.Editor.deleteFragment(editor, {\n                direction: 'forward'\n              });\n            } else {\n              slate.Editor.deleteForward(editor, {\n                unit: 'line'\n              });\n            }\n            return;\n          }\n          if (slateDom.Hotkeys.isDeleteWordBackward(nativeEvent)) {\n            event.preventDefault();\n            if (selection && slate.Range.isExpanded(selection)) {\n              slate.Editor.deleteFragment(editor, {\n                direction: 'backward'\n              });\n            } else {\n              slate.Editor.deleteBackward(editor, {\n                unit: 'word'\n              });\n            }\n            return;\n          }\n          if (slateDom.Hotkeys.isDeleteWordForward(nativeEvent)) {\n            event.preventDefault();\n            if (selection && slate.Range.isExpanded(selection)) {\n              slate.Editor.deleteFragment(editor, {\n                direction: 'forward'\n              });\n            } else {\n              slate.Editor.deleteForward(editor, {\n                unit: 'word'\n              });\n            }\n            return;\n          }\n        } else {\n          if (slateDom.IS_CHROME || slateDom.IS_WEBKIT) {\n            // COMPAT: Chrome and Safari support `beforeinput` event but do not fire\n            // an event when deleting backwards in a selected void inline node\n            if (selection && (slateDom.Hotkeys.isDeleteBackward(nativeEvent) || slateDom.Hotkeys.isDeleteForward(nativeEvent)) && slate.Range.isCollapsed(selection)) {\n              var currentNode = slate.Node.parent(editor, selection.anchor.path);\n              if (slate.Element.isElement(currentNode) && slate.Editor.isVoid(editor, currentNode) && (slate.Editor.isInline(editor, currentNode) || slate.Editor.isBlock(editor, currentNode))) {\n                event.preventDefault();\n                slate.Editor.deleteBackward(editor, {\n                  unit: 'block'\n                });\n                return;\n              }\n            }\n          }\n        }\n      }\n    }, [readOnly, editor, attributes.onKeyDown]),\n    onPaste: React.useCallback(function (event) {\n      if (!readOnly && ReactEditor.hasEditableTarget(editor, event.target) && !isEventHandled(event, attributes.onPaste)) {\n        // COMPAT: Certain browsers don't support the `beforeinput` event, so we\n        // fall back to React's `onPaste` here instead.\n        // COMPAT: Firefox, Chrome and Safari don't emit `beforeinput` events\n        // when \"paste without formatting\" is used, so fallback. (2020/02/20)\n        // COMPAT: Safari InputEvents generated by pasting won't include\n        // application/x-slate-fragment items, so use the\n        // ClipboardEvent here. (2023/03/15)\n        if (!slateDom.HAS_BEFORE_INPUT_SUPPORT || slateDom.isPlainTextOnlyPaste(event.nativeEvent) || slateDom.IS_WEBKIT) {\n          event.preventDefault();\n          ReactEditor.insertData(editor, event.clipboardData);\n        }\n      }\n    }, [readOnly, editor, attributes.onPaste])\n  }), /*#__PURE__*/React.createElement(Children, {\n    decorations: decorations,\n    node: editor,\n    renderElement: renderElement,\n    renderPlaceholder: renderPlaceholder,\n    renderLeaf: renderLeaf,\n    selection: editor.selection\n  }))))));\n});\n/**\n * The default placeholder element\n */\nvar DefaultPlaceholder = function DefaultPlaceholder(_ref2) {\n  var attributes = _ref2.attributes,\n    children = _ref2.children;\n  return (\n    /*#__PURE__*/\n    // COMPAT: Artificially add a line-break to the end on the placeholder element\n    // to prevent Android IMEs to pick up its content in autocorrect and to auto-capitalize the first letter\n    React.createElement(\"span\", _objectSpread({}, attributes), children, slateDom.IS_ANDROID && /*#__PURE__*/React.createElement(\"br\", null))\n  );\n};\n/**\n * A default memoized decorate function.\n */\nvar defaultDecorate = function defaultDecorate() {\n  return [];\n};\n/**\n * A default implement to scroll dom range into view.\n */\nvar defaultScrollSelectionIntoView = function defaultScrollSelectionIntoView(editor, domRange) {\n  // This was affecting the selection of multiple blocks and dragging behavior,\n  // so enabled only if the selection has been collapsed.\n  if (domRange.getBoundingClientRect && (!editor.selection || editor.selection && slate.Range.isCollapsed(editor.selection))) {\n    var leafEl = domRange.startContainer.parentElement;\n    leafEl.getBoundingClientRect = domRange.getBoundingClientRect.bind(domRange);\n    scrollIntoView(leafEl, {\n      scrollMode: 'if-needed'\n    });\n    // @ts-expect-error an unorthodox delete D:\n    delete leafEl.getBoundingClientRect;\n  }\n};\n/**\n * Check if an event is overrided by a handler.\n */\nvar isEventHandled = function isEventHandled(event, handler) {\n  if (!handler) {\n    return false;\n  }\n  // The custom event handler may return a boolean to specify whether the event\n  // shall be treated as being handled or not.\n  var shouldTreatEventAsHandled = handler(event);\n  if (shouldTreatEventAsHandled != null) {\n    return shouldTreatEventAsHandled;\n  }\n  return event.isDefaultPrevented() || event.isPropagationStopped();\n};\n/**\n * Check if the event's target is an input element\n */\nvar isDOMEventTargetInput = function isDOMEventTargetInput(event) {\n  return slateDom.isDOMNode(event.target) && (event.target instanceof HTMLInputElement || event.target instanceof HTMLTextAreaElement);\n};\n/**\n * Check if a DOM event is overrided by a handler.\n */\nvar isDOMEventHandled = function isDOMEventHandled(event, handler) {\n  if (!handler) {\n    return false;\n  }\n  // The custom event handler may return a boolean to specify whether the event\n  // shall be treated as being handled or not.\n  var shouldTreatEventAsHandled = handler(event);\n  if (shouldTreatEventAsHandled != null) {\n    return shouldTreatEventAsHandled;\n  }\n  return event.defaultPrevented;\n};\n\n/**\n * A React context for sharing the `focused` state of the editor.\n */\nvar FocusedContext = /*#__PURE__*/React.createContext(false);\n/**\n * Get the current `focused` state of the editor.\n */\nvar useFocused = function useFocused() {\n  return React.useContext(FocusedContext);\n};\n\nfunction isError(error) {\n  return error instanceof Error;\n}\n/**\n * A React context for sharing the editor selector context in a way to control rerenders\n */\nvar SlateSelectorContext = /*#__PURE__*/React.createContext({});\nvar refEquality = function refEquality(a, b) {\n  return a === b;\n};\n/**\n * use redux style selectors to prevent rerendering on every keystroke.\n * Bear in mind rerendering can only prevented if the returned value is a value type or for reference types (e.g. objects and arrays) add a custom equality function.\n *\n * Example:\n * ```\n *  const isSelectionActive = useSlateSelector(editor => Boolean(editor.selection));\n * ```\n */\nfunction useSlateSelector(selector) {\n  var equalityFn = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : refEquality;\n  var _useReducer = React.useReducer(function (s) {\n      return s + 1;\n    }, 0),\n    _useReducer2 = _slicedToArray(_useReducer, 2),\n    forceRender = _useReducer2[1];\n  var context = React.useContext(SlateSelectorContext);\n  if (!context) {\n    throw new Error(\"The `useSlateSelector` hook must be used inside the <Slate> component's context.\");\n  }\n  var getSlate = context.getSlate,\n    addEventListener = context.addEventListener;\n  var latestSubscriptionCallbackError = React.useRef();\n  var latestSelector = React.useRef(function () {\n    return null;\n  });\n  var latestSelectedState = React.useRef(null);\n  var selectedState;\n  try {\n    if (selector !== latestSelector.current || latestSubscriptionCallbackError.current) {\n      selectedState = selector(getSlate());\n    } else {\n      selectedState = latestSelectedState.current;\n    }\n  } catch (err) {\n    if (latestSubscriptionCallbackError.current && isError(err)) {\n      err.message += \"\\nThe error may be correlated with this previous error:\\n\".concat(latestSubscriptionCallbackError.current.stack, \"\\n\\n\");\n    }\n    throw err;\n  }\n  useIsomorphicLayoutEffect(function () {\n    latestSelector.current = selector;\n    latestSelectedState.current = selectedState;\n    latestSubscriptionCallbackError.current = undefined;\n  });\n  useIsomorphicLayoutEffect(function () {\n    function checkForUpdates() {\n      try {\n        var newSelectedState = latestSelector.current(getSlate());\n        if (equalityFn(newSelectedState, latestSelectedState.current)) {\n          return;\n        }\n        latestSelectedState.current = newSelectedState;\n      } catch (err) {\n        // we ignore all errors here, since when the component\n        // is re-rendered, the selectors are called again, and\n        // will throw again, if neither props nor store state\n        // changed\n        if (err instanceof Error) {\n          latestSubscriptionCallbackError.current = err;\n        } else {\n          latestSubscriptionCallbackError.current = new Error(String(err));\n        }\n      }\n      forceRender();\n    }\n    var unsubscribe = addEventListener(checkForUpdates);\n    checkForUpdates();\n    return function () {\n      return unsubscribe();\n    };\n  },\n  // don't rerender on equalityFn change since we want to be able to define it inline\n  [addEventListener, getSlate]);\n  return selectedState;\n}\n/**\n * Create selector context with editor updating on every editor change\n */\nfunction useSelectorContext(editor) {\n  var eventListeners = React.useRef([]).current;\n  var slateRef = React.useRef({\n    editor: editor\n  }).current;\n  var onChange = React.useCallback(function (editor) {\n    slateRef.editor = editor;\n    eventListeners.forEach(function (listener) {\n      return listener(editor);\n    });\n  }, [eventListeners, slateRef]);\n  var selectorContext = React.useMemo(function () {\n    return {\n      getSlate: function getSlate() {\n        return slateRef.editor;\n      },\n      addEventListener: function addEventListener(callback) {\n        eventListeners.push(callback);\n        return function () {\n          eventListeners.splice(eventListeners.indexOf(callback), 1);\n        };\n      }\n    };\n  }, [eventListeners, slateRef]);\n  return {\n    selectorContext: selectorContext,\n    onChange: onChange\n  };\n}\n\nvar REACT_MAJOR_VERSION = parseInt(React.version.split('.')[0], 10);\n\nvar _excluded = [\"editor\", \"children\", \"onChange\", \"onSelectionChange\", \"onValueChange\", \"initialValue\"];\n/**\n * A wrapper around the provider to handle `onChange` events, because the editor\n * is a mutable singleton so it won't ever register as \"changed\" otherwise.\n */\nvar Slate = function Slate(props) {\n  var editor = props.editor,\n    children = props.children,\n    onChange = props.onChange,\n    onSelectionChange = props.onSelectionChange,\n    onValueChange = props.onValueChange,\n    initialValue = props.initialValue,\n    rest = _objectWithoutProperties(props, _excluded);\n  var _React$useState = React.useState(function () {\n      if (!slate.Node.isNodeList(initialValue)) {\n        throw new Error(\"[Slate] initialValue is invalid! Expected a list of elements but got: \".concat(slate.Scrubber.stringify(initialValue)));\n      }\n      if (!slate.Editor.isEditor(editor)) {\n        throw new Error(\"[Slate] editor is invalid! You passed: \".concat(slate.Scrubber.stringify(editor)));\n      }\n      editor.children = initialValue;\n      Object.assign(editor, rest);\n      return {\n        v: 0,\n        editor: editor\n      };\n    }),\n    _React$useState2 = _slicedToArray(_React$useState, 2),\n    context = _React$useState2[0],\n    setContext = _React$useState2[1];\n  var _useSelectorContext = useSelectorContext(editor),\n    selectorContext = _useSelectorContext.selectorContext,\n    handleSelectorChange = _useSelectorContext.onChange;\n  var onContextChange = React.useCallback(function (options) {\n    var _options$operation;\n    if (onChange) {\n      onChange(editor.children);\n    }\n    switch (options === null || options === void 0 || (_options$operation = options.operation) === null || _options$operation === void 0 ? void 0 : _options$operation.type) {\n      case 'set_selection':\n        onSelectionChange === null || onSelectionChange === void 0 || onSelectionChange(editor.selection);\n        break;\n      default:\n        onValueChange === null || onValueChange === void 0 || onValueChange(editor.children);\n    }\n    setContext(function (prevContext) {\n      return {\n        v: prevContext.v + 1,\n        editor: editor\n      };\n    });\n    handleSelectorChange(editor);\n  }, [editor, handleSelectorChange, onChange, onSelectionChange, onValueChange]);\n  React.useEffect(function () {\n    slateDom.EDITOR_TO_ON_CHANGE.set(editor, onContextChange);\n    return function () {\n      slateDom.EDITOR_TO_ON_CHANGE.set(editor, function () {});\n    };\n  }, [editor, onContextChange]);\n  var _useState = React.useState(ReactEditor.isFocused(editor)),\n    _useState2 = _slicedToArray(_useState, 2),\n    isFocused = _useState2[0],\n    setIsFocused = _useState2[1];\n  React.useEffect(function () {\n    setIsFocused(ReactEditor.isFocused(editor));\n  }, [editor]);\n  useIsomorphicLayoutEffect(function () {\n    var fn = function fn() {\n      return setIsFocused(ReactEditor.isFocused(editor));\n    };\n    if (REACT_MAJOR_VERSION >= 17) {\n      // In React >= 17 onFocus and onBlur listen to the focusin and focusout events during the bubbling phase.\n      // Therefore in order for <Editable />'s handlers to run first, which is necessary for ReactEditor.isFocused(editor)\n      // to return the correct value, we have to listen to the focusin and focusout events without useCapture here.\n      document.addEventListener('focusin', fn);\n      document.addEventListener('focusout', fn);\n      return function () {\n        document.removeEventListener('focusin', fn);\n        document.removeEventListener('focusout', fn);\n      };\n    } else {\n      document.addEventListener('focus', fn, true);\n      document.addEventListener('blur', fn, true);\n      return function () {\n        document.removeEventListener('focus', fn, true);\n        document.removeEventListener('blur', fn, true);\n      };\n    }\n  }, []);\n  return /*#__PURE__*/React.createElement(SlateSelectorContext.Provider, {\n    value: selectorContext\n  }, /*#__PURE__*/React.createElement(SlateContext.Provider, {\n    value: context\n  }, /*#__PURE__*/React.createElement(EditorContext.Provider, {\n    value: context.editor\n  }, /*#__PURE__*/React.createElement(FocusedContext.Provider, {\n    value: isFocused\n  }, children))));\n};\n\n/**\n * Get the current editor object from the React context.\n * @deprecated Use useSlateStatic instead.\n */\nvar useEditor = function useEditor() {\n  var editor = React.useContext(EditorContext);\n  if (!editor) {\n    throw new Error(\"The `useEditor` hook must be used inside the <Slate> component's context.\");\n  }\n  return editor;\n};\n\n/**\n * Get the current slate selection.\n * Only triggers a rerender when the selection actually changes\n */\nvar useSlateSelection = function useSlateSelection() {\n  return useSlateSelector(function (editor) {\n    return editor.selection;\n  }, isSelectionEqual);\n};\nvar isSelectionEqual = function isSelectionEqual(a, b) {\n  if (!a && !b) return true;\n  if (!a || !b) return false;\n  return slate.Range.equals(a, b);\n};\n\n/**\n * `withReact` adds React and DOM specific behaviors to the editor.\n *\n * If you are using TypeScript, you must extend Slate's CustomTypes to use\n * this plugin.\n *\n * See https://docs.slatejs.org/concepts/11-typescript to learn how.\n */\nvar withReact = function withReact(editor) {\n  var clipboardFormatKey = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'x-slate-fragment';\n  var e = editor;\n  e = slateDom.withDOM(e, clipboardFormatKey);\n  var _e = e,\n    onChange = _e.onChange;\n  e.onChange = function (options) {\n    // COMPAT: React < 18 doesn't batch `setState` hook calls, which means\n    // that the children and selection can get out of sync for one render\n    // pass. So we have to use this unstable API to ensure it batches them.\n    // (2019/12/03)\n    // https://github.com/facebook/react/issues/14259#issuecomment-439702367\n    var maybeBatchUpdates = REACT_MAJOR_VERSION < 18 ? ReactDOM.unstable_batchedUpdates : function (callback) {\n      return callback();\n    };\n    maybeBatchUpdates(function () {\n      onChange(options);\n    });\n  };\n  return e;\n};\n\nObject.defineProperty(exports, \"NODE_TO_INDEX\", ({\n\tenumerable: true,\n\tget: function () { return slateDom.NODE_TO_INDEX; }\n}));\nObject.defineProperty(exports, \"NODE_TO_PARENT\", ({\n\tenumerable: true,\n\tget: function () { return slateDom.NODE_TO_PARENT; }\n}));\nexports.DefaultElement = DefaultElement;\nexports.DefaultLeaf = DefaultLeaf;\nexports.DefaultPlaceholder = DefaultPlaceholder;\nexports.Editable = Editable;\nexports.ReactEditor = ReactEditor;\nexports.Slate = Slate;\nexports.useComposing = useComposing;\nexports.useEditor = useEditor;\nexports.useFocused = useFocused;\nexports.useReadOnly = useReadOnly;\nexports.useSelected = useSelected;\nexports.useSlate = useSlate;\nexports.useSlateSelection = useSlateSelection;\nexports.useSlateSelector = useSlateSelector;\nexports.useSlateStatic = useSlateStatic;\nexports.useSlateWithV = useSlateWithV;\nexports.withReact = withReact;\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHBhZ2VzLWRpci1ub2RlKS8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vc2xhdGUtcmVhY3RAMC4xMTIuMV9yZWFjdC1kb21AMTkuMC4wX3JlYWN0QDE5LjAuMF9fcmVhY3RAMTkuMC4wX3NsYXRlLWRvbUAwLjExMi4yX3NsYXRlQDAuMTEyLjBfX3NsYXRlQDAuMTEyLjAvbm9kZV9tb2R1bGVzL3NsYXRlLXJlYWN0L2Rpc3QvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsbUJBQW1CLG1CQUFPLENBQUMsa0hBQVc7QUFDdEMsZUFBZSxtQkFBTyxDQUFDLHVIQUFpQjtBQUN4QyxlQUFlLG1CQUFPLENBQUMsdUhBQWlCO0FBQ3hDLFlBQVksbUJBQU8sQ0FBQyxvQkFBTztBQUMzQixxQkFBcUIsbUJBQU8sQ0FBQywyS0FBNEI7QUFDekQsWUFBWSxtQkFBTyxDQUFDLDZHQUFPO0FBQzNCLGVBQWUsbUJBQU8sQ0FBQyx1SUFBVztBQUNsQyxxQkFBcUIsbUJBQU8sQ0FBQyxzTEFBeUI7QUFDdEQsZUFBZSxtQkFBTyxDQUFDLDRCQUFXOztBQUVsQztBQUNBO0FBQ0E7O0FBRUE7QUFDQSxtQkFBbUIsYUFBYTtBQUNoQzs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRLFlBQVksa0VBQWtFO0FBQ3RGLE1BQU07QUFDTjtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRDs7QUFFQTtBQUNBO0FBQ0E7QUFDQSx5Q0FBeUMsU0FBUztBQUNsRDtBQUNBO0FBQ0E7QUFDQSxDQUFDOztBQUVEOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjLHVCQUF1QjtBQUNyQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7O0FBRUQ7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0IsNkJBQTZCO0FBQzdDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7O0FBRUQ7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBLENBQUM7O0FBRUQ7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDOztBQUVEOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7O0FBRUQ7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUEsMkJBQTJCLHdCQUF3QixvQ0FBb0MseUNBQXlDLGtDQUFrQywwREFBMEQsMEJBQTBCO0FBQ3RQLDhCQUE4QixnQkFBZ0Isc0JBQXNCLE9BQU8sa0RBQWtELHdEQUF3RCw4QkFBOEIscUpBQXFKLHFFQUFxRSxLQUFLO0FBQ2xiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMERBQTBELHdCQUF3QjtBQUNsRjtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0Esc0ZBQXNGO0FBQ3RGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1gsU0FBUztBQUNUO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBLFdBQVc7QUFDWDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWU7QUFDZjtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBLFdBQVc7QUFDWDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0EsV0FBVztBQUNYO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0EsYUFBYTtBQUNiLFdBQVc7QUFDWDtBQUNBLFdBQVc7QUFDWDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2IsV0FBVztBQUNYO0FBQ0EsV0FBVztBQUNYO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYixXQUFXO0FBQ1g7QUFDQSxXQUFXO0FBQ1g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiLFdBQVc7QUFDWDtBQUNBLFdBQVc7QUFDWDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2IsV0FBVztBQUNYO0FBQ0EsV0FBVztBQUNYO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYixXQUFXO0FBQ1g7QUFDQSxXQUFXO0FBQ1g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiLFdBQVc7QUFDWDtBQUNBLFdBQVc7QUFDWDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0EsV0FBVztBQUNYO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQSxXQUFXO0FBQ1g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlO0FBQ2YsYUFBYTtBQUNiO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQSxnQkFBZ0I7QUFDaEIsdUVBQXVFLHlCQUF5QjtBQUNoRztBQUNBLGlCQUFpQjtBQUNqQixnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQSxXQUFXO0FBQ1g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDs7QUFFQTtBQUNBLDJCQUEyQix3QkFBd0Isb0NBQW9DLHlDQUF5QyxrQ0FBa0MsMERBQTBELDBCQUEwQjtBQUN0UCw4QkFBOEIsZ0JBQWdCLHNCQUFzQixPQUFPLGtEQUFrRCx3REFBd0QsOEJBQThCLHFKQUFxSixxRUFBcUUsS0FBSztBQUNsYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUCxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLDJCQUEyQix3QkFBd0Isb0NBQW9DLHlDQUF5QyxrQ0FBa0MsMERBQTBELDBCQUEwQjtBQUN0UCw4QkFBOEIsZ0JBQWdCLHNCQUFzQixPQUFPLGtEQUFrRCx3REFBd0QsOEJBQThCLHFKQUFxSixxRUFBcUUsS0FBSztBQUNsYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0gsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvRUFBb0U7QUFDcEU7O0FBRUEsMkJBQTJCLHdCQUF3QixvQ0FBb0MseUNBQXlDLGtDQUFrQywwREFBMEQsMEJBQTBCO0FBQ3RQLDhCQUE4QixnQkFBZ0Isc0JBQXNCLE9BQU8sa0RBQWtELHdEQUF3RCw4QkFBOEIscUpBQXFKLHFFQUFxRSxLQUFLO0FBQ2xiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkVBQTZFO0FBQzdFLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQSxvRUFBb0U7QUFDcEU7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCLG1CQUFtQjtBQUNyQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRCwyQkFBMkIsd0JBQXdCLG9DQUFvQyx5Q0FBeUMsa0NBQWtDLDBEQUEwRCwwQkFBMEI7QUFDdFAsOEJBQThCLGdCQUFnQixzQkFBc0IsT0FBTyxrREFBa0Qsd0RBQXdELDhCQUE4QixxSkFBcUoscUVBQXFFLEtBQUs7QUFDbGI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdGQUFnRjtBQUNoRixNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUZBQWlGLGlCQUFpQjtBQUNsRztBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsMkRBQTJELGlGQUFpRixXQUFXLDBIQUEwSCxnQkFBZ0IsV0FBVyx5QkFBeUIsU0FBUyx3QkFBd0IsNEJBQTRCLGNBQWMsU0FBUywrQkFBK0Isc0JBQXNCLFdBQVcsWUFBWSxnS0FBZ0ssa0RBQWtELFNBQVMsa0JBQWtCLGtCQUFrQixvQkFBb0Isc0JBQXNCLDhCQUE4QixjQUFjLHVCQUF1QixlQUFlLFlBQVksb0JBQW9CLE1BQU0saUVBQWlFLFVBQVU7QUFDajlCLG9EQUFvRCxnQkFBZ0Isa0VBQWtFLHdEQUF3RCw2REFBNkQsc0RBQXNEO0FBQ2pULHlDQUF5Qyx1REFBdUQsdUNBQXVDLFNBQVMsdUJBQXVCO0FBQ3ZLO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCLDBCQUEwQjtBQUM1QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQkFBMEIsOEJBQThCO0FBQ3hEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1AsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRDs7QUFFQTtBQUNBO0FBQ0Esa0JBQWtCLGtCQUFrQjtBQUNwQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBLENBQUM7O0FBRUQ7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBLENBQUM7O0FBRUQ7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7O0FBRUQ7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxTQUFTO0FBQ1QsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLGlDQUFpQyw2REFBNkQseUNBQXlDLDhDQUE4QyxpQ0FBaUMsbURBQW1ELDJEQUEyRCxPQUFPLHlDQUF5QztBQUNwWCx1Q0FBdUMsd0VBQXdFLDBDQUEwQyw4Q0FBOEMsTUFBTSw0RUFBNEUsSUFBSSxlQUFlLFlBQVk7QUFDeFQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdFQUF3RSxhQUFhO0FBQ3JGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSx5REFBeUQsaUZBQWlGLFdBQVcsd0hBQXdILGdCQUFnQixXQUFXLHlCQUF5QixTQUFTLHdCQUF3Qiw0QkFBNEIsY0FBYyxTQUFTLCtCQUErQixzQkFBc0IsV0FBVyxZQUFZLGdLQUFnSyxrREFBa0QsU0FBUyxrQkFBa0Isa0JBQWtCLG9CQUFvQixzQkFBc0IsOEJBQThCLGNBQWMsdUJBQXVCLGVBQWUsWUFBWSxvQkFBb0IsTUFBTSxpRUFBaUUsVUFBVTtBQUM3OEIsa0RBQWtELGdCQUFnQixnRUFBZ0Usd0RBQXdELDZEQUE2RCxzREFBc0Q7QUFDN1MsdUNBQXVDLHVEQUF1RCx1Q0FBdUMsU0FBUyx1QkFBdUI7QUFDcksseUJBQXlCLHdCQUF3QixvQ0FBb0MseUNBQXlDLGtDQUFrQywwREFBMEQsMEJBQTBCO0FBQ3BQLDRCQUE0QixnQkFBZ0Isc0JBQXNCLE9BQU8sa0RBQWtELHNEQUFzRCw4QkFBOEIsbUpBQW1KLHFFQUFxRSxLQUFLO0FBQzVhO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnRkFBZ0Y7QUFDaEYsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2Q0FBNkM7QUFDN0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLEdBQUc7QUFDSDtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQSw0Q0FBNEM7QUFDNUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUCxtRkFBbUYsNkRBQTZEO0FBQ2hKO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLEdBQUc7QUFDSDtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsR0FBRztBQUNIO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBLEdBQUcsaUJBQWlCO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlDQUF5Qyw0QkFBNEI7QUFDckU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0EsTUFBTSxJQUFJO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0QkFBNEIsOEJBQThCO0FBQzFEO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZTtBQUNmO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYixZQUFZO0FBQ1o7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiLFlBQVk7QUFDWjtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZTtBQUNmLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlO0FBQ2YsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWU7QUFDZixjQUFjO0FBQ2Q7QUFDQTtBQUNBLGVBQWU7QUFDZjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZTtBQUNmLGNBQWM7QUFDZDtBQUNBO0FBQ0EsZUFBZTtBQUNmO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlO0FBQ2YsY0FBYztBQUNkO0FBQ0E7QUFDQSxlQUFlO0FBQ2Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWU7QUFDZixjQUFjO0FBQ2Q7QUFDQTtBQUNBLGVBQWU7QUFDZjtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0gsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0RBQWdEO0FBQ2hEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhEQUE4RDtBQUM5RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0EsNkRBQTZEO0FBQzdEO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxHQUFHO0FBQ0g7QUFDQSxHQUFHO0FBQ0g7QUFDQSxHQUFHO0FBQ0g7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBOztBQUVBLGlEQUFnRDtBQUNoRDtBQUNBLG9CQUFvQjtBQUNwQixDQUFDLEVBQUM7QUFDRixrREFBaUQ7QUFDakQ7QUFDQSxvQkFBb0I7QUFDcEIsQ0FBQyxFQUFDO0FBQ0Ysc0JBQXNCO0FBQ3RCLG1CQUFtQjtBQUNuQiwwQkFBMEI7QUFDMUIsZ0JBQWdCO0FBQ2hCLG1CQUFtQjtBQUNuQixhQUFhO0FBQ2Isb0JBQW9CO0FBQ3BCLGlCQUFpQjtBQUNqQixrQkFBa0I7QUFDbEIsbUJBQW1CO0FBQ25CLG1CQUFtQjtBQUNuQixnQkFBZ0I7QUFDaEIseUJBQXlCO0FBQ3pCLHdCQUF3QjtBQUN4QixzQkFBc0I7QUFDdEIscUJBQXFCO0FBQ3JCLGlCQUFpQjtBQUNqQiIsInNvdXJjZXMiOlsiL1VzZXJzL2phaW1laXNyYWVsY2FtcGVhcy9rZXlzdG9uZS9ub2RlX21vZHVsZXMvLnBucG0vc2xhdGUtcmVhY3RAMC4xMTIuMV9yZWFjdC1kb21AMTkuMC4wX3JlYWN0QDE5LjAuMF9fcmVhY3RAMTkuMC4wX3NsYXRlLWRvbUAwLjExMi4yX3NsYXRlQDAuMTEyLjBfX3NsYXRlQDAuMTEyLjAvbm9kZV9tb2R1bGVzL3NsYXRlLXJlYWN0L2Rpc3QvaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgZ2V0RGlyZWN0aW9uID0gcmVxdWlyZSgnZGlyZWN0aW9uJyk7XG52YXIgZGVib3VuY2UgPSByZXF1aXJlKCdsb2Rhc2gvZGVib3VuY2UnKTtcbnZhciB0aHJvdHRsZSA9IHJlcXVpcmUoJ2xvZGFzaC90aHJvdHRsZScpO1xudmFyIFJlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcbnZhciBzY3JvbGxJbnRvVmlldyA9IHJlcXVpcmUoJ3Njcm9sbC1pbnRvLXZpZXctaWYtbmVlZGVkJyk7XG52YXIgc2xhdGUgPSByZXF1aXJlKCdzbGF0ZScpO1xudmFyIHNsYXRlRG9tID0gcmVxdWlyZSgnc2xhdGUtZG9tJyk7XG52YXIgcmVzaXplT2JzZXJ2ZXIgPSByZXF1aXJlKCdAanVnZ2xlL3Jlc2l6ZS1vYnNlcnZlcicpO1xudmFyIFJlYWN0RE9NID0gcmVxdWlyZSgncmVhY3QtZG9tJyk7XG5cbmZ1bmN0aW9uIHVud3JhcEV4cG9ydHMgKHgpIHtcblx0cmV0dXJuIHggJiYgeC5fX2VzTW9kdWxlICYmIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbCh4LCAnZGVmYXVsdCcpID8geFsnZGVmYXVsdCddIDogeDtcbn1cblxuZnVuY3Rpb24gY3JlYXRlQ29tbW9uanNNb2R1bGUoZm4sIG1vZHVsZSkge1xuXHRyZXR1cm4gbW9kdWxlID0geyBleHBvcnRzOiB7fSB9LCBmbihtb2R1bGUsIG1vZHVsZS5leHBvcnRzKSwgbW9kdWxlLmV4cG9ydHM7XG59XG5cbnZhciBhcnJheVdpdGhIb2xlcyA9IGNyZWF0ZUNvbW1vbmpzTW9kdWxlKGZ1bmN0aW9uIChtb2R1bGUpIHtcbmZ1bmN0aW9uIF9hcnJheVdpdGhIb2xlcyhhcnIpIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkoYXJyKSkgcmV0dXJuIGFycjtcbn1cbm1vZHVsZS5leHBvcnRzID0gX2FycmF5V2l0aEhvbGVzLCBtb2R1bGUuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZSwgbW9kdWxlLmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gbW9kdWxlLmV4cG9ydHM7XG59KTtcblxudW53cmFwRXhwb3J0cyhhcnJheVdpdGhIb2xlcyk7XG5cbnZhciBpdGVyYWJsZVRvQXJyYXlMaW1pdCA9IGNyZWF0ZUNvbW1vbmpzTW9kdWxlKGZ1bmN0aW9uIChtb2R1bGUpIHtcbmZ1bmN0aW9uIF9pdGVyYWJsZVRvQXJyYXlMaW1pdChyLCBsKSB7XG4gIHZhciB0ID0gbnVsbCA9PSByID8gbnVsbCA6IFwidW5kZWZpbmVkXCIgIT0gdHlwZW9mIFN5bWJvbCAmJiByW1N5bWJvbC5pdGVyYXRvcl0gfHwgcltcIkBAaXRlcmF0b3JcIl07XG4gIGlmIChudWxsICE9IHQpIHtcbiAgICB2YXIgZSxcbiAgICAgIG4sXG4gICAgICBpLFxuICAgICAgdSxcbiAgICAgIGEgPSBbXSxcbiAgICAgIGYgPSAhMCxcbiAgICAgIG8gPSAhMTtcbiAgICB0cnkge1xuICAgICAgaWYgKGkgPSAodCA9IHQuY2FsbChyKSkubmV4dCwgMCA9PT0gbCkge1xuICAgICAgICBpZiAoT2JqZWN0KHQpICE9PSB0KSByZXR1cm47XG4gICAgICAgIGYgPSAhMTtcbiAgICAgIH0gZWxzZSBmb3IgKDsgIShmID0gKGUgPSBpLmNhbGwodCkpLmRvbmUpICYmIChhLnB1c2goZS52YWx1ZSksIGEubGVuZ3RoICE9PSBsKTsgZiA9ICEwKTtcbiAgICB9IGNhdGNoIChyKSB7XG4gICAgICBvID0gITAsIG4gPSByO1xuICAgIH0gZmluYWxseSB7XG4gICAgICB0cnkge1xuICAgICAgICBpZiAoIWYgJiYgbnVsbCAhPSB0W1wicmV0dXJuXCJdICYmICh1ID0gdFtcInJldHVyblwiXSgpLCBPYmplY3QodSkgIT09IHUpKSByZXR1cm47XG4gICAgICB9IGZpbmFsbHkge1xuICAgICAgICBpZiAobykgdGhyb3cgbjtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGE7XG4gIH1cbn1cbm1vZHVsZS5leHBvcnRzID0gX2l0ZXJhYmxlVG9BcnJheUxpbWl0LCBtb2R1bGUuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZSwgbW9kdWxlLmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gbW9kdWxlLmV4cG9ydHM7XG59KTtcblxudW53cmFwRXhwb3J0cyhpdGVyYWJsZVRvQXJyYXlMaW1pdCk7XG5cbnZhciBhcnJheUxpa2VUb0FycmF5ID0gY3JlYXRlQ29tbW9uanNNb2R1bGUoZnVuY3Rpb24gKG1vZHVsZSkge1xuZnVuY3Rpb24gX2FycmF5TGlrZVRvQXJyYXkoYXJyLCBsZW4pIHtcbiAgaWYgKGxlbiA9PSBudWxsIHx8IGxlbiA+IGFyci5sZW5ndGgpIGxlbiA9IGFyci5sZW5ndGg7XG4gIGZvciAodmFyIGkgPSAwLCBhcnIyID0gbmV3IEFycmF5KGxlbik7IGkgPCBsZW47IGkrKykgYXJyMltpXSA9IGFycltpXTtcbiAgcmV0dXJuIGFycjI7XG59XG5tb2R1bGUuZXhwb3J0cyA9IF9hcnJheUxpa2VUb0FycmF5LCBtb2R1bGUuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZSwgbW9kdWxlLmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gbW9kdWxlLmV4cG9ydHM7XG59KTtcblxudW53cmFwRXhwb3J0cyhhcnJheUxpa2VUb0FycmF5KTtcblxudmFyIHVuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5ID0gY3JlYXRlQ29tbW9uanNNb2R1bGUoZnVuY3Rpb24gKG1vZHVsZSkge1xuZnVuY3Rpb24gX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KG8sIG1pbkxlbikge1xuICBpZiAoIW8pIHJldHVybjtcbiAgaWYgKHR5cGVvZiBvID09PSBcInN0cmluZ1wiKSByZXR1cm4gYXJyYXlMaWtlVG9BcnJheShvLCBtaW5MZW4pO1xuICB2YXIgbiA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvKS5zbGljZSg4LCAtMSk7XG4gIGlmIChuID09PSBcIk9iamVjdFwiICYmIG8uY29uc3RydWN0b3IpIG4gPSBvLmNvbnN0cnVjdG9yLm5hbWU7XG4gIGlmIChuID09PSBcIk1hcFwiIHx8IG4gPT09IFwiU2V0XCIpIHJldHVybiBBcnJheS5mcm9tKG8pO1xuICBpZiAobiA9PT0gXCJBcmd1bWVudHNcIiB8fCAvXig/OlVpfEkpbnQoPzo4fDE2fDMyKSg/OkNsYW1wZWQpP0FycmF5JC8udGVzdChuKSkgcmV0dXJuIGFycmF5TGlrZVRvQXJyYXkobywgbWluTGVuKTtcbn1cbm1vZHVsZS5leHBvcnRzID0gX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5LCBtb2R1bGUuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZSwgbW9kdWxlLmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gbW9kdWxlLmV4cG9ydHM7XG59KTtcblxudW53cmFwRXhwb3J0cyh1bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheSk7XG5cbnZhciBub25JdGVyYWJsZVJlc3QgPSBjcmVhdGVDb21tb25qc01vZHVsZShmdW5jdGlvbiAobW9kdWxlKSB7XG5mdW5jdGlvbiBfbm9uSXRlcmFibGVSZXN0KCkge1xuICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiSW52YWxpZCBhdHRlbXB0IHRvIGRlc3RydWN0dXJlIG5vbi1pdGVyYWJsZSBpbnN0YW5jZS5cXG5JbiBvcmRlciB0byBiZSBpdGVyYWJsZSwgbm9uLWFycmF5IG9iamVjdHMgbXVzdCBoYXZlIGEgW1N5bWJvbC5pdGVyYXRvcl0oKSBtZXRob2QuXCIpO1xufVxubW9kdWxlLmV4cG9ydHMgPSBfbm9uSXRlcmFibGVSZXN0LCBtb2R1bGUuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZSwgbW9kdWxlLmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gbW9kdWxlLmV4cG9ydHM7XG59KTtcblxudW53cmFwRXhwb3J0cyhub25JdGVyYWJsZVJlc3QpO1xuXG52YXIgc2xpY2VkVG9BcnJheSA9IGNyZWF0ZUNvbW1vbmpzTW9kdWxlKGZ1bmN0aW9uIChtb2R1bGUpIHtcbmZ1bmN0aW9uIF9zbGljZWRUb0FycmF5KGFyciwgaSkge1xuICByZXR1cm4gYXJyYXlXaXRoSG9sZXMoYXJyKSB8fCBpdGVyYWJsZVRvQXJyYXlMaW1pdChhcnIsIGkpIHx8IHVuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KGFyciwgaSkgfHwgbm9uSXRlcmFibGVSZXN0KCk7XG59XG5tb2R1bGUuZXhwb3J0cyA9IF9zbGljZWRUb0FycmF5LCBtb2R1bGUuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZSwgbW9kdWxlLmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gbW9kdWxlLmV4cG9ydHM7XG59KTtcblxudmFyIF9zbGljZWRUb0FycmF5ID0gdW53cmFwRXhwb3J0cyhzbGljZWRUb0FycmF5KTtcblxudmFyIG9iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgPSBjcmVhdGVDb21tb25qc01vZHVsZShmdW5jdGlvbiAobW9kdWxlKSB7XG5mdW5jdGlvbiBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShzb3VyY2UsIGV4Y2x1ZGVkKSB7XG4gIGlmIChzb3VyY2UgPT0gbnVsbCkgcmV0dXJuIHt9O1xuICB2YXIgdGFyZ2V0ID0ge307XG4gIHZhciBzb3VyY2VLZXlzID0gT2JqZWN0LmtleXMoc291cmNlKTtcbiAgdmFyIGtleSwgaTtcbiAgZm9yIChpID0gMDsgaSA8IHNvdXJjZUtleXMubGVuZ3RoOyBpKyspIHtcbiAgICBrZXkgPSBzb3VyY2VLZXlzW2ldO1xuICAgIGlmIChleGNsdWRlZC5pbmRleE9mKGtleSkgPj0gMCkgY29udGludWU7XG4gICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgfVxuICByZXR1cm4gdGFyZ2V0O1xufVxubW9kdWxlLmV4cG9ydHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSwgbW9kdWxlLmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWUsIG1vZHVsZS5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IG1vZHVsZS5leHBvcnRzO1xufSk7XG5cbnVud3JhcEV4cG9ydHMob2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSk7XG5cbnZhciBvYmplY3RXaXRob3V0UHJvcGVydGllcyA9IGNyZWF0ZUNvbW1vbmpzTW9kdWxlKGZ1bmN0aW9uIChtb2R1bGUpIHtcbmZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhzb3VyY2UsIGV4Y2x1ZGVkKSB7XG4gIGlmIChzb3VyY2UgPT0gbnVsbCkgcmV0dXJuIHt9O1xuICB2YXIgdGFyZ2V0ID0gb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShzb3VyY2UsIGV4Y2x1ZGVkKTtcbiAgdmFyIGtleSwgaTtcbiAgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHtcbiAgICB2YXIgc291cmNlU3ltYm9sS2V5cyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMoc291cmNlKTtcbiAgICBmb3IgKGkgPSAwOyBpIDwgc291cmNlU3ltYm9sS2V5cy5sZW5ndGg7IGkrKykge1xuICAgICAga2V5ID0gc291cmNlU3ltYm9sS2V5c1tpXTtcbiAgICAgIGlmIChleGNsdWRlZC5pbmRleE9mKGtleSkgPj0gMCkgY29udGludWU7XG4gICAgICBpZiAoIU9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGUuY2FsbChzb3VyY2UsIGtleSkpIGNvbnRpbnVlO1xuICAgICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHRhcmdldDtcbn1cbm1vZHVsZS5leHBvcnRzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzLCBtb2R1bGUuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZSwgbW9kdWxlLmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gbW9kdWxlLmV4cG9ydHM7XG59KTtcblxudmFyIF9vYmplY3RXaXRob3V0UHJvcGVydGllcyA9IHVud3JhcEV4cG9ydHMob2JqZWN0V2l0aG91dFByb3BlcnRpZXMpO1xuXG52YXIgX3R5cGVvZl8xID0gY3JlYXRlQ29tbW9uanNNb2R1bGUoZnVuY3Rpb24gKG1vZHVsZSkge1xuZnVuY3Rpb24gX3R5cGVvZihvKSB7XG4gIFwiQGJhYmVsL2hlbHBlcnMgLSB0eXBlb2ZcIjtcblxuICByZXR1cm4gKG1vZHVsZS5leHBvcnRzID0gX3R5cGVvZiA9IFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgU3ltYm9sICYmIFwic3ltYm9sXCIgPT0gdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA/IGZ1bmN0aW9uIChvKSB7XG4gICAgcmV0dXJuIHR5cGVvZiBvO1xuICB9IDogZnVuY3Rpb24gKG8pIHtcbiAgICByZXR1cm4gbyAmJiBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIFN5bWJvbCAmJiBvLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgbyAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2YgbztcbiAgfSwgbW9kdWxlLmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWUsIG1vZHVsZS5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IG1vZHVsZS5leHBvcnRzKSwgX3R5cGVvZihvKTtcbn1cbm1vZHVsZS5leHBvcnRzID0gX3R5cGVvZiwgbW9kdWxlLmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWUsIG1vZHVsZS5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IG1vZHVsZS5leHBvcnRzO1xufSk7XG5cbnVud3JhcEV4cG9ydHMoX3R5cGVvZl8xKTtcblxudmFyIHRvUHJpbWl0aXZlID0gY3JlYXRlQ29tbW9uanNNb2R1bGUoZnVuY3Rpb24gKG1vZHVsZSkge1xudmFyIF90eXBlb2YgPSBfdHlwZW9mXzFbXCJkZWZhdWx0XCJdO1xuZnVuY3Rpb24gX3RvUHJpbWl0aXZlKGlucHV0LCBoaW50KSB7XG4gIGlmIChfdHlwZW9mKGlucHV0KSAhPT0gXCJvYmplY3RcIiB8fCBpbnB1dCA9PT0gbnVsbCkgcmV0dXJuIGlucHV0O1xuICB2YXIgcHJpbSA9IGlucHV0W1N5bWJvbC50b1ByaW1pdGl2ZV07XG4gIGlmIChwcmltICE9PSB1bmRlZmluZWQpIHtcbiAgICB2YXIgcmVzID0gcHJpbS5jYWxsKGlucHV0LCBoaW50IHx8IFwiZGVmYXVsdFwiKTtcbiAgICBpZiAoX3R5cGVvZihyZXMpICE9PSBcIm9iamVjdFwiKSByZXR1cm4gcmVzO1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJAQHRvUHJpbWl0aXZlIG11c3QgcmV0dXJuIGEgcHJpbWl0aXZlIHZhbHVlLlwiKTtcbiAgfVxuICByZXR1cm4gKGhpbnQgPT09IFwic3RyaW5nXCIgPyBTdHJpbmcgOiBOdW1iZXIpKGlucHV0KTtcbn1cbm1vZHVsZS5leHBvcnRzID0gX3RvUHJpbWl0aXZlLCBtb2R1bGUuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZSwgbW9kdWxlLmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gbW9kdWxlLmV4cG9ydHM7XG59KTtcblxudW53cmFwRXhwb3J0cyh0b1ByaW1pdGl2ZSk7XG5cbnZhciB0b1Byb3BlcnR5S2V5ID0gY3JlYXRlQ29tbW9uanNNb2R1bGUoZnVuY3Rpb24gKG1vZHVsZSkge1xudmFyIF90eXBlb2YgPSBfdHlwZW9mXzFbXCJkZWZhdWx0XCJdO1xuXG5mdW5jdGlvbiBfdG9Qcm9wZXJ0eUtleShhcmcpIHtcbiAgdmFyIGtleSA9IHRvUHJpbWl0aXZlKGFyZywgXCJzdHJpbmdcIik7XG4gIHJldHVybiBfdHlwZW9mKGtleSkgPT09IFwic3ltYm9sXCIgPyBrZXkgOiBTdHJpbmcoa2V5KTtcbn1cbm1vZHVsZS5leHBvcnRzID0gX3RvUHJvcGVydHlLZXksIG1vZHVsZS5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlLCBtb2R1bGUuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBtb2R1bGUuZXhwb3J0cztcbn0pO1xuXG51bndyYXBFeHBvcnRzKHRvUHJvcGVydHlLZXkpO1xuXG52YXIgZGVmaW5lUHJvcGVydHkgPSBjcmVhdGVDb21tb25qc01vZHVsZShmdW5jdGlvbiAobW9kdWxlKSB7XG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7XG4gIGtleSA9IHRvUHJvcGVydHlLZXkoa2V5KTtcbiAgaWYgKGtleSBpbiBvYmopIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHtcbiAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICB3cml0YWJsZTogdHJ1ZVxuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIG9ialtrZXldID0gdmFsdWU7XG4gIH1cbiAgcmV0dXJuIG9iajtcbn1cbm1vZHVsZS5leHBvcnRzID0gX2RlZmluZVByb3BlcnR5LCBtb2R1bGUuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZSwgbW9kdWxlLmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gbW9kdWxlLmV4cG9ydHM7XG59KTtcblxudmFyIF9kZWZpbmVQcm9wZXJ0eSA9IHVud3JhcEV4cG9ydHMoZGVmaW5lUHJvcGVydHkpO1xuXG4vKipcbiAqIEEgUmVhY3QgY29udGV4dCBmb3Igc2hhcmluZyB0aGUgZWRpdG9yIG9iamVjdC5cbiAqL1xudmFyIEVkaXRvckNvbnRleHQgPSAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlQ29udGV4dChudWxsKTtcbi8qKlxuICogR2V0IHRoZSBjdXJyZW50IGVkaXRvciBvYmplY3QgZnJvbSB0aGUgUmVhY3QgY29udGV4dC5cbiAqL1xudmFyIHVzZVNsYXRlU3RhdGljID0gZnVuY3Rpb24gdXNlU2xhdGVTdGF0aWMoKSB7XG4gIHZhciBlZGl0b3IgPSBSZWFjdC51c2VDb250ZXh0KEVkaXRvckNvbnRleHQpO1xuICBpZiAoIWVkaXRvcikge1xuICAgIHRocm93IG5ldyBFcnJvcihcIlRoZSBgdXNlU2xhdGVTdGF0aWNgIGhvb2sgbXVzdCBiZSB1c2VkIGluc2lkZSB0aGUgPFNsYXRlPiBjb21wb25lbnQncyBjb250ZXh0LlwiKTtcbiAgfVxuICByZXR1cm4gZWRpdG9yO1xufTtcblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXJlZGVjbGFyZVxudmFyIFJlYWN0RWRpdG9yID0gc2xhdGVEb20uRE9NRWRpdG9yO1xuXG5mdW5jdGlvbiBvd25LZXlzJDUoZSwgcikgeyB2YXIgdCA9IE9iamVjdC5rZXlzKGUpOyBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scykgeyB2YXIgbyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMoZSk7IHIgJiYgKG8gPSBvLmZpbHRlcihmdW5jdGlvbiAocikgeyByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihlLCByKS5lbnVtZXJhYmxlOyB9KSksIHQucHVzaC5hcHBseSh0LCBvKTsgfSByZXR1cm4gdDsgfVxuZnVuY3Rpb24gX29iamVjdFNwcmVhZCQ1KGUpIHsgZm9yICh2YXIgciA9IDE7IHIgPCBhcmd1bWVudHMubGVuZ3RoOyByKyspIHsgdmFyIHQgPSBudWxsICE9IGFyZ3VtZW50c1tyXSA/IGFyZ3VtZW50c1tyXSA6IHt9OyByICUgMiA/IG93bktleXMkNShPYmplY3QodCksICEwKS5mb3JFYWNoKGZ1bmN0aW9uIChyKSB7IF9kZWZpbmVQcm9wZXJ0eShlLCByLCB0W3JdKTsgfSkgOiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyA/IE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKGUsIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKHQpKSA6IG93bktleXMkNShPYmplY3QodCkpLmZvckVhY2goZnVuY3Rpb24gKHIpIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsIHIsIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodCwgcikpOyB9KTsgfSByZXR1cm4gZTsgfVxuLy8gaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL2RyYWZ0LWpzL2Jsb2IvbWFpbi9zcmMvY29tcG9uZW50L2hhbmRsZXJzL2NvbXBvc2l0aW9uL0RyYWZ0RWRpdG9yQ29tcG9zaXRpb25IYW5kbGVyLmpzI0w0MVxuLy8gV2hlbiB1c2luZyBrZXlib2FyZCBFbmdsaXNoIGFzc29jaWF0aW9uIGZ1bmN0aW9uLCBjb25wb3NpdGlvbkVuZCB0cmlnZ2VyZWQgdG9vIGZhc3QsIHJlc3VsdGluZyBpbiBhZnRlciBgaW5zZXJ0VGV4dGAgc3RpbGwgbWFpbnRhaW4gYXNzb2NpYXRpb24gc3RhdGUuXG52YXIgUkVTT0xWRV9ERUxBWSA9IDI1O1xuLy8gVGltZSB3aXRoIG5vIHVzZXIgaW50ZXJhY3Rpb24gYmVmb3JlIHRoZSBjdXJyZW50IHVzZXIgYWN0aW9uIGlzIGNvbnNpZGVyZWQgYXMgZG9uZS5cbnZhciBGTFVTSF9ERUxBWSA9IDIwMDtcbi8vIFJlcGxhY2Ugd2l0aCBgY29uc3QgZGVidWcgPSBjb25zb2xlLmxvZ2AgdG8gZGVidWdcbnZhciBkZWJ1ZyA9IGZ1bmN0aW9uIGRlYnVnKCkge307XG4vLyBUeXBlIGd1YXJkIHRvIGNoZWNrIGlmIGEgdmFsdWUgaXMgYSBEYXRhVHJhbnNmZXJcbnZhciBpc0RhdGFUcmFuc2ZlciA9IGZ1bmN0aW9uIGlzRGF0YVRyYW5zZmVyKHZhbHVlKSB7XG4gIHJldHVybiAodmFsdWUgPT09IG51bGwgfHwgdmFsdWUgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHZhbHVlLmNvbnN0cnVjdG9yLm5hbWUpID09PSAnRGF0YVRyYW5zZmVyJztcbn07XG5mdW5jdGlvbiBjcmVhdGVBbmRyb2lkSW5wdXRNYW5hZ2VyKF9yZWYpIHtcbiAgdmFyIGVkaXRvciA9IF9yZWYuZWRpdG9yLFxuICAgIHNjaGVkdWxlT25ET01TZWxlY3Rpb25DaGFuZ2UgPSBfcmVmLnNjaGVkdWxlT25ET01TZWxlY3Rpb25DaGFuZ2UsXG4gICAgb25ET01TZWxlY3Rpb25DaGFuZ2UgPSBfcmVmLm9uRE9NU2VsZWN0aW9uQ2hhbmdlO1xuICB2YXIgZmx1c2hpbmcgPSBmYWxzZTtcbiAgdmFyIGNvbXBvc2l0aW9uRW5kVGltZW91dElkID0gbnVsbDtcbiAgdmFyIGZsdXNoVGltZW91dElkID0gbnVsbDtcbiAgdmFyIGFjdGlvblRpbWVvdXRJZCA9IG51bGw7XG4gIHZhciBpZENvdW50ZXIgPSAwO1xuICB2YXIgaW5zZXJ0UG9zaXRpb25IaW50ID0gZmFsc2U7XG4gIHZhciBhcHBseVBlbmRpbmdTZWxlY3Rpb24gPSBmdW5jdGlvbiBhcHBseVBlbmRpbmdTZWxlY3Rpb24oKSB7XG4gICAgdmFyIHBlbmRpbmdTZWxlY3Rpb24gPSBzbGF0ZURvbS5FRElUT1JfVE9fUEVORElOR19TRUxFQ1RJT04uZ2V0KGVkaXRvcik7XG4gICAgc2xhdGVEb20uRURJVE9SX1RPX1BFTkRJTkdfU0VMRUNUSU9OW1wiZGVsZXRlXCJdKGVkaXRvcik7XG4gICAgaWYgKHBlbmRpbmdTZWxlY3Rpb24pIHtcbiAgICAgIHZhciBzZWxlY3Rpb24gPSBlZGl0b3Iuc2VsZWN0aW9uO1xuICAgICAgdmFyIG5vcm1hbGl6ZWQgPSBzbGF0ZURvbS5ub3JtYWxpemVSYW5nZShlZGl0b3IsIHBlbmRpbmdTZWxlY3Rpb24pO1xuICAgICAgaWYgKG5vcm1hbGl6ZWQgJiYgKCFzZWxlY3Rpb24gfHwgIXNsYXRlLlJhbmdlLmVxdWFscyhub3JtYWxpemVkLCBzZWxlY3Rpb24pKSkge1xuICAgICAgICBzbGF0ZS5UcmFuc2Zvcm1zLnNlbGVjdChlZGl0b3IsIG5vcm1hbGl6ZWQpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcbiAgdmFyIHBlcmZvcm1BY3Rpb24gPSBmdW5jdGlvbiBwZXJmb3JtQWN0aW9uKCkge1xuICAgIHZhciBhY3Rpb24gPSBzbGF0ZURvbS5FRElUT1JfVE9fUEVORElOR19BQ1RJT04uZ2V0KGVkaXRvcik7XG4gICAgc2xhdGVEb20uRURJVE9SX1RPX1BFTkRJTkdfQUNUSU9OW1wiZGVsZXRlXCJdKGVkaXRvcik7XG4gICAgaWYgKCFhY3Rpb24pIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKGFjdGlvbi5hdCkge1xuICAgICAgdmFyIHRhcmdldCA9IHNsYXRlLlBvaW50LmlzUG9pbnQoYWN0aW9uLmF0KSA/IHNsYXRlRG9tLm5vcm1hbGl6ZVBvaW50KGVkaXRvciwgYWN0aW9uLmF0KSA6IHNsYXRlRG9tLm5vcm1hbGl6ZVJhbmdlKGVkaXRvciwgYWN0aW9uLmF0KTtcbiAgICAgIGlmICghdGFyZ2V0KSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHZhciBfdGFyZ2V0UmFuZ2UgPSBzbGF0ZS5FZGl0b3IucmFuZ2UoZWRpdG9yLCB0YXJnZXQpO1xuICAgICAgaWYgKCFlZGl0b3Iuc2VsZWN0aW9uIHx8ICFzbGF0ZS5SYW5nZS5lcXVhbHMoZWRpdG9yLnNlbGVjdGlvbiwgX3RhcmdldFJhbmdlKSkge1xuICAgICAgICBzbGF0ZS5UcmFuc2Zvcm1zLnNlbGVjdChlZGl0b3IsIHRhcmdldCk7XG4gICAgICB9XG4gICAgfVxuICAgIGFjdGlvbi5ydW4oKTtcbiAgfTtcbiAgdmFyIGZsdXNoID0gZnVuY3Rpb24gZmx1c2goKSB7XG4gICAgaWYgKGZsdXNoVGltZW91dElkKSB7XG4gICAgICBjbGVhclRpbWVvdXQoZmx1c2hUaW1lb3V0SWQpO1xuICAgICAgZmx1c2hUaW1lb3V0SWQgPSBudWxsO1xuICAgIH1cbiAgICBpZiAoYWN0aW9uVGltZW91dElkKSB7XG4gICAgICBjbGVhclRpbWVvdXQoYWN0aW9uVGltZW91dElkKTtcbiAgICAgIGFjdGlvblRpbWVvdXRJZCA9IG51bGw7XG4gICAgfVxuICAgIGlmICghaGFzUGVuZGluZ0RpZmZzKCkgJiYgIWhhc1BlbmRpbmdBY3Rpb24oKSkge1xuICAgICAgYXBwbHlQZW5kaW5nU2VsZWN0aW9uKCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmICghZmx1c2hpbmcpIHtcbiAgICAgIGZsdXNoaW5nID0gdHJ1ZTtcbiAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gZmx1c2hpbmcgPSBmYWxzZTtcbiAgICAgIH0pO1xuICAgIH1cbiAgICBpZiAoaGFzUGVuZGluZ0FjdGlvbigpKSB7XG4gICAgICBmbHVzaGluZyA9ICdhY3Rpb24nO1xuICAgIH1cbiAgICB2YXIgc2VsZWN0aW9uUmVmID0gZWRpdG9yLnNlbGVjdGlvbiAmJiBzbGF0ZS5FZGl0b3IucmFuZ2VSZWYoZWRpdG9yLCBlZGl0b3Iuc2VsZWN0aW9uLCB7XG4gICAgICBhZmZpbml0eTogJ2ZvcndhcmQnXG4gICAgfSk7XG4gICAgc2xhdGVEb20uRURJVE9SX1RPX1VTRVJfTUFSS1Muc2V0KGVkaXRvciwgZWRpdG9yLm1hcmtzKTtcbiAgICBkZWJ1ZygnZmx1c2gnLCBzbGF0ZURvbS5FRElUT1JfVE9fUEVORElOR19BQ1RJT04uZ2V0KGVkaXRvciksIHNsYXRlRG9tLkVESVRPUl9UT19QRU5ESU5HX0RJRkZTLmdldChlZGl0b3IpKTtcbiAgICB2YXIgc2NoZWR1bGVTZWxlY3Rpb25DaGFuZ2UgPSBoYXNQZW5kaW5nRGlmZnMoKTtcbiAgICB2YXIgZGlmZjtcbiAgICB3aGlsZSAoZGlmZiA9IChfRURJVE9SX1RPX1BFTkRJTkdfREkgPSBzbGF0ZURvbS5FRElUT1JfVE9fUEVORElOR19ESUZGUy5nZXQoZWRpdG9yKSkgPT09IG51bGwgfHwgX0VESVRPUl9UT19QRU5ESU5HX0RJID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfRURJVE9SX1RPX1BFTkRJTkdfRElbMF0pIHtcbiAgICAgIHZhciBfRURJVE9SX1RPX1BFTkRJTkdfREksIF9FRElUT1JfVE9fUEVORElOR19ESTI7XG4gICAgICB2YXIgcGVuZGluZ01hcmtzID0gc2xhdGVEb20uRURJVE9SX1RPX1BFTkRJTkdfSU5TRVJUSU9OX01BUktTLmdldChlZGl0b3IpO1xuICAgICAgaWYgKHBlbmRpbmdNYXJrcyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHNsYXRlRG9tLkVESVRPUl9UT19QRU5ESU5HX0lOU0VSVElPTl9NQVJLU1tcImRlbGV0ZVwiXShlZGl0b3IpO1xuICAgICAgICBlZGl0b3IubWFya3MgPSBwZW5kaW5nTWFya3M7XG4gICAgICB9XG4gICAgICBpZiAocGVuZGluZ01hcmtzICYmIGluc2VydFBvc2l0aW9uSGludCA9PT0gZmFsc2UpIHtcbiAgICAgICAgaW5zZXJ0UG9zaXRpb25IaW50ID0gbnVsbDtcbiAgICAgIH1cbiAgICAgIHZhciByYW5nZSA9IHNsYXRlRG9tLnRhcmdldFJhbmdlKGRpZmYpO1xuICAgICAgaWYgKCFlZGl0b3Iuc2VsZWN0aW9uIHx8ICFzbGF0ZS5SYW5nZS5lcXVhbHMoZWRpdG9yLnNlbGVjdGlvbiwgcmFuZ2UpKSB7XG4gICAgICAgIHNsYXRlLlRyYW5zZm9ybXMuc2VsZWN0KGVkaXRvciwgcmFuZ2UpO1xuICAgICAgfVxuICAgICAgaWYgKGRpZmYuZGlmZi50ZXh0KSB7XG4gICAgICAgIHNsYXRlLkVkaXRvci5pbnNlcnRUZXh0KGVkaXRvciwgZGlmZi5kaWZmLnRleHQpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc2xhdGUuRWRpdG9yLmRlbGV0ZUZyYWdtZW50KGVkaXRvcik7XG4gICAgICB9XG4gICAgICAvLyBSZW1vdmUgZGlmZiBvbmx5IGFmdGVyIHdlIGhhdmUgYXBwbGllZCBpdCB0byBhY2NvdW50IGZvciBpdCB3aGVuIHRyYW5zZm9ybWluZ1xuICAgICAgLy8gcGVuZGluZyByYW5nZXMuXG4gICAgICBzbGF0ZURvbS5FRElUT1JfVE9fUEVORElOR19ESUZGUy5zZXQoZWRpdG9yLCAoX0VESVRPUl9UT19QRU5ESU5HX0RJMiA9IHNsYXRlRG9tLkVESVRPUl9UT19QRU5ESU5HX0RJRkZTLmdldChlZGl0b3IpKSA9PT0gbnVsbCB8fCBfRURJVE9SX1RPX1BFTkRJTkdfREkyID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfRURJVE9SX1RPX1BFTkRJTkdfREkyLmZpbHRlcihmdW5jdGlvbiAoX3JlZjIpIHtcbiAgICAgICAgdmFyIGlkID0gX3JlZjIuaWQ7XG4gICAgICAgIHJldHVybiBpZCAhPT0gZGlmZi5pZDtcbiAgICAgIH0pKTtcbiAgICAgIGlmICghc2xhdGVEb20udmVyaWZ5RGlmZlN0YXRlKGVkaXRvciwgZGlmZikpIHtcbiAgICAgICAgc2NoZWR1bGVTZWxlY3Rpb25DaGFuZ2UgPSBmYWxzZTtcbiAgICAgICAgc2xhdGVEb20uRURJVE9SX1RPX1BFTkRJTkdfQUNUSU9OW1wiZGVsZXRlXCJdKGVkaXRvcik7XG4gICAgICAgIHNsYXRlRG9tLkVESVRPUl9UT19VU0VSX01BUktTW1wiZGVsZXRlXCJdKGVkaXRvcik7XG4gICAgICAgIGZsdXNoaW5nID0gJ2FjdGlvbic7XG4gICAgICAgIC8vIEVuc3VyZSB3ZSBkb24ndCByZXN0b3JlIHRoZSBwZW5kaW5nIHVzZXIgKGRvbSkgc2VsZWN0aW9uXG4gICAgICAgIC8vIHNpbmNlIHRoZSBkb2N1bWVudCBhbmQgZG9tIHN0YXRlIGRvIG5vdCBtYXRjaC5cbiAgICAgICAgc2xhdGVEb20uRURJVE9SX1RPX1BFTkRJTkdfU0VMRUNUSU9OW1wiZGVsZXRlXCJdKGVkaXRvcik7XG4gICAgICAgIHNjaGVkdWxlT25ET01TZWxlY3Rpb25DaGFuZ2UuY2FuY2VsKCk7XG4gICAgICAgIG9uRE9NU2VsZWN0aW9uQ2hhbmdlLmNhbmNlbCgpO1xuICAgICAgICBzZWxlY3Rpb25SZWYgPT09IG51bGwgfHwgc2VsZWN0aW9uUmVmID09PSB2b2lkIDAgfHwgc2VsZWN0aW9uUmVmLnVucmVmKCk7XG4gICAgICB9XG4gICAgfVxuICAgIHZhciBzZWxlY3Rpb24gPSBzZWxlY3Rpb25SZWYgPT09IG51bGwgfHwgc2VsZWN0aW9uUmVmID09PSB2b2lkIDAgPyB2b2lkIDAgOiBzZWxlY3Rpb25SZWYudW5yZWYoKTtcbiAgICBpZiAoc2VsZWN0aW9uICYmICFzbGF0ZURvbS5FRElUT1JfVE9fUEVORElOR19TRUxFQ1RJT04uZ2V0KGVkaXRvcikgJiYgKCFlZGl0b3Iuc2VsZWN0aW9uIHx8ICFzbGF0ZS5SYW5nZS5lcXVhbHMoc2VsZWN0aW9uLCBlZGl0b3Iuc2VsZWN0aW9uKSkpIHtcbiAgICAgIHNsYXRlLlRyYW5zZm9ybXMuc2VsZWN0KGVkaXRvciwgc2VsZWN0aW9uKTtcbiAgICB9XG4gICAgaWYgKGhhc1BlbmRpbmdBY3Rpb24oKSkge1xuICAgICAgcGVyZm9ybUFjdGlvbigpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICAvLyBDT01QQVQ6IFRoZSBzZWxlY3Rpb25DaGFuZ2UgZXZlbnQgaXMgZmlyZWQgYWZ0ZXIgdGhlIGFjdGlvbiBpcyBwZXJmb3JtZWQsXG4gICAgLy8gc28gd2UgaGF2ZSB0byBtYW51YWxseSBzY2hlZHVsZSBpdCB0byBlbnN1cmUgd2UgZG9uJ3QgJ3Rocm93IGF3YXknIHRoZSBzZWxlY3Rpb25cbiAgICAvLyB3aGlsZSByZW5kZXJpbmcgaWYgd2UgaGF2ZSBwZW5kaW5nIGNoYW5nZXMuXG4gICAgaWYgKHNjaGVkdWxlU2VsZWN0aW9uQ2hhbmdlKSB7XG4gICAgICBzY2hlZHVsZU9uRE9NU2VsZWN0aW9uQ2hhbmdlKCk7XG4gICAgfVxuICAgIHNjaGVkdWxlT25ET01TZWxlY3Rpb25DaGFuZ2UuZmx1c2goKTtcbiAgICBvbkRPTVNlbGVjdGlvbkNoYW5nZS5mbHVzaCgpO1xuICAgIGFwcGx5UGVuZGluZ1NlbGVjdGlvbigpO1xuICAgIHZhciB1c2VyTWFya3MgPSBzbGF0ZURvbS5FRElUT1JfVE9fVVNFUl9NQVJLUy5nZXQoZWRpdG9yKTtcbiAgICBzbGF0ZURvbS5FRElUT1JfVE9fVVNFUl9NQVJLU1tcImRlbGV0ZVwiXShlZGl0b3IpO1xuICAgIGlmICh1c2VyTWFya3MgIT09IHVuZGVmaW5lZCkge1xuICAgICAgZWRpdG9yLm1hcmtzID0gdXNlck1hcmtzO1xuICAgICAgZWRpdG9yLm9uQ2hhbmdlKCk7XG4gICAgfVxuICB9O1xuICB2YXIgaGFuZGxlQ29tcG9zaXRpb25FbmQgPSBmdW5jdGlvbiBoYW5kbGVDb21wb3NpdGlvbkVuZChfZXZlbnQpIHtcbiAgICBpZiAoY29tcG9zaXRpb25FbmRUaW1lb3V0SWQpIHtcbiAgICAgIGNsZWFyVGltZW91dChjb21wb3NpdGlvbkVuZFRpbWVvdXRJZCk7XG4gICAgfVxuICAgIGNvbXBvc2l0aW9uRW5kVGltZW91dElkID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICBzbGF0ZURvbS5JU19DT01QT1NJTkcuc2V0KGVkaXRvciwgZmFsc2UpO1xuICAgICAgZmx1c2goKTtcbiAgICB9LCBSRVNPTFZFX0RFTEFZKTtcbiAgfTtcbiAgdmFyIGhhbmRsZUNvbXBvc2l0aW9uU3RhcnQgPSBmdW5jdGlvbiBoYW5kbGVDb21wb3NpdGlvblN0YXJ0KF9ldmVudCkge1xuICAgIHNsYXRlRG9tLklTX0NPTVBPU0lORy5zZXQoZWRpdG9yLCB0cnVlKTtcbiAgICBpZiAoY29tcG9zaXRpb25FbmRUaW1lb3V0SWQpIHtcbiAgICAgIGNsZWFyVGltZW91dChjb21wb3NpdGlvbkVuZFRpbWVvdXRJZCk7XG4gICAgICBjb21wb3NpdGlvbkVuZFRpbWVvdXRJZCA9IG51bGw7XG4gICAgfVxuICB9O1xuICB2YXIgdXBkYXRlUGxhY2Vob2xkZXJWaXNpYmlsaXR5ID0gZnVuY3Rpb24gdXBkYXRlUGxhY2Vob2xkZXJWaXNpYmlsaXR5KCkge1xuICAgIHZhciBmb3JjZUhpZGUgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IGZhbHNlO1xuICAgIHZhciBwbGFjZWhvbGRlckVsZW1lbnQgPSBzbGF0ZURvbS5FRElUT1JfVE9fUExBQ0VIT0xERVJfRUxFTUVOVC5nZXQoZWRpdG9yKTtcbiAgICBpZiAoIXBsYWNlaG9sZGVyRWxlbWVudCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoaGFzUGVuZGluZ0RpZmZzKCkgfHwgZm9yY2VIaWRlKSB7XG4gICAgICBwbGFjZWhvbGRlckVsZW1lbnQuc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgcGxhY2Vob2xkZXJFbGVtZW50LnN0eWxlLnJlbW92ZVByb3BlcnR5KCdkaXNwbGF5Jyk7XG4gIH07XG4gIHZhciBzdG9yZURpZmYgPSBmdW5jdGlvbiBzdG9yZURpZmYocGF0aCwgZGlmZikge1xuICAgIHZhciBfRURJVE9SX1RPX1BFTkRJTkdfREkzO1xuICAgIHZhciBwZW5kaW5nRGlmZnMgPSAoX0VESVRPUl9UT19QRU5ESU5HX0RJMyA9IHNsYXRlRG9tLkVESVRPUl9UT19QRU5ESU5HX0RJRkZTLmdldChlZGl0b3IpKSAhPT0gbnVsbCAmJiBfRURJVE9SX1RPX1BFTkRJTkdfREkzICE9PSB2b2lkIDAgPyBfRURJVE9SX1RPX1BFTkRJTkdfREkzIDogW107XG4gICAgc2xhdGVEb20uRURJVE9SX1RPX1BFTkRJTkdfRElGRlMuc2V0KGVkaXRvciwgcGVuZGluZ0RpZmZzKTtcbiAgICB2YXIgdGFyZ2V0ID0gc2xhdGUuTm9kZS5sZWFmKGVkaXRvciwgcGF0aCk7XG4gICAgdmFyIGlkeCA9IHBlbmRpbmdEaWZmcy5maW5kSW5kZXgoZnVuY3Rpb24gKGNoYW5nZSkge1xuICAgICAgcmV0dXJuIHNsYXRlLlBhdGguZXF1YWxzKGNoYW5nZS5wYXRoLCBwYXRoKTtcbiAgICB9KTtcbiAgICBpZiAoaWR4IDwgMCkge1xuICAgICAgdmFyIG5vcm1hbGl6ZWQgPSBzbGF0ZURvbS5ub3JtYWxpemVTdHJpbmdEaWZmKHRhcmdldC50ZXh0LCBkaWZmKTtcbiAgICAgIGlmIChub3JtYWxpemVkKSB7XG4gICAgICAgIHBlbmRpbmdEaWZmcy5wdXNoKHtcbiAgICAgICAgICBwYXRoOiBwYXRoLFxuICAgICAgICAgIGRpZmY6IGRpZmYsXG4gICAgICAgICAgaWQ6IGlkQ291bnRlcisrXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgdXBkYXRlUGxhY2Vob2xkZXJWaXNpYmlsaXR5KCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHZhciBtZXJnZWQgPSBzbGF0ZURvbS5tZXJnZVN0cmluZ0RpZmZzKHRhcmdldC50ZXh0LCBwZW5kaW5nRGlmZnNbaWR4XS5kaWZmLCBkaWZmKTtcbiAgICBpZiAoIW1lcmdlZCkge1xuICAgICAgcGVuZGluZ0RpZmZzLnNwbGljZShpZHgsIDEpO1xuICAgICAgdXBkYXRlUGxhY2Vob2xkZXJWaXNpYmlsaXR5KCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHBlbmRpbmdEaWZmc1tpZHhdID0gX29iamVjdFNwcmVhZCQ1KF9vYmplY3RTcHJlYWQkNSh7fSwgcGVuZGluZ0RpZmZzW2lkeF0pLCB7fSwge1xuICAgICAgZGlmZjogbWVyZ2VkXG4gICAgfSk7XG4gIH07XG4gIHZhciBzY2hlZHVsZUFjdGlvbiA9IGZ1bmN0aW9uIHNjaGVkdWxlQWN0aW9uKHJ1bikge1xuICAgIHZhciBfcmVmMyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDoge30sXG4gICAgICBhdCA9IF9yZWYzLmF0O1xuICAgIGluc2VydFBvc2l0aW9uSGludCA9IGZhbHNlO1xuICAgIHNsYXRlRG9tLkVESVRPUl9UT19QRU5ESU5HX1NFTEVDVElPTltcImRlbGV0ZVwiXShlZGl0b3IpO1xuICAgIHNjaGVkdWxlT25ET01TZWxlY3Rpb25DaGFuZ2UuY2FuY2VsKCk7XG4gICAgb25ET01TZWxlY3Rpb25DaGFuZ2UuY2FuY2VsKCk7XG4gICAgaWYgKGhhc1BlbmRpbmdBY3Rpb24oKSkge1xuICAgICAgZmx1c2goKTtcbiAgICB9XG4gICAgc2xhdGVEb20uRURJVE9SX1RPX1BFTkRJTkdfQUNUSU9OLnNldChlZGl0b3IsIHtcbiAgICAgIGF0OiBhdCxcbiAgICAgIHJ1bjogcnVuXG4gICAgfSk7XG4gICAgLy8gQ09NUEFUOiBXaGVuIGRlbGV0aW5nIGJlZm9yZSBhIG5vbi1jb250ZW50ZWRpdGFibGUgZWxlbWVudCBjaHJvbWUgb25seSBmaXJlcyBhIGJlZm9yZWlucHV0LFxuICAgIC8vIChubyBpbnB1dCkgYW5kIGRvZXNuJ3QgcGVyZm9ybSBhbnkgZG9tIG11dGF0aW9ucy4gV2l0aG91dCBhIGZsdXNoIHRpbWVvdXQgd2Ugd291bGQgbmV2ZXIgZmx1c2hcbiAgICAvLyBpbiB0aGlzIGNhc2UgYW5kIHRodXMgbmV2ZXIgYWN0dWFsbHkgcGVyZm9ybSB0aGUgYWN0aW9uLlxuICAgIGFjdGlvblRpbWVvdXRJZCA9IHNldFRpbWVvdXQoZmx1c2gpO1xuICB9O1xuICB2YXIgaGFuZGxlRE9NQmVmb3JlSW5wdXQgPSBmdW5jdGlvbiBoYW5kbGVET01CZWZvcmVJbnB1dChldmVudCkge1xuICAgIHZhciBfdGFyZ2V0UmFuZ2UyO1xuICAgIGlmIChmbHVzaFRpbWVvdXRJZCkge1xuICAgICAgY2xlYXJUaW1lb3V0KGZsdXNoVGltZW91dElkKTtcbiAgICAgIGZsdXNoVGltZW91dElkID0gbnVsbDtcbiAgICB9XG4gICAgaWYgKHNsYXRlRG9tLklTX05PREVfTUFQX0RJUlRZLmdldChlZGl0b3IpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHZhciB0eXBlID0gZXZlbnQuaW5wdXRUeXBlO1xuICAgIHZhciB0YXJnZXRSYW5nZSA9IG51bGw7XG4gICAgdmFyIGRhdGEgPSBldmVudC5kYXRhVHJhbnNmZXIgfHwgZXZlbnQuZGF0YSB8fCB1bmRlZmluZWQ7XG4gICAgaWYgKGluc2VydFBvc2l0aW9uSGludCAhPT0gZmFsc2UgJiYgdHlwZSAhPT0gJ2luc2VydFRleHQnICYmIHR5cGUgIT09ICdpbnNlcnRDb21wb3NpdGlvblRleHQnKSB7XG4gICAgICBpbnNlcnRQb3NpdGlvbkhpbnQgPSBmYWxzZTtcbiAgICB9XG4gICAgdmFyIF9ldmVudCRnZXRUYXJnZXRSYW5nZSA9IGV2ZW50LmdldFRhcmdldFJhbmdlcygpLFxuICAgICAgX2V2ZW50JGdldFRhcmdldFJhbmdlMiA9IF9zbGljZWRUb0FycmF5KF9ldmVudCRnZXRUYXJnZXRSYW5nZSwgMSksXG4gICAgICBuYXRpdmVUYXJnZXRSYW5nZSA9IF9ldmVudCRnZXRUYXJnZXRSYW5nZTJbMF07XG4gICAgaWYgKG5hdGl2ZVRhcmdldFJhbmdlKSB7XG4gICAgICB0YXJnZXRSYW5nZSA9IFJlYWN0RWRpdG9yLnRvU2xhdGVSYW5nZShlZGl0b3IsIG5hdGl2ZVRhcmdldFJhbmdlLCB7XG4gICAgICAgIGV4YWN0TWF0Y2g6IGZhbHNlLFxuICAgICAgICBzdXBwcmVzc1Rocm93OiB0cnVlXG4gICAgICB9KTtcbiAgICB9XG4gICAgLy8gQ09NUEFUOiBTZWxlY3Rpb25DaGFuZ2UgZXZlbnQgaXMgZmlyZWQgYWZ0ZXIgdGhlIGFjdGlvbiBpcyBwZXJmb3JtZWQsIHNvIHdlXG4gICAgLy8gaGF2ZSB0byBtYW51YWxseSBnZXQgdGhlIHNlbGVjdGlvbiBoZXJlIHRvIGVuc3VyZSBpdCdzIHVwLXRvLWRhdGUuXG4gICAgdmFyIHdpbmRvdyA9IFJlYWN0RWRpdG9yLmdldFdpbmRvdyhlZGl0b3IpO1xuICAgIHZhciBkb21TZWxlY3Rpb24gPSB3aW5kb3cuZ2V0U2VsZWN0aW9uKCk7XG4gICAgaWYgKCF0YXJnZXRSYW5nZSAmJiBkb21TZWxlY3Rpb24pIHtcbiAgICAgIG5hdGl2ZVRhcmdldFJhbmdlID0gZG9tU2VsZWN0aW9uO1xuICAgICAgdGFyZ2V0UmFuZ2UgPSBSZWFjdEVkaXRvci50b1NsYXRlUmFuZ2UoZWRpdG9yLCBkb21TZWxlY3Rpb24sIHtcbiAgICAgICAgZXhhY3RNYXRjaDogZmFsc2UsXG4gICAgICAgIHN1cHByZXNzVGhyb3c6IHRydWVcbiAgICAgIH0pO1xuICAgIH1cbiAgICB0YXJnZXRSYW5nZSA9IChfdGFyZ2V0UmFuZ2UyID0gdGFyZ2V0UmFuZ2UpICE9PSBudWxsICYmIF90YXJnZXRSYW5nZTIgIT09IHZvaWQgMCA/IF90YXJnZXRSYW5nZTIgOiBlZGl0b3Iuc2VsZWN0aW9uO1xuICAgIGlmICghdGFyZ2V0UmFuZ2UpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgLy8gQnkgZGVmYXVsdCwgdGhlIGlucHV0IG1hbmFnZXIgdHJpZXMgdG8gc3RvcmUgdGV4dCBkaWZmcyBzbyB0aGF0IHdlIGNhblxuICAgIC8vIGRlZmVyIGZsdXNoaW5nIHRoZW0gYXQgYSBsYXRlciBwb2ludCBpbiB0aW1lLiBXZSBkb24ndCB3YW50IHRvIGZsdXNoXG4gICAgLy8gZm9yIGV2ZXJ5IGlucHV0IGV2ZW50IGFzIHRoaXMgY2FuIGJlIGV4cGVuc2l2ZS4gSG93ZXZlciwgdGhlcmUgYXJlIHNvbWVcbiAgICAvLyBzY2VuYXJpb3Mgd2hlcmUgd2UgY2Fubm90IHNhZmVseSBzdG9yZSB0aGUgdGV4dCBkaWZmIGFuZCBtdXN0IGluc3RlYWRcbiAgICAvLyBzY2hlZHVsZSBhbiBhY3Rpb24gdG8gbGV0IFNsYXRlIG5vcm1hbGl6ZSB0aGUgZWRpdG9yIHN0YXRlLlxuICAgIHZhciBjYW5TdG9yZURpZmYgPSB0cnVlO1xuICAgIGlmICh0eXBlLnN0YXJ0c1dpdGgoJ2RlbGV0ZScpKSB7XG4gICAgICBpZiAoc2xhdGUuUmFuZ2UuaXNFeHBhbmRlZCh0YXJnZXRSYW5nZSkpIHtcbiAgICAgICAgdmFyIF9SYW5nZSRlZGdlcyA9IHNsYXRlLlJhbmdlLmVkZ2VzKHRhcmdldFJhbmdlKSxcbiAgICAgICAgICBfUmFuZ2UkZWRnZXMyID0gX3NsaWNlZFRvQXJyYXkoX1JhbmdlJGVkZ2VzLCAyKSxcbiAgICAgICAgICBfc3RhcnQgPSBfUmFuZ2UkZWRnZXMyWzBdLFxuICAgICAgICAgIF9lbmQgPSBfUmFuZ2UkZWRnZXMyWzFdO1xuICAgICAgICB2YXIgX2xlYWYgPSBzbGF0ZS5Ob2RlLmxlYWYoZWRpdG9yLCBfc3RhcnQucGF0aCk7XG4gICAgICAgIGlmIChfbGVhZi50ZXh0Lmxlbmd0aCA9PT0gX3N0YXJ0Lm9mZnNldCAmJiBfZW5kLm9mZnNldCA9PT0gMCkge1xuICAgICAgICAgIHZhciBuZXh0ID0gc2xhdGUuRWRpdG9yLm5leHQoZWRpdG9yLCB7XG4gICAgICAgICAgICBhdDogX3N0YXJ0LnBhdGgsXG4gICAgICAgICAgICBtYXRjaDogc2xhdGUuVGV4dC5pc1RleHRcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBpZiAobmV4dCAmJiBzbGF0ZS5QYXRoLmVxdWFscyhuZXh0WzFdLCBfZW5kLnBhdGgpKSB7XG4gICAgICAgICAgICB0YXJnZXRSYW5nZSA9IHtcbiAgICAgICAgICAgICAgYW5jaG9yOiBfZW5kLFxuICAgICAgICAgICAgICBmb2N1czogX2VuZFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHZhciBkaXJlY3Rpb24gPSB0eXBlLmVuZHNXaXRoKCdCYWNrd2FyZCcpID8gJ2JhY2t3YXJkJyA6ICdmb3J3YXJkJztcbiAgICAgIHZhciBfUmFuZ2UkZWRnZXMzID0gc2xhdGUuUmFuZ2UuZWRnZXModGFyZ2V0UmFuZ2UpLFxuICAgICAgICBfUmFuZ2UkZWRnZXM0ID0gX3NsaWNlZFRvQXJyYXkoX1JhbmdlJGVkZ2VzMywgMiksXG4gICAgICAgIHN0YXJ0ID0gX1JhbmdlJGVkZ2VzNFswXSxcbiAgICAgICAgZW5kID0gX1JhbmdlJGVkZ2VzNFsxXTtcbiAgICAgIHZhciBfRWRpdG9yJGxlYWYgPSBzbGF0ZS5FZGl0b3IubGVhZihlZGl0b3IsIHN0YXJ0LnBhdGgpLFxuICAgICAgICBfRWRpdG9yJGxlYWYyID0gX3NsaWNlZFRvQXJyYXkoX0VkaXRvciRsZWFmLCAyKSxcbiAgICAgICAgbGVhZiA9IF9FZGl0b3IkbGVhZjJbMF0sXG4gICAgICAgIHBhdGggPSBfRWRpdG9yJGxlYWYyWzFdO1xuICAgICAgdmFyIGRpZmYgPSB7XG4gICAgICAgIHRleHQ6ICcnLFxuICAgICAgICBzdGFydDogc3RhcnQub2Zmc2V0LFxuICAgICAgICBlbmQ6IGVuZC5vZmZzZXRcbiAgICAgIH07XG4gICAgICB2YXIgcGVuZGluZ0RpZmZzID0gc2xhdGVEb20uRURJVE9SX1RPX1BFTkRJTkdfRElGRlMuZ2V0KGVkaXRvcik7XG4gICAgICB2YXIgcmVsZXZhbnRQZW5kaW5nRGlmZnMgPSBwZW5kaW5nRGlmZnMgPT09IG51bGwgfHwgcGVuZGluZ0RpZmZzID09PSB2b2lkIDAgPyB2b2lkIDAgOiBwZW5kaW5nRGlmZnMuZmluZChmdW5jdGlvbiAoY2hhbmdlKSB7XG4gICAgICAgIHJldHVybiBzbGF0ZS5QYXRoLmVxdWFscyhjaGFuZ2UucGF0aCwgcGF0aCk7XG4gICAgICB9KTtcbiAgICAgIHZhciBkaWZmcyA9IHJlbGV2YW50UGVuZGluZ0RpZmZzID8gW3JlbGV2YW50UGVuZGluZ0RpZmZzLmRpZmYsIGRpZmZdIDogW2RpZmZdO1xuICAgICAgdmFyIHRleHQgPSBzbGF0ZURvbS5hcHBseVN0cmluZ0RpZmYuYXBwbHkodm9pZCAwLCBbbGVhZi50ZXh0XS5jb25jYXQoZGlmZnMpKTtcbiAgICAgIGlmICh0ZXh0Lmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAvLyBUZXh0IGxlYWYgd2lsbCBiZSByZW1vdmVkLCBzbyB3ZSBuZWVkIHRvIHNjaGVkdWxlIGFuXG4gICAgICAgIC8vIGFjdGlvbiB0byByZW1vdmUgaXQgc28gdGhhdCBTbGF0ZSBjYW4gbm9ybWFsaXplIGluc3RlYWRcbiAgICAgICAgLy8gb2Ygc3RvcmluZyBhcyBhIGRpZmZcbiAgICAgICAgY2FuU3RvcmVEaWZmID0gZmFsc2U7XG4gICAgICB9XG4gICAgICBpZiAoc2xhdGUuUmFuZ2UuaXNFeHBhbmRlZCh0YXJnZXRSYW5nZSkpIHtcbiAgICAgICAgaWYgKGNhblN0b3JlRGlmZiAmJiBzbGF0ZS5QYXRoLmVxdWFscyh0YXJnZXRSYW5nZS5hbmNob3IucGF0aCwgdGFyZ2V0UmFuZ2UuZm9jdXMucGF0aCkpIHtcbiAgICAgICAgICB2YXIgcG9pbnQgPSB7XG4gICAgICAgICAgICBwYXRoOiB0YXJnZXRSYW5nZS5hbmNob3IucGF0aCxcbiAgICAgICAgICAgIG9mZnNldDogc3RhcnQub2Zmc2V0XG4gICAgICAgICAgfTtcbiAgICAgICAgICB2YXIgcmFuZ2UgPSBzbGF0ZS5FZGl0b3IucmFuZ2UoZWRpdG9yLCBwb2ludCwgcG9pbnQpO1xuICAgICAgICAgIGhhbmRsZVVzZXJTZWxlY3QocmFuZ2UpO1xuICAgICAgICAgIHJldHVybiBzdG9yZURpZmYodGFyZ2V0UmFuZ2UuYW5jaG9yLnBhdGgsIHtcbiAgICAgICAgICAgIHRleHQ6ICcnLFxuICAgICAgICAgICAgZW5kOiBlbmQub2Zmc2V0LFxuICAgICAgICAgICAgc3RhcnQ6IHN0YXJ0Lm9mZnNldFxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzY2hlZHVsZUFjdGlvbihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgcmV0dXJuIHNsYXRlLkVkaXRvci5kZWxldGVGcmFnbWVudChlZGl0b3IsIHtcbiAgICAgICAgICAgIGRpcmVjdGlvbjogZGlyZWN0aW9uXG4gICAgICAgICAgfSk7XG4gICAgICAgIH0sIHtcbiAgICAgICAgICBhdDogdGFyZ2V0UmFuZ2VcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuICAgIHN3aXRjaCAodHlwZSkge1xuICAgICAgY2FzZSAnZGVsZXRlQnlDb21wb3NpdGlvbic6XG4gICAgICBjYXNlICdkZWxldGVCeUN1dCc6XG4gICAgICBjYXNlICdkZWxldGVCeURyYWcnOlxuICAgICAgICB7XG4gICAgICAgICAgcmV0dXJuIHNjaGVkdWxlQWN0aW9uKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiBzbGF0ZS5FZGl0b3IuZGVsZXRlRnJhZ21lbnQoZWRpdG9yKTtcbiAgICAgICAgICB9LCB7XG4gICAgICAgICAgICBhdDogdGFyZ2V0UmFuZ2VcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgY2FzZSAnZGVsZXRlQ29udGVudCc6XG4gICAgICBjYXNlICdkZWxldGVDb250ZW50Rm9yd2FyZCc6XG4gICAgICAgIHtcbiAgICAgICAgICB2YXIgX3RhcmdldFJhbmdlMyA9IHRhcmdldFJhbmdlLFxuICAgICAgICAgICAgYW5jaG9yID0gX3RhcmdldFJhbmdlMy5hbmNob3I7XG4gICAgICAgICAgaWYgKGNhblN0b3JlRGlmZiAmJiBzbGF0ZS5SYW5nZS5pc0NvbGxhcHNlZCh0YXJnZXRSYW5nZSkpIHtcbiAgICAgICAgICAgIHZhciB0YXJnZXROb2RlID0gc2xhdGUuTm9kZS5sZWFmKGVkaXRvciwgYW5jaG9yLnBhdGgpO1xuICAgICAgICAgICAgaWYgKGFuY2hvci5vZmZzZXQgPCB0YXJnZXROb2RlLnRleHQubGVuZ3RoKSB7XG4gICAgICAgICAgICAgIHJldHVybiBzdG9yZURpZmYoYW5jaG9yLnBhdGgsIHtcbiAgICAgICAgICAgICAgICB0ZXh0OiAnJyxcbiAgICAgICAgICAgICAgICBzdGFydDogYW5jaG9yLm9mZnNldCxcbiAgICAgICAgICAgICAgICBlbmQ6IGFuY2hvci5vZmZzZXQgKyAxXG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gc2NoZWR1bGVBY3Rpb24oZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHNsYXRlLkVkaXRvci5kZWxldGVGb3J3YXJkKGVkaXRvcik7XG4gICAgICAgICAgfSwge1xuICAgICAgICAgICAgYXQ6IHRhcmdldFJhbmdlXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIGNhc2UgJ2RlbGV0ZUNvbnRlbnRCYWNrd2FyZCc6XG4gICAgICAgIHtcbiAgICAgICAgICB2YXIgX25hdGl2ZVRhcmdldFJhbmdlO1xuICAgICAgICAgIHZhciBfdGFyZ2V0UmFuZ2U0ID0gdGFyZ2V0UmFuZ2UsXG4gICAgICAgICAgICBfYW5jaG9yID0gX3RhcmdldFJhbmdlNC5hbmNob3I7XG4gICAgICAgICAgLy8gSWYgd2UgaGF2ZSBhIG1pc21hdGNoIGJldHdlZW4gdGhlIG5hdGl2ZSBhbmQgc2xhdGUgc2VsZWN0aW9uIGJlaW5nIGNvbGxhcHNlZFxuICAgICAgICAgIC8vIHdlIGFyZSBtb3N0IGxpa2VseSBkZWxldGluZyBhIHplcm8td2lkdGggcGxhY2Vob2xkZXIgYW5kIHRodXMgc2hvdWxkIHBlcmZvcm0gaXRcbiAgICAgICAgICAvLyBhcyBhbiBhY3Rpb24gdG8gZW5zdXJlIGNvcnJlY3QgYmVoYXZpb3IgKG1vc3RseSBoYXBwZW5zIHdpdGggbWFyayBwbGFjZWhvbGRlcnMpXG4gICAgICAgICAgdmFyIG5hdGl2ZUNvbGxhcHNlZCA9IHNsYXRlRG9tLmlzRE9NU2VsZWN0aW9uKG5hdGl2ZVRhcmdldFJhbmdlKSA/IG5hdGl2ZVRhcmdldFJhbmdlLmlzQ29sbGFwc2VkIDogISEoKF9uYXRpdmVUYXJnZXRSYW5nZSA9IG5hdGl2ZVRhcmdldFJhbmdlKSAhPT0gbnVsbCAmJiBfbmF0aXZlVGFyZ2V0UmFuZ2UgIT09IHZvaWQgMCAmJiBfbmF0aXZlVGFyZ2V0UmFuZ2UuY29sbGFwc2VkKTtcbiAgICAgICAgICBpZiAoY2FuU3RvcmVEaWZmICYmIG5hdGl2ZUNvbGxhcHNlZCAmJiBzbGF0ZS5SYW5nZS5pc0NvbGxhcHNlZCh0YXJnZXRSYW5nZSkgJiYgX2FuY2hvci5vZmZzZXQgPiAwKSB7XG4gICAgICAgICAgICByZXR1cm4gc3RvcmVEaWZmKF9hbmNob3IucGF0aCwge1xuICAgICAgICAgICAgICB0ZXh0OiAnJyxcbiAgICAgICAgICAgICAgc3RhcnQ6IF9hbmNob3Iub2Zmc2V0IC0gMSxcbiAgICAgICAgICAgICAgZW5kOiBfYW5jaG9yLm9mZnNldFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBzY2hlZHVsZUFjdGlvbihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gc2xhdGUuRWRpdG9yLmRlbGV0ZUJhY2t3YXJkKGVkaXRvcik7XG4gICAgICAgICAgfSwge1xuICAgICAgICAgICAgYXQ6IHRhcmdldFJhbmdlXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIGNhc2UgJ2RlbGV0ZUVudGlyZVNvZnRMaW5lJzpcbiAgICAgICAge1xuICAgICAgICAgIHJldHVybiBzY2hlZHVsZUFjdGlvbihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBzbGF0ZS5FZGl0b3IuZGVsZXRlQmFja3dhcmQoZWRpdG9yLCB7XG4gICAgICAgICAgICAgIHVuaXQ6ICdsaW5lJ1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBzbGF0ZS5FZGl0b3IuZGVsZXRlRm9yd2FyZChlZGl0b3IsIHtcbiAgICAgICAgICAgICAgdW5pdDogJ2xpbmUnXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9LCB7XG4gICAgICAgICAgICBhdDogdGFyZ2V0UmFuZ2VcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgY2FzZSAnZGVsZXRlSGFyZExpbmVCYWNrd2FyZCc6XG4gICAgICAgIHtcbiAgICAgICAgICByZXR1cm4gc2NoZWR1bGVBY3Rpb24oZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHNsYXRlLkVkaXRvci5kZWxldGVCYWNrd2FyZChlZGl0b3IsIHtcbiAgICAgICAgICAgICAgdW5pdDogJ2Jsb2NrJ1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSwge1xuICAgICAgICAgICAgYXQ6IHRhcmdldFJhbmdlXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIGNhc2UgJ2RlbGV0ZVNvZnRMaW5lQmFja3dhcmQnOlxuICAgICAgICB7XG4gICAgICAgICAgcmV0dXJuIHNjaGVkdWxlQWN0aW9uKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiBzbGF0ZS5FZGl0b3IuZGVsZXRlQmFja3dhcmQoZWRpdG9yLCB7XG4gICAgICAgICAgICAgIHVuaXQ6ICdsaW5lJ1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSwge1xuICAgICAgICAgICAgYXQ6IHRhcmdldFJhbmdlXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIGNhc2UgJ2RlbGV0ZUhhcmRMaW5lRm9yd2FyZCc6XG4gICAgICAgIHtcbiAgICAgICAgICByZXR1cm4gc2NoZWR1bGVBY3Rpb24oZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHNsYXRlLkVkaXRvci5kZWxldGVGb3J3YXJkKGVkaXRvciwge1xuICAgICAgICAgICAgICB1bml0OiAnYmxvY2snXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9LCB7XG4gICAgICAgICAgICBhdDogdGFyZ2V0UmFuZ2VcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgY2FzZSAnZGVsZXRlU29mdExpbmVGb3J3YXJkJzpcbiAgICAgICAge1xuICAgICAgICAgIHJldHVybiBzY2hlZHVsZUFjdGlvbihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gc2xhdGUuRWRpdG9yLmRlbGV0ZUZvcndhcmQoZWRpdG9yLCB7XG4gICAgICAgICAgICAgIHVuaXQ6ICdsaW5lJ1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSwge1xuICAgICAgICAgICAgYXQ6IHRhcmdldFJhbmdlXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIGNhc2UgJ2RlbGV0ZVdvcmRCYWNrd2FyZCc6XG4gICAgICAgIHtcbiAgICAgICAgICByZXR1cm4gc2NoZWR1bGVBY3Rpb24oZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHNsYXRlLkVkaXRvci5kZWxldGVCYWNrd2FyZChlZGl0b3IsIHtcbiAgICAgICAgICAgICAgdW5pdDogJ3dvcmQnXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9LCB7XG4gICAgICAgICAgICBhdDogdGFyZ2V0UmFuZ2VcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgY2FzZSAnZGVsZXRlV29yZEZvcndhcmQnOlxuICAgICAgICB7XG4gICAgICAgICAgcmV0dXJuIHNjaGVkdWxlQWN0aW9uKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiBzbGF0ZS5FZGl0b3IuZGVsZXRlRm9yd2FyZChlZGl0b3IsIHtcbiAgICAgICAgICAgICAgdW5pdDogJ3dvcmQnXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9LCB7XG4gICAgICAgICAgICBhdDogdGFyZ2V0UmFuZ2VcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgY2FzZSAnaW5zZXJ0TGluZUJyZWFrJzpcbiAgICAgICAge1xuICAgICAgICAgIHJldHVybiBzY2hlZHVsZUFjdGlvbihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gc2xhdGUuRWRpdG9yLmluc2VydFNvZnRCcmVhayhlZGl0b3IpO1xuICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgIGF0OiB0YXJnZXRSYW5nZVxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICBjYXNlICdpbnNlcnRQYXJhZ3JhcGgnOlxuICAgICAgICB7XG4gICAgICAgICAgcmV0dXJuIHNjaGVkdWxlQWN0aW9uKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiBzbGF0ZS5FZGl0b3IuaW5zZXJ0QnJlYWsoZWRpdG9yKTtcbiAgICAgICAgICB9LCB7XG4gICAgICAgICAgICBhdDogdGFyZ2V0UmFuZ2VcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgY2FzZSAnaW5zZXJ0Q29tcG9zaXRpb25UZXh0JzpcbiAgICAgIGNhc2UgJ2RlbGV0ZUNvbXBvc2l0aW9uVGV4dCc6XG4gICAgICBjYXNlICdpbnNlcnRGcm9tQ29tcG9zaXRpb24nOlxuICAgICAgY2FzZSAnaW5zZXJ0RnJvbURyb3AnOlxuICAgICAgY2FzZSAnaW5zZXJ0RnJvbVBhc3RlJzpcbiAgICAgIGNhc2UgJ2luc2VydEZyb21ZYW5rJzpcbiAgICAgIGNhc2UgJ2luc2VydFJlcGxhY2VtZW50VGV4dCc6XG4gICAgICBjYXNlICdpbnNlcnRUZXh0JzpcbiAgICAgICAge1xuICAgICAgICAgIGlmIChpc0RhdGFUcmFuc2ZlcihkYXRhKSkge1xuICAgICAgICAgICAgcmV0dXJuIHNjaGVkdWxlQWN0aW9uKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIFJlYWN0RWRpdG9yLmluc2VydERhdGEoZWRpdG9yLCBkYXRhKTtcbiAgICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICAgYXQ6IHRhcmdldFJhbmdlXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdmFyIF90ZXh0ID0gZGF0YSAhPT0gbnVsbCAmJiBkYXRhICE9PSB2b2lkIDAgPyBkYXRhIDogJyc7XG4gICAgICAgICAgLy8gQ09NUEFUOiBJZiB3ZSBhcmUgd3JpdGluZyBpbnNpZGUgYSBwbGFjZWhvbGRlciwgdGhlIGltZSBpbnNlcnRzIHRoZSB0ZXh0IGluc2lkZVxuICAgICAgICAgIC8vIHRoZSBwbGFjZWhvbGRlciBpdHNlbGYgYW5kIHRodXMgaW5jbHVkZXMgdGhlIHplcm8td2lkdGggc3BhY2UgaW5zaWRlIGVkaXQgZXZlbnRzLlxuICAgICAgICAgIGlmIChzbGF0ZURvbS5FRElUT1JfVE9fUEVORElOR19JTlNFUlRJT05fTUFSS1MuZ2V0KGVkaXRvcikpIHtcbiAgICAgICAgICAgIF90ZXh0ID0gX3RleHQucmVwbGFjZShcIlxcdUZFRkZcIiwgJycpO1xuICAgICAgICAgIH1cbiAgICAgICAgICAvLyBQYXN0ZXMgZnJvbSB0aGUgQW5kcm9pZCBjbGlwYm9hcmQgd2lsbCBnZW5lcmF0ZSBgaW5zZXJ0VGV4dGAgZXZlbnRzLlxuICAgICAgICAgIC8vIElmIHRoZSBjb3BpZWQgdGV4dCBjb250YWlucyBhbnkgbmV3bGluZXMsIEFuZHJvaWQgd2lsbCBhcHBlbmQgYW5cbiAgICAgICAgICAvLyBleHRyYSBuZXdsaW5lIHRvIHRoZSBlbmQgb2YgdGhlIGNvcGllZCB0ZXh0LlxuICAgICAgICAgIGlmICh0eXBlID09PSAnaW5zZXJ0VGV4dCcgJiYgLy4qXFxuLipcXG4kLy50ZXN0KF90ZXh0KSkge1xuICAgICAgICAgICAgX3RleHQgPSBfdGV4dC5zbGljZSgwLCAtMSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIC8vIElmIHRoZSB0ZXh0IGluY2x1ZGVzIGEgbmV3bGluZSwgc3BsaXQgaXQgYXQgbmV3bGluZXMgYW5kIHBhc3RlIGVhY2ggY29tcG9uZW50XG4gICAgICAgICAgLy8gc3RyaW5nLCB3aXRoIHNvZnQgYnJlYWtzIGluIGJldHdlZW4gZWFjaC5cbiAgICAgICAgICBpZiAoX3RleHQuaW5jbHVkZXMoJ1xcbicpKSB7XG4gICAgICAgICAgICByZXR1cm4gc2NoZWR1bGVBY3Rpb24oZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICB2YXIgcGFydHMgPSBfdGV4dC5zcGxpdCgnXFxuJyk7XG4gICAgICAgICAgICAgIHBhcnRzLmZvckVhY2goZnVuY3Rpb24gKGxpbmUsIGkpIHtcbiAgICAgICAgICAgICAgICBpZiAobGluZSkge1xuICAgICAgICAgICAgICAgICAgc2xhdGUuRWRpdG9yLmluc2VydFRleHQoZWRpdG9yLCBsaW5lKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGkgIT09IHBhcnRzLmxlbmd0aCAtIDEpIHtcbiAgICAgICAgICAgICAgICAgIHNsYXRlLkVkaXRvci5pbnNlcnRTb2Z0QnJlYWsoZWRpdG9yKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSwge1xuICAgICAgICAgICAgICBhdDogdGFyZ2V0UmFuZ2VcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoc2xhdGUuUGF0aC5lcXVhbHModGFyZ2V0UmFuZ2UuYW5jaG9yLnBhdGgsIHRhcmdldFJhbmdlLmZvY3VzLnBhdGgpKSB7XG4gICAgICAgICAgICB2YXIgX1JhbmdlJGVkZ2VzNSA9IHNsYXRlLlJhbmdlLmVkZ2VzKHRhcmdldFJhbmdlKSxcbiAgICAgICAgICAgICAgX1JhbmdlJGVkZ2VzNiA9IF9zbGljZWRUb0FycmF5KF9SYW5nZSRlZGdlczUsIDIpLFxuICAgICAgICAgICAgICBfc3RhcnQyID0gX1JhbmdlJGVkZ2VzNlswXSxcbiAgICAgICAgICAgICAgX2VuZDIgPSBfUmFuZ2UkZWRnZXM2WzFdO1xuICAgICAgICAgICAgdmFyIF9kaWZmID0ge1xuICAgICAgICAgICAgICBzdGFydDogX3N0YXJ0Mi5vZmZzZXQsXG4gICAgICAgICAgICAgIGVuZDogX2VuZDIub2Zmc2V0LFxuICAgICAgICAgICAgICB0ZXh0OiBfdGV4dFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIC8vIENPTVBBVDogU3dpZnRrZXkgaGFzIGEgd2VpcmQgYnVnIHdoZXJlIHRoZSB0YXJnZXQgcmFuZ2Ugb2YgdGhlIDJuZCB3b3JkXG4gICAgICAgICAgICAvLyBpbnNlcnRlZCBhZnRlciBhIG1hcmsgcGxhY2Vob2xkZXIgaXMgaW5zZXJ0ZWQgd2l0aCBhbiBhbmNob3Igb2Zmc2V0IG9mZiBieSAxLlxuICAgICAgICAgICAgLy8gU28gd3JpdGluZyAnc29tZSB0ZXh0JyB3aWxsIHJlc3VsdCBpbiAnc29tZSB0dGV4dCcuIEx1Y2tpbHkgYWxsICdub3JtYWwnIGluc2VydFxuICAgICAgICAgICAgLy8gdGV4dCBldmVudHMgYXJlIGZpcmVkIHdpdGggdGhlIGNvcnJlY3QgdGFyZ2V0IHJhbmdlcywgb25seSB0aGUgZmluYWwgJ2luc2VydENvbXBvc2l0aW9uJ1xuICAgICAgICAgICAgLy8gaXNuJ3QsIHNvIHdlIGNhbiBhZGp1c3QgdGhlIHRhcmdldCByYW5nZSBzdGFydCBvZmZzZXQgaWYgd2UgYXJlIGNvbmZpZGVudCB0aGlzIGlzIHRoZVxuICAgICAgICAgICAgLy8gc3dpZnRrZXkgaW5zZXJ0IGNhdXNpbmcgdGhlIGlzc3VlLlxuICAgICAgICAgICAgaWYgKF90ZXh0ICYmIGluc2VydFBvc2l0aW9uSGludCAmJiB0eXBlID09PSAnaW5zZXJ0Q29tcG9zaXRpb25UZXh0Jykge1xuICAgICAgICAgICAgICB2YXIgaGludFBvc2l0aW9uID0gaW5zZXJ0UG9zaXRpb25IaW50LnN0YXJ0ICsgaW5zZXJ0UG9zaXRpb25IaW50LnRleHQuc2VhcmNoKC9cXFN8JC8pO1xuICAgICAgICAgICAgICB2YXIgZGlmZlBvc2l0aW9uID0gX2RpZmYuc3RhcnQgKyBfZGlmZi50ZXh0LnNlYXJjaCgvXFxTfCQvKTtcbiAgICAgICAgICAgICAgaWYgKGRpZmZQb3NpdGlvbiA9PT0gaGludFBvc2l0aW9uICsgMSAmJiBfZGlmZi5lbmQgPT09IGluc2VydFBvc2l0aW9uSGludC5zdGFydCArIGluc2VydFBvc2l0aW9uSGludC50ZXh0Lmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIF9kaWZmLnN0YXJ0IC09IDE7XG4gICAgICAgICAgICAgICAgaW5zZXJ0UG9zaXRpb25IaW50ID0gbnVsbDtcbiAgICAgICAgICAgICAgICBzY2hlZHVsZUZsdXNoKCk7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgaW5zZXJ0UG9zaXRpb25IaW50ID0gZmFsc2U7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gJ2luc2VydFRleHQnKSB7XG4gICAgICAgICAgICAgIGlmIChpbnNlcnRQb3NpdGlvbkhpbnQgPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICBpbnNlcnRQb3NpdGlvbkhpbnQgPSBfZGlmZjtcbiAgICAgICAgICAgICAgfSBlbHNlIGlmIChpbnNlcnRQb3NpdGlvbkhpbnQgJiYgc2xhdGUuUmFuZ2UuaXNDb2xsYXBzZWQodGFyZ2V0UmFuZ2UpICYmIGluc2VydFBvc2l0aW9uSGludC5lbmQgKyBpbnNlcnRQb3NpdGlvbkhpbnQudGV4dC5sZW5ndGggPT09IF9zdGFydDIub2Zmc2V0KSB7XG4gICAgICAgICAgICAgICAgaW5zZXJ0UG9zaXRpb25IaW50ID0gX29iamVjdFNwcmVhZCQ1KF9vYmplY3RTcHJlYWQkNSh7fSwgaW5zZXJ0UG9zaXRpb25IaW50KSwge30sIHtcbiAgICAgICAgICAgICAgICAgIHRleHQ6IGluc2VydFBvc2l0aW9uSGludC50ZXh0ICsgX3RleHRcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBpbnNlcnRQb3NpdGlvbkhpbnQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgaW5zZXJ0UG9zaXRpb25IaW50ID0gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoY2FuU3RvcmVEaWZmKSB7XG4gICAgICAgICAgICAgIHN0b3JlRGlmZihfc3RhcnQyLnBhdGgsIF9kaWZmKTtcbiAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gc2NoZWR1bGVBY3Rpb24oZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHNsYXRlLkVkaXRvci5pbnNlcnRUZXh0KGVkaXRvciwgX3RleHQpO1xuICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgIGF0OiB0YXJnZXRSYW5nZVxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuICB9O1xuICB2YXIgaGFzUGVuZGluZ0FjdGlvbiA9IGZ1bmN0aW9uIGhhc1BlbmRpbmdBY3Rpb24oKSB7XG4gICAgcmV0dXJuICEhc2xhdGVEb20uRURJVE9SX1RPX1BFTkRJTkdfQUNUSU9OLmdldChlZGl0b3IpO1xuICB9O1xuICB2YXIgaGFzUGVuZGluZ0RpZmZzID0gZnVuY3Rpb24gaGFzUGVuZGluZ0RpZmZzKCkge1xuICAgIHZhciBfRURJVE9SX1RPX1BFTkRJTkdfREk0O1xuICAgIHJldHVybiAhISgoX0VESVRPUl9UT19QRU5ESU5HX0RJNCA9IHNsYXRlRG9tLkVESVRPUl9UT19QRU5ESU5HX0RJRkZTLmdldChlZGl0b3IpKSAhPT0gbnVsbCAmJiBfRURJVE9SX1RPX1BFTkRJTkdfREk0ICE9PSB2b2lkIDAgJiYgX0VESVRPUl9UT19QRU5ESU5HX0RJNC5sZW5ndGgpO1xuICB9O1xuICB2YXIgaGFzUGVuZGluZ0NoYW5nZXMgPSBmdW5jdGlvbiBoYXNQZW5kaW5nQ2hhbmdlcygpIHtcbiAgICByZXR1cm4gaGFzUGVuZGluZ0FjdGlvbigpIHx8IGhhc1BlbmRpbmdEaWZmcygpO1xuICB9O1xuICB2YXIgaXNGbHVzaGluZyA9IGZ1bmN0aW9uIGlzRmx1c2hpbmcoKSB7XG4gICAgcmV0dXJuIGZsdXNoaW5nO1xuICB9O1xuICB2YXIgaGFuZGxlVXNlclNlbGVjdCA9IGZ1bmN0aW9uIGhhbmRsZVVzZXJTZWxlY3QocmFuZ2UpIHtcbiAgICBzbGF0ZURvbS5FRElUT1JfVE9fUEVORElOR19TRUxFQ1RJT04uc2V0KGVkaXRvciwgcmFuZ2UpO1xuICAgIGlmIChmbHVzaFRpbWVvdXRJZCkge1xuICAgICAgY2xlYXJUaW1lb3V0KGZsdXNoVGltZW91dElkKTtcbiAgICAgIGZsdXNoVGltZW91dElkID0gbnVsbDtcbiAgICB9XG4gICAgdmFyIHNlbGVjdGlvbiA9IGVkaXRvci5zZWxlY3Rpb247XG4gICAgaWYgKCFyYW5nZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB2YXIgcGF0aENoYW5nZWQgPSAhc2VsZWN0aW9uIHx8ICFzbGF0ZS5QYXRoLmVxdWFscyhzZWxlY3Rpb24uYW5jaG9yLnBhdGgsIHJhbmdlLmFuY2hvci5wYXRoKTtcbiAgICB2YXIgcGFyZW50UGF0aENoYW5nZWQgPSAhc2VsZWN0aW9uIHx8ICFzbGF0ZS5QYXRoLmVxdWFscyhzZWxlY3Rpb24uYW5jaG9yLnBhdGguc2xpY2UoMCwgLTEpLCByYW5nZS5hbmNob3IucGF0aC5zbGljZSgwLCAtMSkpO1xuICAgIGlmIChwYXRoQ2hhbmdlZCAmJiBpbnNlcnRQb3NpdGlvbkhpbnQgfHwgcGFyZW50UGF0aENoYW5nZWQpIHtcbiAgICAgIGluc2VydFBvc2l0aW9uSGludCA9IGZhbHNlO1xuICAgIH1cbiAgICBpZiAocGF0aENoYW5nZWQgfHwgaGFzUGVuZGluZ0RpZmZzKCkpIHtcbiAgICAgIGZsdXNoVGltZW91dElkID0gc2V0VGltZW91dChmbHVzaCwgRkxVU0hfREVMQVkpO1xuICAgIH1cbiAgfTtcbiAgdmFyIGhhbmRsZUlucHV0ID0gZnVuY3Rpb24gaGFuZGxlSW5wdXQoKSB7XG4gICAgaWYgKGhhc1BlbmRpbmdBY3Rpb24oKSB8fCAhaGFzUGVuZGluZ0RpZmZzKCkpIHtcbiAgICAgIGZsdXNoKCk7XG4gICAgfVxuICB9O1xuICB2YXIgaGFuZGxlS2V5RG93biA9IGZ1bmN0aW9uIGhhbmRsZUtleURvd24oXykge1xuICAgIC8vIENPTVBBVDogU3dpZnRrZXkgY2xvc2VzIHRoZSBrZXlib2FyZCB3aGVuIHR5cGluZyBpbnNpZGUgYSBlbXB0eSBub2RlXG4gICAgLy8gZGlyZWN0bHkgbmV4dCB0byBhIG5vbi1jb250ZW50ZWRpdGFibGUgZWxlbWVudCAoPSB0aGUgcGxhY2Vob2xkZXIpLlxuICAgIC8vIFRoZSBvbmx5IGV2ZW50IGZpcmVkIHNvb24gZW5vdWdoIGZvciB1cyB0byBhbGxvdyBoaWRpbmcgdGhlIHBsYWNlaG9sZGVyXG4gICAgLy8gd2l0aG91dCBzd2lmdGtleSBwaWNraW5nIGl0IHVwIGlzIHRoZSBrZXlkb3duIGV2ZW50LCBzbyB3ZSBoYXZlIHRvIGhpZGUgaXRcbiAgICAvLyBoZXJlLiBTZWUgaHR0cHM6Ly9naXRodWIuY29tL2lhbnN0b3JtdGF5bG9yL3NsYXRlL3B1bGwvNDk4OCNpc3N1ZWNvbW1lbnQtMTIwMTA1MDUzNVxuICAgIGlmICghaGFzUGVuZGluZ0RpZmZzKCkpIHtcbiAgICAgIHVwZGF0ZVBsYWNlaG9sZGVyVmlzaWJpbGl0eSh0cnVlKTtcbiAgICAgIHNldFRpbWVvdXQodXBkYXRlUGxhY2Vob2xkZXJWaXNpYmlsaXR5KTtcbiAgICB9XG4gIH07XG4gIHZhciBzY2hlZHVsZUZsdXNoID0gZnVuY3Rpb24gc2NoZWR1bGVGbHVzaCgpIHtcbiAgICBpZiAoIWhhc1BlbmRpbmdBY3Rpb24oKSkge1xuICAgICAgYWN0aW9uVGltZW91dElkID0gc2V0VGltZW91dChmbHVzaCk7XG4gICAgfVxuICB9O1xuICB2YXIgaGFuZGxlRG9tTXV0YXRpb25zID0gZnVuY3Rpb24gaGFuZGxlRG9tTXV0YXRpb25zKG11dGF0aW9ucykge1xuICAgIGlmIChoYXNQZW5kaW5nRGlmZnMoKSB8fCBoYXNQZW5kaW5nQWN0aW9uKCkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKG11dGF0aW9ucy5zb21lKGZ1bmN0aW9uIChtdXRhdGlvbikge1xuICAgICAgcmV0dXJuIHNsYXRlRG9tLmlzVHJhY2tlZE11dGF0aW9uKGVkaXRvciwgbXV0YXRpb24sIG11dGF0aW9ucyk7XG4gICAgfSkpIHtcbiAgICAgIHZhciBfRURJVE9SX1RPX0ZPUkNFX1JFTkQ7XG4gICAgICAvLyBDYXVzZSBhIHJlLXJlbmRlciB0byByZXN0b3JlIHRoZSBkb20gc3RhdGUgaWYgd2UgZW5jb3VudGVyIHRyYWNrZWQgbXV0YXRpb25zIHdpdGhvdXRcbiAgICAgIC8vIGEgY29ycmVzcG9uZGluZyBwZW5kaW5nIGFjdGlvbi5cbiAgICAgIChfRURJVE9SX1RPX0ZPUkNFX1JFTkQgPSBzbGF0ZURvbS5FRElUT1JfVE9fRk9SQ0VfUkVOREVSLmdldChlZGl0b3IpKSA9PT0gbnVsbCB8fCBfRURJVE9SX1RPX0ZPUkNFX1JFTkQgPT09IHZvaWQgMCB8fCBfRURJVE9SX1RPX0ZPUkNFX1JFTkQoKTtcbiAgICB9XG4gIH07XG4gIHJldHVybiB7XG4gICAgZmx1c2g6IGZsdXNoLFxuICAgIHNjaGVkdWxlRmx1c2g6IHNjaGVkdWxlRmx1c2gsXG4gICAgaGFzUGVuZGluZ0RpZmZzOiBoYXNQZW5kaW5nRGlmZnMsXG4gICAgaGFzUGVuZGluZ0FjdGlvbjogaGFzUGVuZGluZ0FjdGlvbixcbiAgICBoYXNQZW5kaW5nQ2hhbmdlczogaGFzUGVuZGluZ0NoYW5nZXMsXG4gICAgaXNGbHVzaGluZzogaXNGbHVzaGluZyxcbiAgICBoYW5kbGVVc2VyU2VsZWN0OiBoYW5kbGVVc2VyU2VsZWN0LFxuICAgIGhhbmRsZUNvbXBvc2l0aW9uRW5kOiBoYW5kbGVDb21wb3NpdGlvbkVuZCxcbiAgICBoYW5kbGVDb21wb3NpdGlvblN0YXJ0OiBoYW5kbGVDb21wb3NpdGlvblN0YXJ0LFxuICAgIGhhbmRsZURPTUJlZm9yZUlucHV0OiBoYW5kbGVET01CZWZvcmVJbnB1dCxcbiAgICBoYW5kbGVLZXlEb3duOiBoYW5kbGVLZXlEb3duLFxuICAgIGhhbmRsZURvbU11dGF0aW9uczogaGFuZGxlRG9tTXV0YXRpb25zLFxuICAgIGhhbmRsZUlucHV0OiBoYW5kbGVJbnB1dFxuICB9O1xufVxuXG5mdW5jdGlvbiB1c2VJc01vdW50ZWQoKSB7XG4gIHZhciBpc01vdW50ZWRSZWYgPSBSZWFjdC51c2VSZWYoZmFsc2UpO1xuICBSZWFjdC51c2VFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgIGlzTW91bnRlZFJlZi5jdXJyZW50ID0gdHJ1ZTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgaXNNb3VudGVkUmVmLmN1cnJlbnQgPSBmYWxzZTtcbiAgICB9O1xuICB9LCBbXSk7XG4gIHJldHVybiBpc01vdW50ZWRSZWYuY3VycmVudDtcbn1cblxuLyoqXG4gKiBQcmV2ZW50IHdhcm5pbmcgb24gU1NSIGJ5IGZhbGxpbmcgYmFjayB0byB1c2VFZmZlY3Qgd2hlbiBET00gaXNuJ3QgYXZhaWxhYmxlXG4gKi9cbnZhciB1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0ID0gc2xhdGVEb20uQ0FOX1VTRV9ET00gPyBSZWFjdC51c2VMYXlvdXRFZmZlY3QgOiBSZWFjdC51c2VFZmZlY3Q7XG5cbmZ1bmN0aW9uIHVzZU11dGF0aW9uT2JzZXJ2ZXIobm9kZSwgY2FsbGJhY2ssIG9wdGlvbnMpIHtcbiAgdmFyIF91c2VTdGF0ZSA9IFJlYWN0LnVzZVN0YXRlKGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBuZXcgTXV0YXRpb25PYnNlcnZlcihjYWxsYmFjayk7XG4gICAgfSksXG4gICAgX3VzZVN0YXRlMiA9IF9zbGljZWRUb0FycmF5KF91c2VTdGF0ZSwgMSksXG4gICAgbXV0YXRpb25PYnNlcnZlciA9IF91c2VTdGF0ZTJbMF07XG4gIHVzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgIC8vIERpc2NhcmQgbXV0YXRpb25zIGNhdXNlZCBkdXJpbmcgcmVuZGVyIHBoYXNlLiBUaGlzIHdvcmtzIGR1ZSB0byByZWFjdCBjYWxsaW5nXG4gICAgLy8gdXNlTGF5b3V0RWZmZWN0IHN5bmNocm9ub3VzbHkgYWZ0ZXIgdGhlIHJlbmRlciBwaGFzZSBiZWZvcmUgdGhlIG5leHQgdGljay5cbiAgICBtdXRhdGlvbk9ic2VydmVyLnRha2VSZWNvcmRzKCk7XG4gIH0pO1xuICBSZWFjdC51c2VFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgIGlmICghbm9kZS5jdXJyZW50KSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ZhaWxlZCB0byBhdHRhY2ggTXV0YXRpb25PYnNlcnZlciwgYG5vZGVgIGlzIHVuZGVmaW5lZCcpO1xuICAgIH1cbiAgICBtdXRhdGlvbk9ic2VydmVyLm9ic2VydmUobm9kZS5jdXJyZW50LCBvcHRpb25zKTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIG11dGF0aW9uT2JzZXJ2ZXIuZGlzY29ubmVjdCgpO1xuICAgIH07XG4gIH0sIFttdXRhdGlvbk9ic2VydmVyLCBub2RlLCBvcHRpb25zXSk7XG59XG5cbnZhciBfZXhjbHVkZWQkMiA9IFtcIm5vZGVcIl07XG5mdW5jdGlvbiBvd25LZXlzJDQoZSwgcikgeyB2YXIgdCA9IE9iamVjdC5rZXlzKGUpOyBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scykgeyB2YXIgbyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMoZSk7IHIgJiYgKG8gPSBvLmZpbHRlcihmdW5jdGlvbiAocikgeyByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihlLCByKS5lbnVtZXJhYmxlOyB9KSksIHQucHVzaC5hcHBseSh0LCBvKTsgfSByZXR1cm4gdDsgfVxuZnVuY3Rpb24gX29iamVjdFNwcmVhZCQ0KGUpIHsgZm9yICh2YXIgciA9IDE7IHIgPCBhcmd1bWVudHMubGVuZ3RoOyByKyspIHsgdmFyIHQgPSBudWxsICE9IGFyZ3VtZW50c1tyXSA/IGFyZ3VtZW50c1tyXSA6IHt9OyByICUgMiA/IG93bktleXMkNChPYmplY3QodCksICEwKS5mb3JFYWNoKGZ1bmN0aW9uIChyKSB7IF9kZWZpbmVQcm9wZXJ0eShlLCByLCB0W3JdKTsgfSkgOiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyA/IE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKGUsIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKHQpKSA6IG93bktleXMkNChPYmplY3QodCkpLmZvckVhY2goZnVuY3Rpb24gKHIpIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsIHIsIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodCwgcikpOyB9KTsgfSByZXR1cm4gZTsgfVxudmFyIE1VVEFUSU9OX09CU0VSVkVSX0NPTkZJRyQxID0ge1xuICBzdWJ0cmVlOiB0cnVlLFxuICBjaGlsZExpc3Q6IHRydWUsXG4gIGNoYXJhY3RlckRhdGE6IHRydWVcbn07XG52YXIgdXNlQW5kcm9pZElucHV0TWFuYWdlciA9ICFzbGF0ZURvbS5JU19BTkRST0lEID8gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gbnVsbDtcbn0gOiBmdW5jdGlvbiAoX3JlZikge1xuICB2YXIgbm9kZSA9IF9yZWYubm9kZSxcbiAgICBvcHRpb25zID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKF9yZWYsIF9leGNsdWRlZCQyKTtcbiAgaWYgKCFzbGF0ZURvbS5JU19BTkRST0lEKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgdmFyIGVkaXRvciA9IHVzZVNsYXRlU3RhdGljKCk7XG4gIHZhciBpc01vdW50ZWQgPSB1c2VJc01vdW50ZWQoKTtcbiAgdmFyIF91c2VTdGF0ZSA9IFJlYWN0LnVzZVN0YXRlKGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBjcmVhdGVBbmRyb2lkSW5wdXRNYW5hZ2VyKF9vYmplY3RTcHJlYWQkNCh7XG4gICAgICAgIGVkaXRvcjogZWRpdG9yXG4gICAgICB9LCBvcHRpb25zKSk7XG4gICAgfSksXG4gICAgX3VzZVN0YXRlMiA9IF9zbGljZWRUb0FycmF5KF91c2VTdGF0ZSwgMSksXG4gICAgaW5wdXRNYW5hZ2VyID0gX3VzZVN0YXRlMlswXTtcbiAgdXNlTXV0YXRpb25PYnNlcnZlcihub2RlLCBpbnB1dE1hbmFnZXIuaGFuZGxlRG9tTXV0YXRpb25zLCBNVVRBVElPTl9PQlNFUlZFUl9DT05GSUckMSk7XG4gIHNsYXRlRG9tLkVESVRPUl9UT19TQ0hFRFVMRV9GTFVTSC5zZXQoZWRpdG9yLCBpbnB1dE1hbmFnZXIuc2NoZWR1bGVGbHVzaCk7XG4gIGlmIChpc01vdW50ZWQpIHtcbiAgICBpbnB1dE1hbmFnZXIuZmx1c2goKTtcbiAgfVxuICByZXR1cm4gaW5wdXRNYW5hZ2VyO1xufTtcblxuZnVuY3Rpb24gb3duS2V5cyQzKGUsIHIpIHsgdmFyIHQgPSBPYmplY3Qua2V5cyhlKTsgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHsgdmFyIG8gPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKGUpOyByICYmIChvID0gby5maWx0ZXIoZnVuY3Rpb24gKHIpIHsgcmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoZSwgcikuZW51bWVyYWJsZTsgfSkpLCB0LnB1c2guYXBwbHkodCwgbyk7IH0gcmV0dXJuIHQ7IH1cbmZ1bmN0aW9uIF9vYmplY3RTcHJlYWQkMyhlKSB7IGZvciAodmFyIHIgPSAxOyByIDwgYXJndW1lbnRzLmxlbmd0aDsgcisrKSB7IHZhciB0ID0gbnVsbCAhPSBhcmd1bWVudHNbcl0gPyBhcmd1bWVudHNbcl0gOiB7fTsgciAlIDIgPyBvd25LZXlzJDMoT2JqZWN0KHQpLCAhMCkuZm9yRWFjaChmdW5jdGlvbiAocikgeyBfZGVmaW5lUHJvcGVydHkoZSwgciwgdFtyXSk7IH0pIDogT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMgPyBPYmplY3QuZGVmaW5lUHJvcGVydGllcyhlLCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyh0KSkgOiBvd25LZXlzJDMoT2JqZWN0KHQpKS5mb3JFYWNoKGZ1bmN0aW9uIChyKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLCByLCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHQsIHIpKTsgfSk7IH0gcmV0dXJuIGU7IH1cbi8qKlxuICogTGVhZiBjb250ZW50IHN0cmluZ3MuXG4gKi9cbnZhciBTdHJpbmckMSA9IGZ1bmN0aW9uIFN0cmluZyhwcm9wcykge1xuICB2YXIgaXNMYXN0ID0gcHJvcHMuaXNMYXN0LFxuICAgIGxlYWYgPSBwcm9wcy5sZWFmLFxuICAgIHBhcmVudCA9IHByb3BzLnBhcmVudCxcbiAgICB0ZXh0ID0gcHJvcHMudGV4dDtcbiAgdmFyIGVkaXRvciA9IHVzZVNsYXRlU3RhdGljKCk7XG4gIHZhciBwYXRoID0gUmVhY3RFZGl0b3IuZmluZFBhdGgoZWRpdG9yLCB0ZXh0KTtcbiAgdmFyIHBhcmVudFBhdGggPSBzbGF0ZS5QYXRoLnBhcmVudChwYXRoKTtcbiAgdmFyIGlzTWFya1BsYWNlaG9sZGVyID0gQm9vbGVhbihsZWFmW3NsYXRlRG9tLk1BUktfUExBQ0VIT0xERVJfU1lNQk9MXSk7XG4gIC8vIENPTVBBVDogUmVuZGVyIHRleHQgaW5zaWRlIHZvaWQgbm9kZXMgd2l0aCBhIHplcm8td2lkdGggc3BhY2UuXG4gIC8vIFNvIHRoZSBub2RlIGNhbiBjb250YWluIHNlbGVjdGlvbiBidXQgdGhlIHRleHQgaXMgbm90IHZpc2libGUuXG4gIGlmIChlZGl0b3IuaXNWb2lkKHBhcmVudCkpIHtcbiAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoWmVyb1dpZHRoU3RyaW5nLCB7XG4gICAgICBsZW5ndGg6IHNsYXRlLk5vZGUuc3RyaW5nKHBhcmVudCkubGVuZ3RoXG4gICAgfSk7XG4gIH1cbiAgLy8gQ09NUEFUOiBJZiB0aGlzIGlzIHRoZSBsYXN0IHRleHQgbm9kZSBpbiBhbiBlbXB0eSBibG9jaywgcmVuZGVyIGEgemVyby1cbiAgLy8gd2lkdGggc3BhY2UgdGhhdCB3aWxsIGNvbnZlcnQgaW50byBhIGxpbmUgYnJlYWsgd2hlbiBjb3B5aW5nIGFuZCBwYXN0aW5nXG4gIC8vIHRvIHN1cHBvcnQgZXhwZWN0ZWQgcGxhaW4gdGV4dC5cbiAgaWYgKGxlYWYudGV4dCA9PT0gJycgJiYgcGFyZW50LmNoaWxkcmVuW3BhcmVudC5jaGlsZHJlbi5sZW5ndGggLSAxXSA9PT0gdGV4dCAmJiAhZWRpdG9yLmlzSW5saW5lKHBhcmVudCkgJiYgc2xhdGUuRWRpdG9yLnN0cmluZyhlZGl0b3IsIHBhcmVudFBhdGgpID09PSAnJykge1xuICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChaZXJvV2lkdGhTdHJpbmcsIHtcbiAgICAgIGlzTGluZUJyZWFrOiB0cnVlLFxuICAgICAgaXNNYXJrUGxhY2Vob2xkZXI6IGlzTWFya1BsYWNlaG9sZGVyXG4gICAgfSk7XG4gIH1cbiAgLy8gQ09NUEFUOiBJZiB0aGUgdGV4dCBpcyBlbXB0eSwgaXQncyBiZWNhdXNlIGl0J3Mgb24gdGhlIGVkZ2Ugb2YgYW4gaW5saW5lXG4gIC8vIG5vZGUsIHNvIHdlIHJlbmRlciBhIHplcm8td2lkdGggc3BhY2Ugc28gdGhhdCB0aGUgc2VsZWN0aW9uIGNhbiBiZVxuICAvLyBpbnNlcnRlZCBuZXh0IHRvIGl0IHN0aWxsLlxuICBpZiAobGVhZi50ZXh0ID09PSAnJykge1xuICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChaZXJvV2lkdGhTdHJpbmcsIHtcbiAgICAgIGlzTWFya1BsYWNlaG9sZGVyOiBpc01hcmtQbGFjZWhvbGRlclxuICAgIH0pO1xuICB9XG4gIC8vIENPTVBBVDogQnJvd3NlcnMgd2lsbCBjb2xsYXBzZSB0cmFpbGluZyBuZXcgbGluZXMgYXQgdGhlIGVuZCBvZiBibG9ja3MsXG4gIC8vIHNvIHdlIG5lZWQgdG8gYWRkIGFuIGV4dHJhIHRyYWlsaW5nIG5ldyBsaW5lcyB0byBwcmV2ZW50IHRoYXQuXG4gIGlmIChpc0xhc3QgJiYgbGVhZi50ZXh0LnNsaWNlKC0xKSA9PT0gJ1xcbicpIHtcbiAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoVGV4dFN0cmluZywge1xuICAgICAgaXNUcmFpbGluZzogdHJ1ZSxcbiAgICAgIHRleHQ6IGxlYWYudGV4dFxuICAgIH0pO1xuICB9XG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChUZXh0U3RyaW5nLCB7XG4gICAgdGV4dDogbGVhZi50ZXh0XG4gIH0pO1xufTtcbi8qKlxuICogTGVhZiBzdHJpbmdzIHdpdGggdGV4dCBpbiB0aGVtLlxuICovXG52YXIgVGV4dFN0cmluZyA9IGZ1bmN0aW9uIFRleHRTdHJpbmcocHJvcHMpIHtcbiAgdmFyIHRleHQgPSBwcm9wcy50ZXh0LFxuICAgIF9wcm9wcyRpc1RyYWlsaW5nID0gcHJvcHMuaXNUcmFpbGluZyxcbiAgICBpc1RyYWlsaW5nID0gX3Byb3BzJGlzVHJhaWxpbmcgPT09IHZvaWQgMCA/IGZhbHNlIDogX3Byb3BzJGlzVHJhaWxpbmc7XG4gIHZhciByZWYgPSBSZWFjdC51c2VSZWYobnVsbCk7XG4gIHZhciBnZXRUZXh0Q29udGVudCA9IGZ1bmN0aW9uIGdldFRleHRDb250ZW50KCkge1xuICAgIHJldHVybiBcIlwiLmNvbmNhdCh0ZXh0ICE9PSBudWxsICYmIHRleHQgIT09IHZvaWQgMCA/IHRleHQgOiAnJykuY29uY2F0KGlzVHJhaWxpbmcgPyAnXFxuJyA6ICcnKTtcbiAgfTtcbiAgdmFyIF91c2VTdGF0ZSA9IFJlYWN0LnVzZVN0YXRlKGdldFRleHRDb250ZW50KSxcbiAgICBfdXNlU3RhdGUyID0gX3NsaWNlZFRvQXJyYXkoX3VzZVN0YXRlLCAxKSxcbiAgICBpbml0aWFsVGV4dCA9IF91c2VTdGF0ZTJbMF07XG4gIC8vIFRoaXMgaXMgdGhlIGFjdHVhbCB0ZXh0IHJlbmRlcmluZyBib3VuZGFyeSB3aGVyZSB3ZSBpbnRlcmZhY2Ugd2l0aCB0aGUgRE9NXG4gIC8vIFRoZSB0ZXh0IGlzIG5vdCByZW5kZXJlZCBhcyBwYXJ0IG9mIHRoZSB2aXJ0dWFsIERPTSwgYXMgc2luY2Ugd2UgaGFuZGxlIGJhc2ljIGNoYXJhY3RlciBpbnNlcnRpb25zIG5hdGl2ZWx5LFxuICAvLyB1cGRhdGluZyB0aGUgRE9NIGlzIG5vdCBhIG9uZSB3YXkgZGF0YWZsb3cgYW55bW9yZS4gV2hhdCB3ZSBuZWVkIGhlcmUgaXMgbm90IHJlY29uY2lsaWF0aW9uIGFuZCBkaWZmaW5nXG4gIC8vIHdpdGggcHJldmlvdXMgdmVyc2lvbiBvZiB0aGUgdmlydHVhbCBET00sIGJ1dCByYXRoZXIgZGlmZmluZyB3aXRoIHRoZSBhY3R1YWwgRE9NIGVsZW1lbnQsIGFuZCByZXBsYWNlIHRoZSBET00gPHNwYW4+IGNvbnRlbnRcbiAgLy8gZXhhY3RseSBpZiBhbmQgb25seSBpZiBpdHMgY3VycmVudCBjb250ZW50IGRvZXMgbm90IG1hdGNoIG91ciBjdXJyZW50IHZpcnR1YWwgRE9NLlxuICAvLyBPdGhlcndpc2UgdGhlIERPTSBUZXh0Tm9kZSB3b3VsZCBhbHdheXMgYmUgcmVwbGFjZWQgYnkgUmVhY3QgYXMgdGhlIHVzZXIgdHlwZXMsIHdoaWNoIGludGVyZmVyZXMgd2l0aCBuYXRpdmUgdGV4dCBmZWF0dXJlcyxcbiAgLy8gZWcgbWFrZXMgbmF0aXZlIHNwZWxsY2hlY2sgb3B0IG91dCBmcm9tIGNoZWNraW5nIHRoZSB0ZXh0IG5vZGUuXG4gIC8vIHVzZUxheW91dEVmZmVjdDogdXBkYXRpbmcgb3VyIHNwYW4gYmVmb3JlIGJyb3dzZXIgcGFpbnRcbiAgdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgLy8gbnVsbCBjb2FsZXNjaW5nIHRleHQgdG8gbWFrZSBzdXJlIHdlJ3JlIG5vdCBvdXRwdXRpbmcgXCJudWxsXCIgYXMgYSBzdHJpbmcgaW4gdGhlIGV4dHJlbWUgY2FzZSBpdCBpcyBudWxsaXNoIGF0IHJ1bnRpbWVcbiAgICB2YXIgdGV4dFdpdGhUcmFpbGluZyA9IGdldFRleHRDb250ZW50KCk7XG4gICAgaWYgKHJlZi5jdXJyZW50ICYmIHJlZi5jdXJyZW50LnRleHRDb250ZW50ICE9PSB0ZXh0V2l0aFRyYWlsaW5nKSB7XG4gICAgICByZWYuY3VycmVudC50ZXh0Q29udGVudCA9IHRleHRXaXRoVHJhaWxpbmc7XG4gICAgfVxuICAgIC8vIGludGVudGlvbmFsbHkgbm90IHNwZWNpZnlpbmcgZGVwZW5kZW5jaWVzLCBzbyB0aGF0IHRoaXMgZWZmZWN0IHJ1bnMgb24gZXZlcnkgcmVuZGVyXG4gICAgLy8gYXMgdGhpcyBlZmZlY3RpdmVseSByZXBsYWNlcyBcInNwZWNpZnlpbmcgdGhlIHRleHQgaW4gdGhlIHZpcnR1YWwgRE9NIHVuZGVyIHRoZSA8c3Bhbj4gYmVsb3dcIiBvbiBlYWNoIHJlbmRlclxuICB9KTtcbiAgLy8gV2UgaW50ZW50aW9uYWxseSByZW5kZXIgYSBtZW1vaXplZCA8c3Bhbj4gdGhhdCBvbmx5IHJlY2VpdmVzIHRoZSBpbml0aWFsIHRleHQgY29udGVudCB3aGVuIHRoZSBjb21wb25lbnQgaXMgbW91bnRlZC5cbiAgLy8gV2UgZGVmZXIgdG8gdGhlIGxheW91dCBlZmZlY3QgYWJvdmUgdG8gdXBkYXRlIHRoZSBgdGV4dENvbnRlbnRgIG9mIHRoZSBzcGFuIGVsZW1lbnQgd2hlbiBuZWVkZWQuXG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChNZW1vaXplZFRleHQkMSwge1xuICAgIHJlZjogcmVmXG4gIH0sIGluaXRpYWxUZXh0KTtcbn07XG52YXIgTWVtb2l6ZWRUZXh0JDEgPSAvKiNfX1BVUkVfXyovUmVhY3QubWVtbyggLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gKHByb3BzLCByZWYpIHtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwic3BhblwiLCB7XG4gICAgXCJkYXRhLXNsYXRlLXN0cmluZ1wiOiB0cnVlLFxuICAgIHJlZjogcmVmXG4gIH0sIHByb3BzLmNoaWxkcmVuKTtcbn0pKTtcbi8qKlxuICogTGVhZiBzdHJpbmdzIHdpdGhvdXQgdGV4dCwgcmVuZGVyIGFzIHplcm8td2lkdGggc3RyaW5ncy5cbiAqL1xudmFyIFplcm9XaWR0aFN0cmluZyA9IGZ1bmN0aW9uIFplcm9XaWR0aFN0cmluZyhwcm9wcykge1xuICB2YXIgX3Byb3BzJGxlbmd0aCA9IHByb3BzLmxlbmd0aCxcbiAgICBsZW5ndGggPSBfcHJvcHMkbGVuZ3RoID09PSB2b2lkIDAgPyAwIDogX3Byb3BzJGxlbmd0aCxcbiAgICBfcHJvcHMkaXNMaW5lQnJlYWsgPSBwcm9wcy5pc0xpbmVCcmVhayxcbiAgICBpc0xpbmVCcmVhayA9IF9wcm9wcyRpc0xpbmVCcmVhayA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkaXNMaW5lQnJlYWssXG4gICAgX3Byb3BzJGlzTWFya1BsYWNlaG9sID0gcHJvcHMuaXNNYXJrUGxhY2Vob2xkZXIsXG4gICAgaXNNYXJrUGxhY2Vob2xkZXIgPSBfcHJvcHMkaXNNYXJrUGxhY2Vob2wgPT09IHZvaWQgMCA/IGZhbHNlIDogX3Byb3BzJGlzTWFya1BsYWNlaG9sO1xuICB2YXIgYXR0cmlidXRlcyA9IHtcbiAgICAnZGF0YS1zbGF0ZS16ZXJvLXdpZHRoJzogaXNMaW5lQnJlYWsgPyAnbicgOiAneicsXG4gICAgJ2RhdGEtc2xhdGUtbGVuZ3RoJzogbGVuZ3RoXG4gIH07XG4gIGlmIChpc01hcmtQbGFjZWhvbGRlcikge1xuICAgIGF0dHJpYnV0ZXNbJ2RhdGEtc2xhdGUtbWFyay1wbGFjZWhvbGRlciddID0gdHJ1ZTtcbiAgfVxuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIsIF9vYmplY3RTcHJlYWQkMyh7fSwgYXR0cmlidXRlcyksICEoc2xhdGVEb20uSVNfQU5EUk9JRCB8fCBzbGF0ZURvbS5JU19JT1MpIHx8ICFpc0xpbmVCcmVhayA/IFwiXFx1RkVGRlwiIDogbnVsbCwgaXNMaW5lQnJlYWsgPyAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcImJyXCIsIG51bGwpIDogbnVsbCk7XG59O1xuXG5mdW5jdGlvbiBvd25LZXlzJDIoZSwgcikgeyB2YXIgdCA9IE9iamVjdC5rZXlzKGUpOyBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scykgeyB2YXIgbyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMoZSk7IHIgJiYgKG8gPSBvLmZpbHRlcihmdW5jdGlvbiAocikgeyByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihlLCByKS5lbnVtZXJhYmxlOyB9KSksIHQucHVzaC5hcHBseSh0LCBvKTsgfSByZXR1cm4gdDsgfVxuZnVuY3Rpb24gX29iamVjdFNwcmVhZCQyKGUpIHsgZm9yICh2YXIgciA9IDE7IHIgPCBhcmd1bWVudHMubGVuZ3RoOyByKyspIHsgdmFyIHQgPSBudWxsICE9IGFyZ3VtZW50c1tyXSA/IGFyZ3VtZW50c1tyXSA6IHt9OyByICUgMiA/IG93bktleXMkMihPYmplY3QodCksICEwKS5mb3JFYWNoKGZ1bmN0aW9uIChyKSB7IF9kZWZpbmVQcm9wZXJ0eShlLCByLCB0W3JdKTsgfSkgOiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyA/IE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKGUsIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKHQpKSA6IG93bktleXMkMihPYmplY3QodCkpLmZvckVhY2goZnVuY3Rpb24gKHIpIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsIHIsIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodCwgcikpOyB9KTsgfSByZXR1cm4gZTsgfVxuLy8gRGVsYXkgdGhlIHBsYWNlaG9sZGVyIG9uIEFuZHJvaWQgdG8gcHJldmVudCB0aGUga2V5Ym9hcmQgZnJvbSBjbG9zaW5nLlxuLy8gKGh0dHBzOi8vZ2l0aHViLmNvbS9pYW5zdG9ybXRheWxvci9zbGF0ZS9wdWxsLzUzNjgpXG52YXIgUExBQ0VIT0xERVJfREVMQVkgPSBzbGF0ZURvbS5JU19BTkRST0lEID8gMzAwIDogMDtcbmZ1bmN0aW9uIGRpc2Nvbm5lY3RQbGFjZWhvbGRlclJlc2l6ZU9ic2VydmVyKHBsYWNlaG9sZGVyUmVzaXplT2JzZXJ2ZXIsIHJlbGVhc2VPYnNlcnZlcikge1xuICBpZiAocGxhY2Vob2xkZXJSZXNpemVPYnNlcnZlci5jdXJyZW50KSB7XG4gICAgcGxhY2Vob2xkZXJSZXNpemVPYnNlcnZlci5jdXJyZW50LmRpc2Nvbm5lY3QoKTtcbiAgICBpZiAocmVsZWFzZU9ic2VydmVyKSB7XG4gICAgICBwbGFjZWhvbGRlclJlc2l6ZU9ic2VydmVyLmN1cnJlbnQgPSBudWxsO1xuICAgIH1cbiAgfVxufVxuZnVuY3Rpb24gY2xlYXJUaW1lb3V0UmVmKHRpbWVvdXRSZWYpIHtcbiAgaWYgKHRpbWVvdXRSZWYuY3VycmVudCkge1xuICAgIGNsZWFyVGltZW91dCh0aW1lb3V0UmVmLmN1cnJlbnQpO1xuICAgIHRpbWVvdXRSZWYuY3VycmVudCA9IG51bGw7XG4gIH1cbn1cbi8qKlxuICogSW5kaXZpZHVhbCBsZWF2ZXMgaW4gYSB0ZXh0IG5vZGUgd2l0aCB1bmlxdWUgZm9ybWF0dGluZy5cbiAqL1xudmFyIExlYWYgPSBmdW5jdGlvbiBMZWFmKHByb3BzKSB7XG4gIHZhciBsZWFmID0gcHJvcHMubGVhZixcbiAgICBpc0xhc3QgPSBwcm9wcy5pc0xhc3QsXG4gICAgdGV4dCA9IHByb3BzLnRleHQsXG4gICAgcGFyZW50ID0gcHJvcHMucGFyZW50LFxuICAgIHJlbmRlclBsYWNlaG9sZGVyID0gcHJvcHMucmVuZGVyUGxhY2Vob2xkZXIsXG4gICAgX3Byb3BzJHJlbmRlckxlYWYgPSBwcm9wcy5yZW5kZXJMZWFmLFxuICAgIHJlbmRlckxlYWYgPSBfcHJvcHMkcmVuZGVyTGVhZiA9PT0gdm9pZCAwID8gZnVuY3Rpb24gKHByb3BzKSB7XG4gICAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoRGVmYXVsdExlYWYsIF9vYmplY3RTcHJlYWQkMih7fSwgcHJvcHMpKTtcbiAgICB9IDogX3Byb3BzJHJlbmRlckxlYWY7XG4gIHZhciBlZGl0b3IgPSB1c2VTbGF0ZVN0YXRpYygpO1xuICB2YXIgcGxhY2Vob2xkZXJSZXNpemVPYnNlcnZlciA9IFJlYWN0LnVzZVJlZihudWxsKTtcbiAgdmFyIHBsYWNlaG9sZGVyUmVmID0gUmVhY3QudXNlUmVmKG51bGwpO1xuICB2YXIgX3VzZVN0YXRlID0gUmVhY3QudXNlU3RhdGUoZmFsc2UpLFxuICAgIF91c2VTdGF0ZTIgPSBfc2xpY2VkVG9BcnJheShfdXNlU3RhdGUsIDIpLFxuICAgIHNob3dQbGFjZWhvbGRlciA9IF91c2VTdGF0ZTJbMF0sXG4gICAgc2V0U2hvd1BsYWNlaG9sZGVyID0gX3VzZVN0YXRlMlsxXTtcbiAgdmFyIHNob3dQbGFjZWhvbGRlclRpbWVvdXRSZWYgPSBSZWFjdC51c2VSZWYobnVsbCk7XG4gIHZhciBjYWxsYmFja1BsYWNlaG9sZGVyUmVmID0gUmVhY3QudXNlQ2FsbGJhY2soZnVuY3Rpb24gKHBsYWNlaG9sZGVyRWwpIHtcbiAgICBkaXNjb25uZWN0UGxhY2Vob2xkZXJSZXNpemVPYnNlcnZlcihwbGFjZWhvbGRlclJlc2l6ZU9ic2VydmVyLCBwbGFjZWhvbGRlckVsID09IG51bGwpO1xuICAgIGlmIChwbGFjZWhvbGRlckVsID09IG51bGwpIHtcbiAgICAgIHZhciBfbGVhZiRvblBsYWNlaG9sZGVyUmU7XG4gICAgICBzbGF0ZURvbS5FRElUT1JfVE9fUExBQ0VIT0xERVJfRUxFTUVOVFtcImRlbGV0ZVwiXShlZGl0b3IpO1xuICAgICAgKF9sZWFmJG9uUGxhY2Vob2xkZXJSZSA9IGxlYWYub25QbGFjZWhvbGRlclJlc2l6ZSkgPT09IG51bGwgfHwgX2xlYWYkb25QbGFjZWhvbGRlclJlID09PSB2b2lkIDAgfHwgX2xlYWYkb25QbGFjZWhvbGRlclJlLmNhbGwobGVhZiwgbnVsbCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHNsYXRlRG9tLkVESVRPUl9UT19QTEFDRUhPTERFUl9FTEVNRU5ULnNldChlZGl0b3IsIHBsYWNlaG9sZGVyRWwpO1xuICAgICAgaWYgKCFwbGFjZWhvbGRlclJlc2l6ZU9ic2VydmVyLmN1cnJlbnQpIHtcbiAgICAgICAgLy8gQ3JlYXRlIGEgbmV3IG9ic2VydmVyIGFuZCBvYnNlcnZlIHRoZSBwbGFjZWhvbGRlciBlbGVtZW50LlxuICAgICAgICB2YXIgUmVzaXplT2JzZXJ2ZXIgPSB3aW5kb3cuUmVzaXplT2JzZXJ2ZXIgfHwgcmVzaXplT2JzZXJ2ZXIuUmVzaXplT2JzZXJ2ZXI7XG4gICAgICAgIHBsYWNlaG9sZGVyUmVzaXplT2JzZXJ2ZXIuY3VycmVudCA9IG5ldyBSZXNpemVPYnNlcnZlcihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgdmFyIF9sZWFmJG9uUGxhY2Vob2xkZXJSZTI7XG4gICAgICAgICAgKF9sZWFmJG9uUGxhY2Vob2xkZXJSZTIgPSBsZWFmLm9uUGxhY2Vob2xkZXJSZXNpemUpID09PSBudWxsIHx8IF9sZWFmJG9uUGxhY2Vob2xkZXJSZTIgPT09IHZvaWQgMCB8fCBfbGVhZiRvblBsYWNlaG9sZGVyUmUyLmNhbGwobGVhZiwgcGxhY2Vob2xkZXJFbCk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgcGxhY2Vob2xkZXJSZXNpemVPYnNlcnZlci5jdXJyZW50Lm9ic2VydmUocGxhY2Vob2xkZXJFbCk7XG4gICAgICBwbGFjZWhvbGRlclJlZi5jdXJyZW50ID0gcGxhY2Vob2xkZXJFbDtcbiAgICB9XG4gIH0sIFtwbGFjZWhvbGRlclJlZiwgbGVhZiwgZWRpdG9yXSk7XG4gIHZhciBjaGlsZHJlbiA9IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFN0cmluZyQxLCB7XG4gICAgaXNMYXN0OiBpc0xhc3QsXG4gICAgbGVhZjogbGVhZixcbiAgICBwYXJlbnQ6IHBhcmVudCxcbiAgICB0ZXh0OiB0ZXh0XG4gIH0pO1xuICB2YXIgbGVhZklzUGxhY2Vob2xkZXIgPSBCb29sZWFuKGxlYWZbc2xhdGVEb20uUExBQ0VIT0xERVJfU1lNQk9MXSk7XG4gIFJlYWN0LnVzZUVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgaWYgKGxlYWZJc1BsYWNlaG9sZGVyKSB7XG4gICAgICBpZiAoIXNob3dQbGFjZWhvbGRlclRpbWVvdXRSZWYuY3VycmVudCkge1xuICAgICAgICAvLyBEZWxheSB0aGUgcGxhY2Vob2xkZXIsIHNvIGl0IHdpbGwgbm90IHJlbmRlciBpbiBhIHNlbGVjdGlvblxuICAgICAgICBzaG93UGxhY2Vob2xkZXJUaW1lb3V0UmVmLmN1cnJlbnQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBzZXRTaG93UGxhY2Vob2xkZXIodHJ1ZSk7XG4gICAgICAgICAgc2hvd1BsYWNlaG9sZGVyVGltZW91dFJlZi5jdXJyZW50ID0gbnVsbDtcbiAgICAgICAgfSwgUExBQ0VIT0xERVJfREVMQVkpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBjbGVhclRpbWVvdXRSZWYoc2hvd1BsYWNlaG9sZGVyVGltZW91dFJlZik7XG4gICAgICBzZXRTaG93UGxhY2Vob2xkZXIoZmFsc2UpO1xuICAgIH1cbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIGNsZWFyVGltZW91dFJlZihzaG93UGxhY2Vob2xkZXJUaW1lb3V0UmVmKTtcbiAgICB9O1xuICB9LCBbbGVhZklzUGxhY2Vob2xkZXIsIHNldFNob3dQbGFjZWhvbGRlcl0pO1xuICBpZiAobGVhZklzUGxhY2Vob2xkZXIgJiYgc2hvd1BsYWNlaG9sZGVyKSB7XG4gICAgdmFyIHBsYWNlaG9sZGVyUHJvcHMgPSB7XG4gICAgICBjaGlsZHJlbjogbGVhZi5wbGFjZWhvbGRlcixcbiAgICAgIGF0dHJpYnV0ZXM6IHtcbiAgICAgICAgJ2RhdGEtc2xhdGUtcGxhY2Vob2xkZXInOiB0cnVlLFxuICAgICAgICBzdHlsZToge1xuICAgICAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgICAgICAgIHRvcDogMCxcbiAgICAgICAgICBwb2ludGVyRXZlbnRzOiAnbm9uZScsXG4gICAgICAgICAgd2lkdGg6ICcxMDAlJyxcbiAgICAgICAgICBtYXhXaWR0aDogJzEwMCUnLFxuICAgICAgICAgIGRpc3BsYXk6ICdibG9jaycsXG4gICAgICAgICAgb3BhY2l0eTogJzAuMzMzJyxcbiAgICAgICAgICB1c2VyU2VsZWN0OiAnbm9uZScsXG4gICAgICAgICAgdGV4dERlY29yYXRpb246ICdub25lJyxcbiAgICAgICAgICAvLyBGaXhlcyBodHRwczovL2dpdGh1Yi5jb20vdWRlY29kZS9wbGF0ZS9pc3N1ZXMvMjMxNVxuICAgICAgICAgIFdlYmtpdFVzZXJNb2RpZnk6IHNsYXRlRG9tLklTX1dFQktJVCA/ICdpbmhlcml0JyA6IHVuZGVmaW5lZFxuICAgICAgICB9LFxuICAgICAgICBjb250ZW50RWRpdGFibGU6IGZhbHNlLFxuICAgICAgICByZWY6IGNhbGxiYWNrUGxhY2Vob2xkZXJSZWZcbiAgICAgIH1cbiAgICB9O1xuICAgIGNoaWxkcmVuID0gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoUmVhY3QuRnJhZ21lbnQsIG51bGwsIHJlbmRlclBsYWNlaG9sZGVyKHBsYWNlaG9sZGVyUHJvcHMpLCBjaGlsZHJlbik7XG4gIH1cbiAgLy8gQ09NUEFUOiBIYXZpbmcgdGhlIGBkYXRhLWAgYXR0cmlidXRlcyBvbiB0aGVzZSBsZWFmIGVsZW1lbnRzIGVuc3VyZXMgdGhhdFxuICAvLyBpbiBjZXJ0YWluIG1pc2JlaGF2aW5nIGJyb3dzZXJzIHRoZXkgYXJlbid0IHdlaXJkbHkgY2xvbmVkL2Rlc3Ryb3llZCBieVxuICAvLyBjb250ZW50ZWRpdGFibGUgYmVoYXZpb3JzLiAoMjAxOS8wNS8wOClcbiAgdmFyIGF0dHJpYnV0ZXMgPSB7XG4gICAgJ2RhdGEtc2xhdGUtbGVhZic6IHRydWVcbiAgfTtcbiAgcmV0dXJuIHJlbmRlckxlYWYoe1xuICAgIGF0dHJpYnV0ZXM6IGF0dHJpYnV0ZXMsXG4gICAgY2hpbGRyZW46IGNoaWxkcmVuLFxuICAgIGxlYWY6IGxlYWYsXG4gICAgdGV4dDogdGV4dFxuICB9KTtcbn07XG52YXIgTWVtb2l6ZWRMZWFmID0gLyojX19QVVJFX18qL1JlYWN0Lm1lbW8oTGVhZiwgZnVuY3Rpb24gKHByZXYsIG5leHQpIHtcbiAgcmV0dXJuIG5leHQucGFyZW50ID09PSBwcmV2LnBhcmVudCAmJiBuZXh0LmlzTGFzdCA9PT0gcHJldi5pc0xhc3QgJiYgbmV4dC5yZW5kZXJMZWFmID09PSBwcmV2LnJlbmRlckxlYWYgJiYgbmV4dC5yZW5kZXJQbGFjZWhvbGRlciA9PT0gcHJldi5yZW5kZXJQbGFjZWhvbGRlciAmJiBuZXh0LnRleHQgPT09IHByZXYudGV4dCAmJiBzbGF0ZS5UZXh0LmVxdWFscyhuZXh0LmxlYWYsIHByZXYubGVhZikgJiYgbmV4dC5sZWFmW3NsYXRlRG9tLlBMQUNFSE9MREVSX1NZTUJPTF0gPT09IHByZXYubGVhZltzbGF0ZURvbS5QTEFDRUhPTERFUl9TWU1CT0xdO1xufSk7XG52YXIgRGVmYXVsdExlYWYgPSBmdW5jdGlvbiBEZWZhdWx0TGVhZihwcm9wcykge1xuICB2YXIgYXR0cmlidXRlcyA9IHByb3BzLmF0dHJpYnV0ZXMsXG4gICAgY2hpbGRyZW4gPSBwcm9wcy5jaGlsZHJlbjtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwic3BhblwiLCBfb2JqZWN0U3ByZWFkJDIoe30sIGF0dHJpYnV0ZXMpLCBjaGlsZHJlbik7XG59O1xuXG4vKipcbiAqIFRleHQuXG4gKi9cbnZhciBUZXh0ID0gZnVuY3Rpb24gVGV4dChwcm9wcykge1xuICB2YXIgZGVjb3JhdGlvbnMgPSBwcm9wcy5kZWNvcmF0aW9ucyxcbiAgICBpc0xhc3QgPSBwcm9wcy5pc0xhc3QsXG4gICAgcGFyZW50ID0gcHJvcHMucGFyZW50LFxuICAgIHJlbmRlclBsYWNlaG9sZGVyID0gcHJvcHMucmVuZGVyUGxhY2Vob2xkZXIsXG4gICAgcmVuZGVyTGVhZiA9IHByb3BzLnJlbmRlckxlYWYsXG4gICAgdGV4dCA9IHByb3BzLnRleHQ7XG4gIHZhciBlZGl0b3IgPSB1c2VTbGF0ZVN0YXRpYygpO1xuICB2YXIgcmVmID0gUmVhY3QudXNlUmVmKG51bGwpO1xuICB2YXIgbGVhdmVzID0gc2xhdGUuVGV4dC5kZWNvcmF0aW9ucyh0ZXh0LCBkZWNvcmF0aW9ucyk7XG4gIHZhciBrZXkgPSBSZWFjdEVkaXRvci5maW5kS2V5KGVkaXRvciwgdGV4dCk7XG4gIHZhciBjaGlsZHJlbiA9IFtdO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlYXZlcy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBsZWFmID0gbGVhdmVzW2ldO1xuICAgIGNoaWxkcmVuLnB1c2goIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KE1lbW9pemVkTGVhZiwge1xuICAgICAgaXNMYXN0OiBpc0xhc3QgJiYgaSA9PT0gbGVhdmVzLmxlbmd0aCAtIDEsXG4gICAgICBrZXk6IFwiXCIuY29uY2F0KGtleS5pZCwgXCItXCIpLmNvbmNhdChpKSxcbiAgICAgIHJlbmRlclBsYWNlaG9sZGVyOiByZW5kZXJQbGFjZWhvbGRlcixcbiAgICAgIGxlYWY6IGxlYWYsXG4gICAgICB0ZXh0OiB0ZXh0LFxuICAgICAgcGFyZW50OiBwYXJlbnQsXG4gICAgICByZW5kZXJMZWFmOiByZW5kZXJMZWFmXG4gICAgfSkpO1xuICB9XG4gIC8vIFVwZGF0ZSBlbGVtZW50LXJlbGF0ZWQgd2VhayBtYXBzIHdpdGggdGhlIERPTSBlbGVtZW50IHJlZi5cbiAgdmFyIGNhbGxiYWNrUmVmID0gUmVhY3QudXNlQ2FsbGJhY2soZnVuY3Rpb24gKHNwYW4pIHtcbiAgICB2YXIgS0VZX1RPX0VMRU1FTlQgPSBzbGF0ZURvbS5FRElUT1JfVE9fS0VZX1RPX0VMRU1FTlQuZ2V0KGVkaXRvcik7XG4gICAgaWYgKHNwYW4pIHtcbiAgICAgIEtFWV9UT19FTEVNRU5UID09PSBudWxsIHx8IEtFWV9UT19FTEVNRU5UID09PSB2b2lkIDAgfHwgS0VZX1RPX0VMRU1FTlQuc2V0KGtleSwgc3Bhbik7XG4gICAgICBzbGF0ZURvbS5OT0RFX1RPX0VMRU1FTlQuc2V0KHRleHQsIHNwYW4pO1xuICAgICAgc2xhdGVEb20uRUxFTUVOVF9UT19OT0RFLnNldChzcGFuLCB0ZXh0KTtcbiAgICB9IGVsc2Uge1xuICAgICAgS0VZX1RPX0VMRU1FTlQgPT09IG51bGwgfHwgS0VZX1RPX0VMRU1FTlQgPT09IHZvaWQgMCB8fCBLRVlfVE9fRUxFTUVOVFtcImRlbGV0ZVwiXShrZXkpO1xuICAgICAgc2xhdGVEb20uTk9ERV9UT19FTEVNRU5UW1wiZGVsZXRlXCJdKHRleHQpO1xuICAgICAgaWYgKHJlZi5jdXJyZW50KSB7XG4gICAgICAgIHNsYXRlRG9tLkVMRU1FTlRfVE9fTk9ERVtcImRlbGV0ZVwiXShyZWYuY3VycmVudCk7XG4gICAgICB9XG4gICAgfVxuICAgIHJlZi5jdXJyZW50ID0gc3BhbjtcbiAgfSwgW3JlZiwgZWRpdG9yLCBrZXksIHRleHRdKTtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwic3BhblwiLCB7XG4gICAgXCJkYXRhLXNsYXRlLW5vZGVcIjogXCJ0ZXh0XCIsXG4gICAgcmVmOiBjYWxsYmFja1JlZlxuICB9LCBjaGlsZHJlbik7XG59O1xudmFyIE1lbW9pemVkVGV4dCA9IC8qI19fUFVSRV9fKi9SZWFjdC5tZW1vKFRleHQsIGZ1bmN0aW9uIChwcmV2LCBuZXh0KSB7XG4gIHJldHVybiBuZXh0LnBhcmVudCA9PT0gcHJldi5wYXJlbnQgJiYgbmV4dC5pc0xhc3QgPT09IHByZXYuaXNMYXN0ICYmIG5leHQucmVuZGVyTGVhZiA9PT0gcHJldi5yZW5kZXJMZWFmICYmIG5leHQucmVuZGVyUGxhY2Vob2xkZXIgPT09IHByZXYucmVuZGVyUGxhY2Vob2xkZXIgJiYgbmV4dC50ZXh0ID09PSBwcmV2LnRleHQgJiYgc2xhdGVEb20uaXNUZXh0RGVjb3JhdGlvbnNFcXVhbChuZXh0LmRlY29yYXRpb25zLCBwcmV2LmRlY29yYXRpb25zKTtcbn0pO1xuXG5mdW5jdGlvbiBvd25LZXlzJDEoZSwgcikgeyB2YXIgdCA9IE9iamVjdC5rZXlzKGUpOyBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scykgeyB2YXIgbyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMoZSk7IHIgJiYgKG8gPSBvLmZpbHRlcihmdW5jdGlvbiAocikgeyByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihlLCByKS5lbnVtZXJhYmxlOyB9KSksIHQucHVzaC5hcHBseSh0LCBvKTsgfSByZXR1cm4gdDsgfVxuZnVuY3Rpb24gX29iamVjdFNwcmVhZCQxKGUpIHsgZm9yICh2YXIgciA9IDE7IHIgPCBhcmd1bWVudHMubGVuZ3RoOyByKyspIHsgdmFyIHQgPSBudWxsICE9IGFyZ3VtZW50c1tyXSA/IGFyZ3VtZW50c1tyXSA6IHt9OyByICUgMiA/IG93bktleXMkMShPYmplY3QodCksICEwKS5mb3JFYWNoKGZ1bmN0aW9uIChyKSB7IF9kZWZpbmVQcm9wZXJ0eShlLCByLCB0W3JdKTsgfSkgOiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyA/IE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKGUsIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKHQpKSA6IG93bktleXMkMShPYmplY3QodCkpLmZvckVhY2goZnVuY3Rpb24gKHIpIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsIHIsIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodCwgcikpOyB9KTsgfSByZXR1cm4gZTsgfVxuLyoqXG4gKiBFbGVtZW50LlxuICovXG52YXIgRWxlbWVudCA9IGZ1bmN0aW9uIEVsZW1lbnQocHJvcHMpIHtcbiAgdmFyIGRlY29yYXRpb25zID0gcHJvcHMuZGVjb3JhdGlvbnMsXG4gICAgZWxlbWVudCA9IHByb3BzLmVsZW1lbnQsXG4gICAgX3Byb3BzJHJlbmRlckVsZW1lbnQgPSBwcm9wcy5yZW5kZXJFbGVtZW50LFxuICAgIHJlbmRlckVsZW1lbnQgPSBfcHJvcHMkcmVuZGVyRWxlbWVudCA9PT0gdm9pZCAwID8gZnVuY3Rpb24gKHApIHtcbiAgICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChEZWZhdWx0RWxlbWVudCwgX29iamVjdFNwcmVhZCQxKHt9LCBwKSk7XG4gICAgfSA6IF9wcm9wcyRyZW5kZXJFbGVtZW50LFxuICAgIHJlbmRlclBsYWNlaG9sZGVyID0gcHJvcHMucmVuZGVyUGxhY2Vob2xkZXIsXG4gICAgcmVuZGVyTGVhZiA9IHByb3BzLnJlbmRlckxlYWYsXG4gICAgc2VsZWN0aW9uID0gcHJvcHMuc2VsZWN0aW9uO1xuICB2YXIgZWRpdG9yID0gdXNlU2xhdGVTdGF0aWMoKTtcbiAgdmFyIHJlYWRPbmx5ID0gdXNlUmVhZE9ubHkoKTtcbiAgdmFyIGlzSW5saW5lID0gZWRpdG9yLmlzSW5saW5lKGVsZW1lbnQpO1xuICB2YXIga2V5ID0gUmVhY3RFZGl0b3IuZmluZEtleShlZGl0b3IsIGVsZW1lbnQpO1xuICB2YXIgcmVmID0gUmVhY3QudXNlQ2FsbGJhY2soZnVuY3Rpb24gKHJlZikge1xuICAgIC8vIFVwZGF0ZSBlbGVtZW50LXJlbGF0ZWQgd2VhayBtYXBzIHdpdGggdGhlIERPTSBlbGVtZW50IHJlZi5cbiAgICB2YXIgS0VZX1RPX0VMRU1FTlQgPSBzbGF0ZURvbS5FRElUT1JfVE9fS0VZX1RPX0VMRU1FTlQuZ2V0KGVkaXRvcik7XG4gICAgaWYgKHJlZikge1xuICAgICAgS0VZX1RPX0VMRU1FTlQgPT09IG51bGwgfHwgS0VZX1RPX0VMRU1FTlQgPT09IHZvaWQgMCB8fCBLRVlfVE9fRUxFTUVOVC5zZXQoa2V5LCByZWYpO1xuICAgICAgc2xhdGVEb20uTk9ERV9UT19FTEVNRU5ULnNldChlbGVtZW50LCByZWYpO1xuICAgICAgc2xhdGVEb20uRUxFTUVOVF9UT19OT0RFLnNldChyZWYsIGVsZW1lbnQpO1xuICAgIH0gZWxzZSB7XG4gICAgICBLRVlfVE9fRUxFTUVOVCA9PT0gbnVsbCB8fCBLRVlfVE9fRUxFTUVOVCA9PT0gdm9pZCAwIHx8IEtFWV9UT19FTEVNRU5UW1wiZGVsZXRlXCJdKGtleSk7XG4gICAgICBzbGF0ZURvbS5OT0RFX1RPX0VMRU1FTlRbXCJkZWxldGVcIl0oZWxlbWVudCk7XG4gICAgfVxuICB9LCBbZWRpdG9yLCBrZXksIGVsZW1lbnRdKTtcbiAgdmFyIGNoaWxkcmVuID0gdXNlQ2hpbGRyZW4oe1xuICAgIGRlY29yYXRpb25zOiBkZWNvcmF0aW9ucyxcbiAgICBub2RlOiBlbGVtZW50LFxuICAgIHJlbmRlckVsZW1lbnQ6IHJlbmRlckVsZW1lbnQsXG4gICAgcmVuZGVyUGxhY2Vob2xkZXI6IHJlbmRlclBsYWNlaG9sZGVyLFxuICAgIHJlbmRlckxlYWY6IHJlbmRlckxlYWYsXG4gICAgc2VsZWN0aW9uOiBzZWxlY3Rpb25cbiAgfSk7XG4gIC8vIEF0dHJpYnV0ZXMgdGhhdCB0aGUgZGV2ZWxvcGVyIG11c3QgbWl4IGludG8gdGhlIGVsZW1lbnQgaW4gdGhlaXJcbiAgLy8gY3VzdG9tIG5vZGUgcmVuZGVyZXIgY29tcG9uZW50LlxuICB2YXIgYXR0cmlidXRlcyA9IHtcbiAgICAnZGF0YS1zbGF0ZS1ub2RlJzogJ2VsZW1lbnQnLFxuICAgIHJlZjogcmVmXG4gIH07XG4gIGlmIChpc0lubGluZSkge1xuICAgIGF0dHJpYnV0ZXNbJ2RhdGEtc2xhdGUtaW5saW5lJ10gPSB0cnVlO1xuICB9XG4gIC8vIElmIGl0J3MgYSBibG9jayBub2RlIHdpdGggaW5saW5lIGNoaWxkcmVuLCBhZGQgdGhlIHByb3BlciBgZGlyYCBhdHRyaWJ1dGVcbiAgLy8gZm9yIHRleHQgZGlyZWN0aW9uLlxuICBpZiAoIWlzSW5saW5lICYmIHNsYXRlLkVkaXRvci5oYXNJbmxpbmVzKGVkaXRvciwgZWxlbWVudCkpIHtcbiAgICB2YXIgdGV4dCA9IHNsYXRlLk5vZGUuc3RyaW5nKGVsZW1lbnQpO1xuICAgIHZhciBkaXIgPSBnZXREaXJlY3Rpb24odGV4dCk7XG4gICAgaWYgKGRpciA9PT0gJ3J0bCcpIHtcbiAgICAgIGF0dHJpYnV0ZXMuZGlyID0gZGlyO1xuICAgIH1cbiAgfVxuICAvLyBJZiBpdCdzIGEgdm9pZCBub2RlLCB3cmFwIHRoZSBjaGlsZHJlbiBpbiBleHRyYSB2b2lkLXNwZWNpZmljIGVsZW1lbnRzLlxuICBpZiAoc2xhdGUuRWRpdG9yLmlzVm9pZChlZGl0b3IsIGVsZW1lbnQpKSB7XG4gICAgYXR0cmlidXRlc1snZGF0YS1zbGF0ZS12b2lkJ10gPSB0cnVlO1xuICAgIGlmICghcmVhZE9ubHkgJiYgaXNJbmxpbmUpIHtcbiAgICAgIGF0dHJpYnV0ZXMuY29udGVudEVkaXRhYmxlID0gZmFsc2U7XG4gICAgfVxuICAgIHZhciBUYWcgPSBpc0lubGluZSA/ICdzcGFuJyA6ICdkaXYnO1xuICAgIHZhciBfTm9kZSR0ZXh0cyA9IHNsYXRlLk5vZGUudGV4dHMoZWxlbWVudCksXG4gICAgICBfTm9kZSR0ZXh0czIgPSBfc2xpY2VkVG9BcnJheShfTm9kZSR0ZXh0cywgMSksXG4gICAgICBfTm9kZSR0ZXh0czIkID0gX3NsaWNlZFRvQXJyYXkoX05vZGUkdGV4dHMyWzBdLCAxKSxcbiAgICAgIF90ZXh0ID0gX05vZGUkdGV4dHMyJFswXTtcbiAgICBjaGlsZHJlbiA9IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFRhZywge1xuICAgICAgXCJkYXRhLXNsYXRlLXNwYWNlclwiOiB0cnVlLFxuICAgICAgc3R5bGU6IHtcbiAgICAgICAgaGVpZ2h0OiAnMCcsXG4gICAgICAgIGNvbG9yOiAndHJhbnNwYXJlbnQnLFxuICAgICAgICBvdXRsaW5lOiAnbm9uZScsXG4gICAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnXG4gICAgICB9XG4gICAgfSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoTWVtb2l6ZWRUZXh0LCB7XG4gICAgICByZW5kZXJQbGFjZWhvbGRlcjogcmVuZGVyUGxhY2Vob2xkZXIsXG4gICAgICBkZWNvcmF0aW9uczogW10sXG4gICAgICBpc0xhc3Q6IGZhbHNlLFxuICAgICAgcGFyZW50OiBlbGVtZW50LFxuICAgICAgdGV4dDogX3RleHRcbiAgICB9KSk7XG4gICAgc2xhdGVEb20uTk9ERV9UT19JTkRFWC5zZXQoX3RleHQsIDApO1xuICAgIHNsYXRlRG9tLk5PREVfVE9fUEFSRU5ULnNldChfdGV4dCwgZWxlbWVudCk7XG4gIH1cbiAgcmV0dXJuIHJlbmRlckVsZW1lbnQoe1xuICAgIGF0dHJpYnV0ZXM6IGF0dHJpYnV0ZXMsXG4gICAgY2hpbGRyZW46IGNoaWxkcmVuLFxuICAgIGVsZW1lbnQ6IGVsZW1lbnRcbiAgfSk7XG59O1xudmFyIE1lbW9pemVkRWxlbWVudCA9IC8qI19fUFVSRV9fKi9SZWFjdC5tZW1vKEVsZW1lbnQsIGZ1bmN0aW9uIChwcmV2LCBuZXh0KSB7XG4gIHJldHVybiBwcmV2LmVsZW1lbnQgPT09IG5leHQuZWxlbWVudCAmJiBwcmV2LnJlbmRlckVsZW1lbnQgPT09IG5leHQucmVuZGVyRWxlbWVudCAmJiBwcmV2LnJlbmRlckxlYWYgPT09IG5leHQucmVuZGVyTGVhZiAmJiBwcmV2LnJlbmRlclBsYWNlaG9sZGVyID09PSBuZXh0LnJlbmRlclBsYWNlaG9sZGVyICYmIHNsYXRlRG9tLmlzRWxlbWVudERlY29yYXRpb25zRXF1YWwocHJldi5kZWNvcmF0aW9ucywgbmV4dC5kZWNvcmF0aW9ucykgJiYgKHByZXYuc2VsZWN0aW9uID09PSBuZXh0LnNlbGVjdGlvbiB8fCAhIXByZXYuc2VsZWN0aW9uICYmICEhbmV4dC5zZWxlY3Rpb24gJiYgc2xhdGUuUmFuZ2UuZXF1YWxzKHByZXYuc2VsZWN0aW9uLCBuZXh0LnNlbGVjdGlvbikpO1xufSk7XG4vKipcbiAqIFRoZSBkZWZhdWx0IGVsZW1lbnQgcmVuZGVyZXIuXG4gKi9cbnZhciBEZWZhdWx0RWxlbWVudCA9IGZ1bmN0aW9uIERlZmF1bHRFbGVtZW50KHByb3BzKSB7XG4gIHZhciBhdHRyaWJ1dGVzID0gcHJvcHMuYXR0cmlidXRlcyxcbiAgICBjaGlsZHJlbiA9IHByb3BzLmNoaWxkcmVuLFxuICAgIGVsZW1lbnQgPSBwcm9wcy5lbGVtZW50O1xuICB2YXIgZWRpdG9yID0gdXNlU2xhdGVTdGF0aWMoKTtcbiAgdmFyIFRhZyA9IGVkaXRvci5pc0lubGluZShlbGVtZW50KSA/ICdzcGFuJyA6ICdkaXYnO1xuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoVGFnLCBfb2JqZWN0U3ByZWFkJDEoX29iamVjdFNwcmVhZCQxKHt9LCBhdHRyaWJ1dGVzKSwge30sIHtcbiAgICBzdHlsZToge1xuICAgICAgcG9zaXRpb246ICdyZWxhdGl2ZSdcbiAgICB9XG4gIH0pLCBjaGlsZHJlbik7XG59O1xuXG4vKipcbiAqIEEgUmVhY3QgY29udGV4dCBmb3Igc2hhcmluZyB0aGUgYGRlY29yYXRlYCBwcm9wIG9mIHRoZSBlZGl0YWJsZS5cbiAqL1xudmFyIERlY29yYXRlQ29udGV4dCA9IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVDb250ZXh0KGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIFtdO1xufSk7XG4vKipcbiAqIEdldCB0aGUgY3VycmVudCBgZGVjb3JhdGVgIHByb3Agb2YgdGhlIGVkaXRhYmxlLlxuICovXG52YXIgdXNlRGVjb3JhdGUgPSBmdW5jdGlvbiB1c2VEZWNvcmF0ZSgpIHtcbiAgcmV0dXJuIFJlYWN0LnVzZUNvbnRleHQoRGVjb3JhdGVDb250ZXh0KTtcbn07XG5cbi8qKlxuICogQSBSZWFjdCBjb250ZXh0IGZvciBzaGFyaW5nIHRoZSBgc2VsZWN0ZWRgIHN0YXRlIG9mIGFuIGVsZW1lbnQuXG4gKi9cbnZhciBTZWxlY3RlZENvbnRleHQgPSAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlQ29udGV4dChmYWxzZSk7XG4vKipcbiAqIEdldCB0aGUgY3VycmVudCBgc2VsZWN0ZWRgIHN0YXRlIG9mIGFuIGVsZW1lbnQuXG4gKi9cbnZhciB1c2VTZWxlY3RlZCA9IGZ1bmN0aW9uIHVzZVNlbGVjdGVkKCkge1xuICByZXR1cm4gUmVhY3QudXNlQ29udGV4dChTZWxlY3RlZENvbnRleHQpO1xufTtcblxuZnVuY3Rpb24gX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIkMShvLCBhbGxvd0FycmF5TGlrZSkgeyB2YXIgaXQgPSB0eXBlb2YgU3ltYm9sICE9PSBcInVuZGVmaW5lZFwiICYmIG9bU3ltYm9sLml0ZXJhdG9yXSB8fCBvW1wiQEBpdGVyYXRvclwiXTsgaWYgKCFpdCkgeyBpZiAoQXJyYXkuaXNBcnJheShvKSB8fCAoaXQgPSBfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkkMShvKSkgfHwgYWxsb3dBcnJheUxpa2UgJiYgbyAmJiB0eXBlb2Ygby5sZW5ndGggPT09IFwibnVtYmVyXCIpIHsgaWYgKGl0KSBvID0gaXQ7IHZhciBpID0gMDsgdmFyIEYgPSBmdW5jdGlvbiBGKCkge307IHJldHVybiB7IHM6IEYsIG46IGZ1bmN0aW9uIG4oKSB7IGlmIChpID49IG8ubGVuZ3RoKSByZXR1cm4geyBkb25lOiB0cnVlIH07IHJldHVybiB7IGRvbmU6IGZhbHNlLCB2YWx1ZTogb1tpKytdIH07IH0sIGU6IGZ1bmN0aW9uIGUoX2UpIHsgdGhyb3cgX2U7IH0sIGY6IEYgfTsgfSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiSW52YWxpZCBhdHRlbXB0IHRvIGl0ZXJhdGUgbm9uLWl0ZXJhYmxlIGluc3RhbmNlLlxcbkluIG9yZGVyIHRvIGJlIGl0ZXJhYmxlLCBub24tYXJyYXkgb2JqZWN0cyBtdXN0IGhhdmUgYSBbU3ltYm9sLml0ZXJhdG9yXSgpIG1ldGhvZC5cIik7IH0gdmFyIG5vcm1hbENvbXBsZXRpb24gPSB0cnVlLCBkaWRFcnIgPSBmYWxzZSwgZXJyOyByZXR1cm4geyBzOiBmdW5jdGlvbiBzKCkgeyBpdCA9IGl0LmNhbGwobyk7IH0sIG46IGZ1bmN0aW9uIG4oKSB7IHZhciBzdGVwID0gaXQubmV4dCgpOyBub3JtYWxDb21wbGV0aW9uID0gc3RlcC5kb25lOyByZXR1cm4gc3RlcDsgfSwgZTogZnVuY3Rpb24gZShfZTIpIHsgZGlkRXJyID0gdHJ1ZTsgZXJyID0gX2UyOyB9LCBmOiBmdW5jdGlvbiBmKCkgeyB0cnkgeyBpZiAoIW5vcm1hbENvbXBsZXRpb24gJiYgaXRbXCJyZXR1cm5cIl0gIT0gbnVsbCkgaXRbXCJyZXR1cm5cIl0oKTsgfSBmaW5hbGx5IHsgaWYgKGRpZEVycikgdGhyb3cgZXJyOyB9IH0gfTsgfVxuZnVuY3Rpb24gX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5JDEobywgbWluTGVuKSB7IGlmICghbykgcmV0dXJuOyBpZiAodHlwZW9mIG8gPT09IFwic3RyaW5nXCIpIHJldHVybiBfYXJyYXlMaWtlVG9BcnJheSQxKG8sIG1pbkxlbik7IHZhciBuID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG8pLnNsaWNlKDgsIC0xKTsgaWYgKG4gPT09IFwiT2JqZWN0XCIgJiYgby5jb25zdHJ1Y3RvcikgbiA9IG8uY29uc3RydWN0b3IubmFtZTsgaWYgKG4gPT09IFwiTWFwXCIgfHwgbiA9PT0gXCJTZXRcIikgcmV0dXJuIEFycmF5LmZyb20obyk7IGlmIChuID09PSBcIkFyZ3VtZW50c1wiIHx8IC9eKD86VWl8SSludCg/Ojh8MTZ8MzIpKD86Q2xhbXBlZCk/QXJyYXkkLy50ZXN0KG4pKSByZXR1cm4gX2FycmF5TGlrZVRvQXJyYXkkMShvLCBtaW5MZW4pOyB9XG5mdW5jdGlvbiBfYXJyYXlMaWtlVG9BcnJheSQxKGFyciwgbGVuKSB7IGlmIChsZW4gPT0gbnVsbCB8fCBsZW4gPiBhcnIubGVuZ3RoKSBsZW4gPSBhcnIubGVuZ3RoOyBmb3IgKHZhciBpID0gMCwgYXJyMiA9IG5ldyBBcnJheShsZW4pOyBpIDwgbGVuOyBpKyspIGFycjJbaV0gPSBhcnJbaV07IHJldHVybiBhcnIyOyB9XG4vKipcbiAqIENoaWxkcmVuLlxuICovXG52YXIgdXNlQ2hpbGRyZW4gPSBmdW5jdGlvbiB1c2VDaGlsZHJlbihwcm9wcykge1xuICB2YXIgZGVjb3JhdGlvbnMgPSBwcm9wcy5kZWNvcmF0aW9ucyxcbiAgICBub2RlID0gcHJvcHMubm9kZSxcbiAgICByZW5kZXJFbGVtZW50ID0gcHJvcHMucmVuZGVyRWxlbWVudCxcbiAgICByZW5kZXJQbGFjZWhvbGRlciA9IHByb3BzLnJlbmRlclBsYWNlaG9sZGVyLFxuICAgIHJlbmRlckxlYWYgPSBwcm9wcy5yZW5kZXJMZWFmLFxuICAgIHNlbGVjdGlvbiA9IHByb3BzLnNlbGVjdGlvbjtcbiAgdmFyIGRlY29yYXRlID0gdXNlRGVjb3JhdGUoKTtcbiAgdmFyIGVkaXRvciA9IHVzZVNsYXRlU3RhdGljKCk7XG4gIHNsYXRlRG9tLklTX05PREVfTUFQX0RJUlRZLnNldChlZGl0b3IsIGZhbHNlKTtcbiAgdmFyIHBhdGggPSBSZWFjdEVkaXRvci5maW5kUGF0aChlZGl0b3IsIG5vZGUpO1xuICB2YXIgY2hpbGRyZW4gPSBbXTtcbiAgdmFyIGlzTGVhZkJsb2NrID0gc2xhdGUuRWxlbWVudC5pc0VsZW1lbnQobm9kZSkgJiYgIWVkaXRvci5pc0lubGluZShub2RlKSAmJiBzbGF0ZS5FZGl0b3IuaGFzSW5saW5lcyhlZGl0b3IsIG5vZGUpO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IG5vZGUuY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgcCA9IHBhdGguY29uY2F0KGkpO1xuICAgIHZhciBuID0gbm9kZS5jaGlsZHJlbltpXTtcbiAgICB2YXIga2V5ID0gUmVhY3RFZGl0b3IuZmluZEtleShlZGl0b3IsIG4pO1xuICAgIHZhciByYW5nZSA9IHNsYXRlLkVkaXRvci5yYW5nZShlZGl0b3IsIHApO1xuICAgIHZhciBzZWwgPSBzZWxlY3Rpb24gJiYgc2xhdGUuUmFuZ2UuaW50ZXJzZWN0aW9uKHJhbmdlLCBzZWxlY3Rpb24pO1xuICAgIHZhciBkcyA9IGRlY29yYXRlKFtuLCBwXSk7XG4gICAgdmFyIF9pdGVyYXRvciA9IF9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyJDEoZGVjb3JhdGlvbnMpLFxuICAgICAgX3N0ZXA7XG4gICAgdHJ5IHtcbiAgICAgIGZvciAoX2l0ZXJhdG9yLnMoKTsgIShfc3RlcCA9IF9pdGVyYXRvci5uKCkpLmRvbmU7KSB7XG4gICAgICAgIHZhciBkZWMgPSBfc3RlcC52YWx1ZTtcbiAgICAgICAgdmFyIGQgPSBzbGF0ZS5SYW5nZS5pbnRlcnNlY3Rpb24oZGVjLCByYW5nZSk7XG4gICAgICAgIGlmIChkKSB7XG4gICAgICAgICAgZHMucHVzaChkKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgX2l0ZXJhdG9yLmUoZXJyKTtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgX2l0ZXJhdG9yLmYoKTtcbiAgICB9XG4gICAgaWYgKHNsYXRlLkVsZW1lbnQuaXNFbGVtZW50KG4pKSB7XG4gICAgICBjaGlsZHJlbi5wdXNoKCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChTZWxlY3RlZENvbnRleHQuUHJvdmlkZXIsIHtcbiAgICAgICAga2V5OiBcInByb3ZpZGVyLVwiLmNvbmNhdChrZXkuaWQpLFxuICAgICAgICB2YWx1ZTogISFzZWxcbiAgICAgIH0sIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KE1lbW9pemVkRWxlbWVudCwge1xuICAgICAgICBkZWNvcmF0aW9uczogZHMsXG4gICAgICAgIGVsZW1lbnQ6IG4sXG4gICAgICAgIGtleToga2V5LmlkLFxuICAgICAgICByZW5kZXJFbGVtZW50OiByZW5kZXJFbGVtZW50LFxuICAgICAgICByZW5kZXJQbGFjZWhvbGRlcjogcmVuZGVyUGxhY2Vob2xkZXIsXG4gICAgICAgIHJlbmRlckxlYWY6IHJlbmRlckxlYWYsXG4gICAgICAgIHNlbGVjdGlvbjogc2VsXG4gICAgICB9KSkpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjaGlsZHJlbi5wdXNoKCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChNZW1vaXplZFRleHQsIHtcbiAgICAgICAgZGVjb3JhdGlvbnM6IGRzLFxuICAgICAgICBrZXk6IGtleS5pZCxcbiAgICAgICAgaXNMYXN0OiBpc0xlYWZCbG9jayAmJiBpID09PSBub2RlLmNoaWxkcmVuLmxlbmd0aCAtIDEsXG4gICAgICAgIHBhcmVudDogbm9kZSxcbiAgICAgICAgcmVuZGVyUGxhY2Vob2xkZXI6IHJlbmRlclBsYWNlaG9sZGVyLFxuICAgICAgICByZW5kZXJMZWFmOiByZW5kZXJMZWFmLFxuICAgICAgICB0ZXh0OiBuXG4gICAgICB9KSk7XG4gICAgfVxuICAgIHNsYXRlRG9tLk5PREVfVE9fSU5ERVguc2V0KG4sIGkpO1xuICAgIHNsYXRlRG9tLk5PREVfVE9fUEFSRU5ULnNldChuLCBub2RlKTtcbiAgfVxuICByZXR1cm4gY2hpbGRyZW47XG59O1xuXG4vKipcbiAqIEEgUmVhY3QgY29udGV4dCBmb3Igc2hhcmluZyB0aGUgYHJlYWRPbmx5YCBzdGF0ZSBvZiB0aGUgZWRpdG9yLlxuICovXG52YXIgUmVhZE9ubHlDb250ZXh0ID0gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUNvbnRleHQoZmFsc2UpO1xuLyoqXG4gKiBHZXQgdGhlIGN1cnJlbnQgYHJlYWRPbmx5YCBzdGF0ZSBvZiB0aGUgZWRpdG9yLlxuICovXG52YXIgdXNlUmVhZE9ubHkgPSBmdW5jdGlvbiB1c2VSZWFkT25seSgpIHtcbiAgcmV0dXJuIFJlYWN0LnVzZUNvbnRleHQoUmVhZE9ubHlDb250ZXh0KTtcbn07XG5cbnZhciBTbGF0ZUNvbnRleHQgPSAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlQ29udGV4dChudWxsKTtcbi8qKlxuICogR2V0IHRoZSBjdXJyZW50IGVkaXRvciBvYmplY3QgZnJvbSB0aGUgUmVhY3QgY29udGV4dC5cbiAqL1xudmFyIHVzZVNsYXRlID0gZnVuY3Rpb24gdXNlU2xhdGUoKSB7XG4gIHZhciBjb250ZXh0ID0gUmVhY3QudXNlQ29udGV4dChTbGF0ZUNvbnRleHQpO1xuICBpZiAoIWNvbnRleHQpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJUaGUgYHVzZVNsYXRlYCBob29rIG11c3QgYmUgdXNlZCBpbnNpZGUgdGhlIDxTbGF0ZT4gY29tcG9uZW50J3MgY29udGV4dC5cIik7XG4gIH1cbiAgdmFyIGVkaXRvciA9IGNvbnRleHQuZWRpdG9yO1xuICByZXR1cm4gZWRpdG9yO1xufTtcbnZhciB1c2VTbGF0ZVdpdGhWID0gZnVuY3Rpb24gdXNlU2xhdGVXaXRoVigpIHtcbiAgdmFyIGNvbnRleHQgPSBSZWFjdC51c2VDb250ZXh0KFNsYXRlQ29udGV4dCk7XG4gIGlmICghY29udGV4dCkge1xuICAgIHRocm93IG5ldyBFcnJvcihcIlRoZSBgdXNlU2xhdGVgIGhvb2sgbXVzdCBiZSB1c2VkIGluc2lkZSB0aGUgPFNsYXRlPiBjb21wb25lbnQncyBjb250ZXh0LlwiKTtcbiAgfVxuICByZXR1cm4gY29udGV4dDtcbn07XG5cbmZ1bmN0aW9uIHVzZVRyYWNrVXNlcklucHV0KCkge1xuICB2YXIgZWRpdG9yID0gdXNlU2xhdGVTdGF0aWMoKTtcbiAgdmFyIHJlY2VpdmVkVXNlcklucHV0ID0gUmVhY3QudXNlUmVmKGZhbHNlKTtcbiAgdmFyIGFuaW1hdGlvbkZyYW1lSWRSZWYgPSBSZWFjdC51c2VSZWYoMCk7XG4gIHZhciBvblVzZXJJbnB1dCA9IFJlYWN0LnVzZUNhbGxiYWNrKGZ1bmN0aW9uICgpIHtcbiAgICBpZiAocmVjZWl2ZWRVc2VySW5wdXQuY3VycmVudCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICByZWNlaXZlZFVzZXJJbnB1dC5jdXJyZW50ID0gdHJ1ZTtcbiAgICB2YXIgd2luZG93ID0gUmVhY3RFZGl0b3IuZ2V0V2luZG93KGVkaXRvcik7XG4gICAgd2luZG93LmNhbmNlbEFuaW1hdGlvbkZyYW1lKGFuaW1hdGlvbkZyYW1lSWRSZWYuY3VycmVudCk7XG4gICAgYW5pbWF0aW9uRnJhbWVJZFJlZi5jdXJyZW50ID0gd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZShmdW5jdGlvbiAoKSB7XG4gICAgICByZWNlaXZlZFVzZXJJbnB1dC5jdXJyZW50ID0gZmFsc2U7XG4gICAgfSk7XG4gIH0sIFtlZGl0b3JdKTtcbiAgUmVhY3QudXNlRWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIGNhbmNlbEFuaW1hdGlvbkZyYW1lKGFuaW1hdGlvbkZyYW1lSWRSZWYuY3VycmVudCk7XG4gICAgfTtcbiAgfSwgW10pO1xuICByZXR1cm4ge1xuICAgIHJlY2VpdmVkVXNlcklucHV0OiByZWNlaXZlZFVzZXJJbnB1dCxcbiAgICBvblVzZXJJbnB1dDogb25Vc2VySW5wdXRcbiAgfTtcbn1cblxudmFyIGNsYXNzQ2FsbENoZWNrID0gY3JlYXRlQ29tbW9uanNNb2R1bGUoZnVuY3Rpb24gKG1vZHVsZSkge1xuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3Rvcikge1xuICBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7XG4gIH1cbn1cbm1vZHVsZS5leHBvcnRzID0gX2NsYXNzQ2FsbENoZWNrLCBtb2R1bGUuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZSwgbW9kdWxlLmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gbW9kdWxlLmV4cG9ydHM7XG59KTtcblxudmFyIF9jbGFzc0NhbGxDaGVjayA9IHVud3JhcEV4cG9ydHMoY2xhc3NDYWxsQ2hlY2spO1xuXG52YXIgY3JlYXRlQ2xhc3MgPSBjcmVhdGVDb21tb25qc01vZHVsZShmdW5jdGlvbiAobW9kdWxlKSB7XG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldO1xuICAgIGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTtcbiAgICBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7XG4gICAgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCB0b1Byb3BlcnR5S2V5KGRlc2NyaXB0b3Iua2V5KSwgZGVzY3JpcHRvcik7XG4gIH1cbn1cbmZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHtcbiAgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7XG4gIGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KENvbnN0cnVjdG9yLCBcInByb3RvdHlwZVwiLCB7XG4gICAgd3JpdGFibGU6IGZhbHNlXG4gIH0pO1xuICByZXR1cm4gQ29uc3RydWN0b3I7XG59XG5tb2R1bGUuZXhwb3J0cyA9IF9jcmVhdGVDbGFzcywgbW9kdWxlLmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWUsIG1vZHVsZS5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IG1vZHVsZS5leHBvcnRzO1xufSk7XG5cbnZhciBfY3JlYXRlQ2xhc3MgPSB1bndyYXBFeHBvcnRzKGNyZWF0ZUNsYXNzKTtcblxudmFyIGFzc2VydFRoaXNJbml0aWFsaXplZCA9IGNyZWF0ZUNvbW1vbmpzTW9kdWxlKGZ1bmN0aW9uIChtb2R1bGUpIHtcbmZ1bmN0aW9uIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZikge1xuICBpZiAoc2VsZiA9PT0gdm9pZCAwKSB7XG4gICAgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpO1xuICB9XG4gIHJldHVybiBzZWxmO1xufVxubW9kdWxlLmV4cG9ydHMgPSBfYXNzZXJ0VGhpc0luaXRpYWxpemVkLCBtb2R1bGUuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZSwgbW9kdWxlLmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gbW9kdWxlLmV4cG9ydHM7XG59KTtcblxudmFyIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQgPSB1bndyYXBFeHBvcnRzKGFzc2VydFRoaXNJbml0aWFsaXplZCk7XG5cbnZhciBzZXRQcm90b3R5cGVPZiA9IGNyZWF0ZUNvbW1vbmpzTW9kdWxlKGZ1bmN0aW9uIChtb2R1bGUpIHtcbmZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gX3NldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mLmJpbmQoKSA6IGZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7XG4gICAgby5fX3Byb3RvX18gPSBwO1xuICAgIHJldHVybiBvO1xuICB9LCBtb2R1bGUuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZSwgbW9kdWxlLmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gbW9kdWxlLmV4cG9ydHM7XG4gIHJldHVybiBfc2V0UHJvdG90eXBlT2YobywgcCk7XG59XG5tb2R1bGUuZXhwb3J0cyA9IF9zZXRQcm90b3R5cGVPZiwgbW9kdWxlLmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWUsIG1vZHVsZS5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IG1vZHVsZS5leHBvcnRzO1xufSk7XG5cbnVud3JhcEV4cG9ydHMoc2V0UHJvdG90eXBlT2YpO1xuXG52YXIgaW5oZXJpdHMgPSBjcmVhdGVDb21tb25qc01vZHVsZShmdW5jdGlvbiAobW9kdWxlKSB7XG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHtcbiAgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvblwiKTtcbiAgfVxuICBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHtcbiAgICBjb25zdHJ1Y3Rvcjoge1xuICAgICAgdmFsdWU6IHN1YkNsYXNzLFxuICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9XG4gIH0pO1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoc3ViQ2xhc3MsIFwicHJvdG90eXBlXCIsIHtcbiAgICB3cml0YWJsZTogZmFsc2VcbiAgfSk7XG4gIGlmIChzdXBlckNsYXNzKSBzZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcyk7XG59XG5tb2R1bGUuZXhwb3J0cyA9IF9pbmhlcml0cywgbW9kdWxlLmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWUsIG1vZHVsZS5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IG1vZHVsZS5leHBvcnRzO1xufSk7XG5cbnZhciBfaW5oZXJpdHMgPSB1bndyYXBFeHBvcnRzKGluaGVyaXRzKTtcblxudmFyIHBvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4gPSBjcmVhdGVDb21tb25qc01vZHVsZShmdW5jdGlvbiAobW9kdWxlKSB7XG52YXIgX3R5cGVvZiA9IF90eXBlb2ZfMVtcImRlZmF1bHRcIl07XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHtcbiAgaWYgKGNhbGwgJiYgKF90eXBlb2YoY2FsbCkgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikpIHtcbiAgICByZXR1cm4gY2FsbDtcbiAgfSBlbHNlIGlmIChjYWxsICE9PSB2b2lkIDApIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiRGVyaXZlZCBjb25zdHJ1Y3RvcnMgbWF5IG9ubHkgcmV0dXJuIG9iamVjdCBvciB1bmRlZmluZWRcIik7XG4gIH1cbiAgcmV0dXJuIGFzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKTtcbn1cbm1vZHVsZS5leHBvcnRzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4sIG1vZHVsZS5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlLCBtb2R1bGUuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBtb2R1bGUuZXhwb3J0cztcbn0pO1xuXG52YXIgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4gPSB1bndyYXBFeHBvcnRzKHBvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4pO1xuXG52YXIgZ2V0UHJvdG90eXBlT2YgPSBjcmVhdGVDb21tb25qc01vZHVsZShmdW5jdGlvbiAobW9kdWxlKSB7XG5mdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2Yobykge1xuICBtb2R1bGUuZXhwb3J0cyA9IF9nZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5nZXRQcm90b3R5cGVPZi5iaW5kKCkgOiBmdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2Yobykge1xuICAgIHJldHVybiBvLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2Yobyk7XG4gIH0sIG1vZHVsZS5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlLCBtb2R1bGUuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBtb2R1bGUuZXhwb3J0cztcbiAgcmV0dXJuIF9nZXRQcm90b3R5cGVPZihvKTtcbn1cbm1vZHVsZS5leHBvcnRzID0gX2dldFByb3RvdHlwZU9mLCBtb2R1bGUuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZSwgbW9kdWxlLmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gbW9kdWxlLmV4cG9ydHM7XG59KTtcblxudmFyIF9nZXRQcm90b3R5cGVPZiA9IHVud3JhcEV4cG9ydHMoZ2V0UHJvdG90eXBlT2YpO1xuXG52YXIgYXJyYXlXaXRob3V0SG9sZXMgPSBjcmVhdGVDb21tb25qc01vZHVsZShmdW5jdGlvbiAobW9kdWxlKSB7XG5mdW5jdGlvbiBfYXJyYXlXaXRob3V0SG9sZXMoYXJyKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KGFycikpIHJldHVybiBhcnJheUxpa2VUb0FycmF5KGFycik7XG59XG5tb2R1bGUuZXhwb3J0cyA9IF9hcnJheVdpdGhvdXRIb2xlcywgbW9kdWxlLmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWUsIG1vZHVsZS5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IG1vZHVsZS5leHBvcnRzO1xufSk7XG5cbnVud3JhcEV4cG9ydHMoYXJyYXlXaXRob3V0SG9sZXMpO1xuXG52YXIgaXRlcmFibGVUb0FycmF5ID0gY3JlYXRlQ29tbW9uanNNb2R1bGUoZnVuY3Rpb24gKG1vZHVsZSkge1xuZnVuY3Rpb24gX2l0ZXJhYmxlVG9BcnJheShpdGVyKSB7XG4gIGlmICh0eXBlb2YgU3ltYm9sICE9PSBcInVuZGVmaW5lZFwiICYmIGl0ZXJbU3ltYm9sLml0ZXJhdG9yXSAhPSBudWxsIHx8IGl0ZXJbXCJAQGl0ZXJhdG9yXCJdICE9IG51bGwpIHJldHVybiBBcnJheS5mcm9tKGl0ZXIpO1xufVxubW9kdWxlLmV4cG9ydHMgPSBfaXRlcmFibGVUb0FycmF5LCBtb2R1bGUuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZSwgbW9kdWxlLmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gbW9kdWxlLmV4cG9ydHM7XG59KTtcblxudW53cmFwRXhwb3J0cyhpdGVyYWJsZVRvQXJyYXkpO1xuXG52YXIgbm9uSXRlcmFibGVTcHJlYWQgPSBjcmVhdGVDb21tb25qc01vZHVsZShmdW5jdGlvbiAobW9kdWxlKSB7XG5mdW5jdGlvbiBfbm9uSXRlcmFibGVTcHJlYWQoKSB7XG4gIHRocm93IG5ldyBUeXBlRXJyb3IoXCJJbnZhbGlkIGF0dGVtcHQgdG8gc3ByZWFkIG5vbi1pdGVyYWJsZSBpbnN0YW5jZS5cXG5JbiBvcmRlciB0byBiZSBpdGVyYWJsZSwgbm9uLWFycmF5IG9iamVjdHMgbXVzdCBoYXZlIGEgW1N5bWJvbC5pdGVyYXRvcl0oKSBtZXRob2QuXCIpO1xufVxubW9kdWxlLmV4cG9ydHMgPSBfbm9uSXRlcmFibGVTcHJlYWQsIG1vZHVsZS5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlLCBtb2R1bGUuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBtb2R1bGUuZXhwb3J0cztcbn0pO1xuXG51bndyYXBFeHBvcnRzKG5vbkl0ZXJhYmxlU3ByZWFkKTtcblxudmFyIHRvQ29uc3VtYWJsZUFycmF5ID0gY3JlYXRlQ29tbW9uanNNb2R1bGUoZnVuY3Rpb24gKG1vZHVsZSkge1xuZnVuY3Rpb24gX3RvQ29uc3VtYWJsZUFycmF5KGFycikge1xuICByZXR1cm4gYXJyYXlXaXRob3V0SG9sZXMoYXJyKSB8fCBpdGVyYWJsZVRvQXJyYXkoYXJyKSB8fCB1bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShhcnIpIHx8IG5vbkl0ZXJhYmxlU3ByZWFkKCk7XG59XG5tb2R1bGUuZXhwb3J0cyA9IF90b0NvbnN1bWFibGVBcnJheSwgbW9kdWxlLmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWUsIG1vZHVsZS5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IG1vZHVsZS5leHBvcnRzO1xufSk7XG5cbnZhciBfdG9Db25zdW1hYmxlQXJyYXkgPSB1bndyYXBFeHBvcnRzKHRvQ29uc3VtYWJsZUFycmF5KTtcblxudmFyIGNyZWF0ZVJlc3RvcmVEb21NYW5hZ2VyID0gZnVuY3Rpb24gY3JlYXRlUmVzdG9yZURvbU1hbmFnZXIoZWRpdG9yLCByZWNlaXZlZFVzZXJJbnB1dCkge1xuICB2YXIgYnVmZmVyZWRNdXRhdGlvbnMgPSBbXTtcbiAgdmFyIGNsZWFyID0gZnVuY3Rpb24gY2xlYXIoKSB7XG4gICAgYnVmZmVyZWRNdXRhdGlvbnMgPSBbXTtcbiAgfTtcbiAgdmFyIHJlZ2lzdGVyTXV0YXRpb25zID0gZnVuY3Rpb24gcmVnaXN0ZXJNdXRhdGlvbnMobXV0YXRpb25zKSB7XG4gICAgdmFyIF9idWZmZXJlZE11dGF0aW9ucztcbiAgICBpZiAoIXJlY2VpdmVkVXNlcklucHV0LmN1cnJlbnQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdmFyIHRyYWNrZWRNdXRhdGlvbnMgPSBtdXRhdGlvbnMuZmlsdGVyKGZ1bmN0aW9uIChtdXRhdGlvbikge1xuICAgICAgcmV0dXJuIHNsYXRlRG9tLmlzVHJhY2tlZE11dGF0aW9uKGVkaXRvciwgbXV0YXRpb24sIG11dGF0aW9ucyk7XG4gICAgfSk7XG4gICAgKF9idWZmZXJlZE11dGF0aW9ucyA9IGJ1ZmZlcmVkTXV0YXRpb25zKS5wdXNoLmFwcGx5KF9idWZmZXJlZE11dGF0aW9ucywgX3RvQ29uc3VtYWJsZUFycmF5KHRyYWNrZWRNdXRhdGlvbnMpKTtcbiAgfTtcbiAgZnVuY3Rpb24gcmVzdG9yZURPTSgpIHtcbiAgICBpZiAoYnVmZmVyZWRNdXRhdGlvbnMubGVuZ3RoID4gMCkge1xuICAgICAgYnVmZmVyZWRNdXRhdGlvbnMucmV2ZXJzZSgpLmZvckVhY2goZnVuY3Rpb24gKG11dGF0aW9uKSB7XG4gICAgICAgIGlmIChtdXRhdGlvbi50eXBlID09PSAnY2hhcmFjdGVyRGF0YScpIHtcbiAgICAgICAgICAvLyBXZSBkb24ndCB3YW50IHRvIHJlc3RvcmUgdGhlIERPTSBmb3IgY2hhcmFjdGVyRGF0YSBtdXRhdGlvbnNcbiAgICAgICAgICAvLyBiZWNhdXNlIHRoaXMgaW50ZXJydXB0cyB0aGUgY29tcG9zaXRpb24uXG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIG11dGF0aW9uLnJlbW92ZWROb2Rlcy5mb3JFYWNoKGZ1bmN0aW9uIChub2RlKSB7XG4gICAgICAgICAgbXV0YXRpb24udGFyZ2V0Lmluc2VydEJlZm9yZShub2RlLCBtdXRhdGlvbi5uZXh0U2libGluZyk7XG4gICAgICAgIH0pO1xuICAgICAgICBtdXRhdGlvbi5hZGRlZE5vZGVzLmZvckVhY2goZnVuY3Rpb24gKG5vZGUpIHtcbiAgICAgICAgICBtdXRhdGlvbi50YXJnZXQucmVtb3ZlQ2hpbGQobm9kZSk7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgICAvLyBDbGVhciBidWZmZXJlZCBtdXRhdGlvbnMgdG8gZW5zdXJlIHdlIGRvbid0IHVuZG8gdGhlbSB0d2ljZVxuICAgICAgY2xlYXIoKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHtcbiAgICByZWdpc3Rlck11dGF0aW9uczogcmVnaXN0ZXJNdXRhdGlvbnMsXG4gICAgcmVzdG9yZURPTTogcmVzdG9yZURPTSxcbiAgICBjbGVhcjogY2xlYXJcbiAgfTtcbn07XG5cbmZ1bmN0aW9uIF9jcmVhdGVTdXBlcihEZXJpdmVkKSB7IHZhciBoYXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0ID0gX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpOyByZXR1cm4gZnVuY3Rpb24gX2NyZWF0ZVN1cGVySW50ZXJuYWwoKSB7IHZhciBTdXBlciA9IF9nZXRQcm90b3R5cGVPZihEZXJpdmVkKSwgcmVzdWx0OyBpZiAoaGFzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCkgeyB2YXIgTmV3VGFyZ2V0ID0gX2dldFByb3RvdHlwZU9mKHRoaXMpLmNvbnN0cnVjdG9yOyByZXN1bHQgPSBSZWZsZWN0LmNvbnN0cnVjdChTdXBlciwgYXJndW1lbnRzLCBOZXdUYXJnZXQpOyB9IGVsc2UgeyByZXN1bHQgPSBTdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpOyB9IHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCByZXN1bHQpOyB9OyB9XG5mdW5jdGlvbiBfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KCkgeyBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwidW5kZWZpbmVkXCIgfHwgIVJlZmxlY3QuY29uc3RydWN0KSByZXR1cm4gZmFsc2U7IGlmIChSZWZsZWN0LmNvbnN0cnVjdC5zaGFtKSByZXR1cm4gZmFsc2U7IGlmICh0eXBlb2YgUHJveHkgPT09IFwiZnVuY3Rpb25cIikgcmV0dXJuIHRydWU7IHRyeSB7IEJvb2xlYW4ucHJvdG90eXBlLnZhbHVlT2YuY2FsbChSZWZsZWN0LmNvbnN0cnVjdChCb29sZWFuLCBbXSwgZnVuY3Rpb24gKCkge30pKTsgcmV0dXJuIHRydWU7IH0gY2F0Y2ggKGUpIHsgcmV0dXJuIGZhbHNlOyB9IH1cbnZhciBNVVRBVElPTl9PQlNFUlZFUl9DT05GSUcgPSB7XG4gIHN1YnRyZWU6IHRydWUsXG4gIGNoaWxkTGlzdDogdHJ1ZSxcbiAgY2hhcmFjdGVyRGF0YTogdHJ1ZSxcbiAgY2hhcmFjdGVyRGF0YU9sZFZhbHVlOiB0cnVlXG59O1xuLy8gV2UgaGF2ZSB0byB1c2UgYSBjbGFzcyBjb21wb25lbnQgaGVyZSBzaW5jZSB3ZSByZWx5IG9uIGBnZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZWAgd2hpY2ggaGFzIG5vIEZDIGVxdWl2YWxlbnRcbi8vIHRvIHJ1biBjb2RlIHN5bmNocm9ub3VzbHkgaW1tZWRpYXRlbHkgYmVmb3JlIHJlYWN0IGNvbW1pdHMgdGhlIGNvbXBvbmVudCB1cGRhdGUgdG8gdGhlIERPTS5cbnZhciBSZXN0b3JlRE9NQ29tcG9uZW50ID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhSZXN0b3JlRE9NQ29tcG9uZW50LCBfQ29tcG9uZW50KTtcbiAgdmFyIF9zdXBlciA9IF9jcmVhdGVTdXBlcihSZXN0b3JlRE9NQ29tcG9uZW50KTtcbiAgZnVuY3Rpb24gUmVzdG9yZURPTUNvbXBvbmVudCgpIHtcbiAgICB2YXIgX3RoaXM7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFJlc3RvcmVET01Db21wb25lbnQpO1xuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG4gICAgX3RoaXMgPSBfc3VwZXIuY2FsbC5hcHBseShfc3VwZXIsIFt0aGlzXS5jb25jYXQoYXJncykpO1xuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJjb250ZXh0XCIsIG51bGwpO1xuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJtYW5hZ2VyXCIsIG51bGwpO1xuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJtdXRhdGlvbk9ic2VydmVyXCIsIG51bGwpO1xuICAgIHJldHVybiBfdGhpcztcbiAgfVxuICBfY3JlYXRlQ2xhc3MoUmVzdG9yZURPTUNvbXBvbmVudCwgW3tcbiAgICBrZXk6IFwib2JzZXJ2ZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBvYnNlcnZlKCkge1xuICAgICAgdmFyIF90aGlzJG11dGF0aW9uT2JzZXJ2ZTtcbiAgICAgIHZhciBub2RlID0gdGhpcy5wcm9wcy5ub2RlO1xuICAgICAgaWYgKCFub2RlLmN1cnJlbnQpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdGYWlsZWQgdG8gYXR0YWNoIE11dGF0aW9uT2JzZXJ2ZXIsIGBub2RlYCBpcyB1bmRlZmluZWQnKTtcbiAgICAgIH1cbiAgICAgIChfdGhpcyRtdXRhdGlvbk9ic2VydmUgPSB0aGlzLm11dGF0aW9uT2JzZXJ2ZXIpID09PSBudWxsIHx8IF90aGlzJG11dGF0aW9uT2JzZXJ2ZSA9PT0gdm9pZCAwIHx8IF90aGlzJG11dGF0aW9uT2JzZXJ2ZS5vYnNlcnZlKG5vZGUuY3VycmVudCwgTVVUQVRJT05fT0JTRVJWRVJfQ09ORklHKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiY29tcG9uZW50RGlkTW91bnRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgICB2YXIgcmVjZWl2ZWRVc2VySW5wdXQgPSB0aGlzLnByb3BzLnJlY2VpdmVkVXNlcklucHV0O1xuICAgICAgdmFyIGVkaXRvciA9IHRoaXMuY29udGV4dDtcbiAgICAgIHRoaXMubWFuYWdlciA9IGNyZWF0ZVJlc3RvcmVEb21NYW5hZ2VyKGVkaXRvciwgcmVjZWl2ZWRVc2VySW5wdXQpO1xuICAgICAgdGhpcy5tdXRhdGlvbk9ic2VydmVyID0gbmV3IE11dGF0aW9uT2JzZXJ2ZXIodGhpcy5tYW5hZ2VyLnJlZ2lzdGVyTXV0YXRpb25zKTtcbiAgICAgIHRoaXMub2JzZXJ2ZSgpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJnZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZSgpIHtcbiAgICAgIHZhciBfdGhpcyRtdXRhdGlvbk9ic2VydmUyLCBfdGhpcyRtdXRhdGlvbk9ic2VydmUzLCBfdGhpcyRtYW5hZ2VyMjtcbiAgICAgIHZhciBwZW5kaW5nTXV0YXRpb25zID0gKF90aGlzJG11dGF0aW9uT2JzZXJ2ZTIgPSB0aGlzLm11dGF0aW9uT2JzZXJ2ZXIpID09PSBudWxsIHx8IF90aGlzJG11dGF0aW9uT2JzZXJ2ZTIgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF90aGlzJG11dGF0aW9uT2JzZXJ2ZTIudGFrZVJlY29yZHMoKTtcbiAgICAgIGlmIChwZW5kaW5nTXV0YXRpb25zICE9PSBudWxsICYmIHBlbmRpbmdNdXRhdGlvbnMgIT09IHZvaWQgMCAmJiBwZW5kaW5nTXV0YXRpb25zLmxlbmd0aCkge1xuICAgICAgICB2YXIgX3RoaXMkbWFuYWdlcjtcbiAgICAgICAgKF90aGlzJG1hbmFnZXIgPSB0aGlzLm1hbmFnZXIpID09PSBudWxsIHx8IF90aGlzJG1hbmFnZXIgPT09IHZvaWQgMCB8fCBfdGhpcyRtYW5hZ2VyLnJlZ2lzdGVyTXV0YXRpb25zKHBlbmRpbmdNdXRhdGlvbnMpO1xuICAgICAgfVxuICAgICAgKF90aGlzJG11dGF0aW9uT2JzZXJ2ZTMgPSB0aGlzLm11dGF0aW9uT2JzZXJ2ZXIpID09PSBudWxsIHx8IF90aGlzJG11dGF0aW9uT2JzZXJ2ZTMgPT09IHZvaWQgMCB8fCBfdGhpcyRtdXRhdGlvbk9ic2VydmUzLmRpc2Nvbm5lY3QoKTtcbiAgICAgIChfdGhpcyRtYW5hZ2VyMiA9IHRoaXMubWFuYWdlcikgPT09IG51bGwgfHwgX3RoaXMkbWFuYWdlcjIgPT09IHZvaWQgMCB8fCBfdGhpcyRtYW5hZ2VyMi5yZXN0b3JlRE9NKCk7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiY29tcG9uZW50RGlkVXBkYXRlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudERpZFVwZGF0ZSgpIHtcbiAgICAgIHZhciBfdGhpcyRtYW5hZ2VyMztcbiAgICAgIChfdGhpcyRtYW5hZ2VyMyA9IHRoaXMubWFuYWdlcikgPT09IG51bGwgfHwgX3RoaXMkbWFuYWdlcjMgPT09IHZvaWQgMCB8fCBfdGhpcyRtYW5hZ2VyMy5jbGVhcigpO1xuICAgICAgdGhpcy5vYnNlcnZlKCk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImNvbXBvbmVudFdpbGxVbm1vdW50XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgICAgdmFyIF90aGlzJG11dGF0aW9uT2JzZXJ2ZTQ7XG4gICAgICAoX3RoaXMkbXV0YXRpb25PYnNlcnZlNCA9IHRoaXMubXV0YXRpb25PYnNlcnZlcikgPT09IG51bGwgfHwgX3RoaXMkbXV0YXRpb25PYnNlcnZlNCA9PT0gdm9pZCAwIHx8IF90aGlzJG11dGF0aW9uT2JzZXJ2ZTQuZGlzY29ubmVjdCgpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJyZW5kZXJcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgcmV0dXJuIHRoaXMucHJvcHMuY2hpbGRyZW47XG4gICAgfVxuICB9XSk7XG4gIHJldHVybiBSZXN0b3JlRE9NQ29tcG9uZW50O1xufShSZWFjdC5Db21wb25lbnQpO1xuX2RlZmluZVByb3BlcnR5KFJlc3RvcmVET01Db21wb25lbnQsIFwiY29udGV4dFR5cGVcIiwgRWRpdG9yQ29udGV4dCk7XG52YXIgUmVzdG9yZURPTSA9IHNsYXRlRG9tLklTX0FORFJPSUQgPyBSZXN0b3JlRE9NQ29tcG9uZW50IDogZnVuY3Rpb24gKF9yZWYpIHtcbiAgdmFyIGNoaWxkcmVuID0gX3JlZi5jaGlsZHJlbjtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFJlYWN0LkZyYWdtZW50LCBudWxsLCBjaGlsZHJlbik7XG59O1xuXG4vKipcbiAqIEEgUmVhY3QgY29udGV4dCBmb3Igc2hhcmluZyB0aGUgYGNvbXBvc2luZ2Agc3RhdGUgb2YgdGhlIGVkaXRvci5cbiAqL1xudmFyIENvbXBvc2luZ0NvbnRleHQgPSAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlQ29udGV4dChmYWxzZSk7XG4vKipcbiAqIEdldCB0aGUgY3VycmVudCBgY29tcG9zaW5nYCBzdGF0ZSBvZiB0aGUgZWRpdG9yLlxuICovXG52YXIgdXNlQ29tcG9zaW5nID0gZnVuY3Rpb24gdXNlQ29tcG9zaW5nKCkge1xuICByZXR1cm4gUmVhY3QudXNlQ29udGV4dChDb21wb3NpbmdDb250ZXh0KTtcbn07XG5cbnZhciBfZXhjbHVkZWQkMSA9IFtcImF1dG9Gb2N1c1wiLCBcImRlY29yYXRlXCIsIFwib25ET01CZWZvcmVJbnB1dFwiLCBcInBsYWNlaG9sZGVyXCIsIFwicmVhZE9ubHlcIiwgXCJyZW5kZXJFbGVtZW50XCIsIFwicmVuZGVyTGVhZlwiLCBcInJlbmRlclBsYWNlaG9sZGVyXCIsIFwic2Nyb2xsU2VsZWN0aW9uSW50b1ZpZXdcIiwgXCJzdHlsZVwiLCBcImFzXCIsIFwiZGlzYWJsZURlZmF1bHRTdHlsZXNcIl0sXG4gIF9leGNsdWRlZDIgPSBbXCJ0ZXh0XCJdO1xuZnVuY3Rpb24gX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIobywgYWxsb3dBcnJheUxpa2UpIHsgdmFyIGl0ID0gdHlwZW9mIFN5bWJvbCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBvW1N5bWJvbC5pdGVyYXRvcl0gfHwgb1tcIkBAaXRlcmF0b3JcIl07IGlmICghaXQpIHsgaWYgKEFycmF5LmlzQXJyYXkobykgfHwgKGl0ID0gX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KG8pKSB8fCBhbGxvd0FycmF5TGlrZSAmJiBvICYmIHR5cGVvZiBvLmxlbmd0aCA9PT0gXCJudW1iZXJcIikgeyBpZiAoaXQpIG8gPSBpdDsgdmFyIGkgPSAwOyB2YXIgRiA9IGZ1bmN0aW9uIEYoKSB7fTsgcmV0dXJuIHsgczogRiwgbjogZnVuY3Rpb24gbigpIHsgaWYgKGkgPj0gby5sZW5ndGgpIHJldHVybiB7IGRvbmU6IHRydWUgfTsgcmV0dXJuIHsgZG9uZTogZmFsc2UsIHZhbHVlOiBvW2krK10gfTsgfSwgZTogZnVuY3Rpb24gZShfZSkgeyB0aHJvdyBfZTsgfSwgZjogRiB9OyB9IHRocm93IG5ldyBUeXBlRXJyb3IoXCJJbnZhbGlkIGF0dGVtcHQgdG8gaXRlcmF0ZSBub24taXRlcmFibGUgaW5zdGFuY2UuXFxuSW4gb3JkZXIgdG8gYmUgaXRlcmFibGUsIG5vbi1hcnJheSBvYmplY3RzIG11c3QgaGF2ZSBhIFtTeW1ib2wuaXRlcmF0b3JdKCkgbWV0aG9kLlwiKTsgfSB2YXIgbm9ybWFsQ29tcGxldGlvbiA9IHRydWUsIGRpZEVyciA9IGZhbHNlLCBlcnI7IHJldHVybiB7IHM6IGZ1bmN0aW9uIHMoKSB7IGl0ID0gaXQuY2FsbChvKTsgfSwgbjogZnVuY3Rpb24gbigpIHsgdmFyIHN0ZXAgPSBpdC5uZXh0KCk7IG5vcm1hbENvbXBsZXRpb24gPSBzdGVwLmRvbmU7IHJldHVybiBzdGVwOyB9LCBlOiBmdW5jdGlvbiBlKF9lMikgeyBkaWRFcnIgPSB0cnVlOyBlcnIgPSBfZTI7IH0sIGY6IGZ1bmN0aW9uIGYoKSB7IHRyeSB7IGlmICghbm9ybWFsQ29tcGxldGlvbiAmJiBpdFtcInJldHVyblwiXSAhPSBudWxsKSBpdFtcInJldHVyblwiXSgpOyB9IGZpbmFsbHkgeyBpZiAoZGlkRXJyKSB0aHJvdyBlcnI7IH0gfSB9OyB9XG5mdW5jdGlvbiBfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkobywgbWluTGVuKSB7IGlmICghbykgcmV0dXJuOyBpZiAodHlwZW9mIG8gPT09IFwic3RyaW5nXCIpIHJldHVybiBfYXJyYXlMaWtlVG9BcnJheShvLCBtaW5MZW4pOyB2YXIgbiA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvKS5zbGljZSg4LCAtMSk7IGlmIChuID09PSBcIk9iamVjdFwiICYmIG8uY29uc3RydWN0b3IpIG4gPSBvLmNvbnN0cnVjdG9yLm5hbWU7IGlmIChuID09PSBcIk1hcFwiIHx8IG4gPT09IFwiU2V0XCIpIHJldHVybiBBcnJheS5mcm9tKG8pOyBpZiAobiA9PT0gXCJBcmd1bWVudHNcIiB8fCAvXig/OlVpfEkpbnQoPzo4fDE2fDMyKSg/OkNsYW1wZWQpP0FycmF5JC8udGVzdChuKSkgcmV0dXJuIF9hcnJheUxpa2VUb0FycmF5KG8sIG1pbkxlbik7IH1cbmZ1bmN0aW9uIF9hcnJheUxpa2VUb0FycmF5KGFyciwgbGVuKSB7IGlmIChsZW4gPT0gbnVsbCB8fCBsZW4gPiBhcnIubGVuZ3RoKSBsZW4gPSBhcnIubGVuZ3RoOyBmb3IgKHZhciBpID0gMCwgYXJyMiA9IG5ldyBBcnJheShsZW4pOyBpIDwgbGVuOyBpKyspIGFycjJbaV0gPSBhcnJbaV07IHJldHVybiBhcnIyOyB9XG5mdW5jdGlvbiBvd25LZXlzKGUsIHIpIHsgdmFyIHQgPSBPYmplY3Qua2V5cyhlKTsgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHsgdmFyIG8gPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKGUpOyByICYmIChvID0gby5maWx0ZXIoZnVuY3Rpb24gKHIpIHsgcmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoZSwgcikuZW51bWVyYWJsZTsgfSkpLCB0LnB1c2guYXBwbHkodCwgbyk7IH0gcmV0dXJuIHQ7IH1cbmZ1bmN0aW9uIF9vYmplY3RTcHJlYWQoZSkgeyBmb3IgKHZhciByID0gMTsgciA8IGFyZ3VtZW50cy5sZW5ndGg7IHIrKykgeyB2YXIgdCA9IG51bGwgIT0gYXJndW1lbnRzW3JdID8gYXJndW1lbnRzW3JdIDoge307IHIgJSAyID8gb3duS2V5cyhPYmplY3QodCksICEwKS5mb3JFYWNoKGZ1bmN0aW9uIChyKSB7IF9kZWZpbmVQcm9wZXJ0eShlLCByLCB0W3JdKTsgfSkgOiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyA/IE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKGUsIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKHQpKSA6IG93bktleXMoT2JqZWN0KHQpKS5mb3JFYWNoKGZ1bmN0aW9uIChyKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLCByLCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHQsIHIpKTsgfSk7IH0gcmV0dXJuIGU7IH1cbnZhciBDaGlsZHJlbiA9IGZ1bmN0aW9uIENoaWxkcmVuKHByb3BzKSB7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChSZWFjdC5GcmFnbWVudCwgbnVsbCwgdXNlQ2hpbGRyZW4ocHJvcHMpKTtcbn07XG4vKipcbiAqIEVkaXRhYmxlLlxuICovXG52YXIgRWRpdGFibGUgPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiAocHJvcHMsIGZvcndhcmRlZFJlZikge1xuICB2YXIgZGVmYXVsdFJlbmRlclBsYWNlaG9sZGVyID0gUmVhY3QudXNlQ2FsbGJhY2soZnVuY3Rpb24gKHByb3BzKSB7XG4gICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KERlZmF1bHRQbGFjZWhvbGRlciwgX29iamVjdFNwcmVhZCh7fSwgcHJvcHMpKTtcbiAgfSwgW10pO1xuICB2YXIgYXV0b0ZvY3VzID0gcHJvcHMuYXV0b0ZvY3VzLFxuICAgIF9wcm9wcyRkZWNvcmF0ZSA9IHByb3BzLmRlY29yYXRlLFxuICAgIGRlY29yYXRlID0gX3Byb3BzJGRlY29yYXRlID09PSB2b2lkIDAgPyBkZWZhdWx0RGVjb3JhdGUgOiBfcHJvcHMkZGVjb3JhdGUsXG4gICAgcHJvcHNPbkRPTUJlZm9yZUlucHV0ID0gcHJvcHMub25ET01CZWZvcmVJbnB1dCxcbiAgICBwbGFjZWhvbGRlciA9IHByb3BzLnBsYWNlaG9sZGVyLFxuICAgIF9wcm9wcyRyZWFkT25seSA9IHByb3BzLnJlYWRPbmx5LFxuICAgIHJlYWRPbmx5ID0gX3Byb3BzJHJlYWRPbmx5ID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyRyZWFkT25seSxcbiAgICByZW5kZXJFbGVtZW50ID0gcHJvcHMucmVuZGVyRWxlbWVudCxcbiAgICByZW5kZXJMZWFmID0gcHJvcHMucmVuZGVyTGVhZixcbiAgICBfcHJvcHMkcmVuZGVyUGxhY2Vob2wgPSBwcm9wcy5yZW5kZXJQbGFjZWhvbGRlcixcbiAgICByZW5kZXJQbGFjZWhvbGRlciA9IF9wcm9wcyRyZW5kZXJQbGFjZWhvbCA9PT0gdm9pZCAwID8gZGVmYXVsdFJlbmRlclBsYWNlaG9sZGVyIDogX3Byb3BzJHJlbmRlclBsYWNlaG9sLFxuICAgIF9wcm9wcyRzY3JvbGxTZWxlY3RpbyA9IHByb3BzLnNjcm9sbFNlbGVjdGlvbkludG9WaWV3LFxuICAgIHNjcm9sbFNlbGVjdGlvbkludG9WaWV3ID0gX3Byb3BzJHNjcm9sbFNlbGVjdGlvID09PSB2b2lkIDAgPyBkZWZhdWx0U2Nyb2xsU2VsZWN0aW9uSW50b1ZpZXcgOiBfcHJvcHMkc2Nyb2xsU2VsZWN0aW8sXG4gICAgX3Byb3BzJHN0eWxlID0gcHJvcHMuc3R5bGUsXG4gICAgdXNlclN0eWxlID0gX3Byb3BzJHN0eWxlID09PSB2b2lkIDAgPyB7fSA6IF9wcm9wcyRzdHlsZSxcbiAgICBfcHJvcHMkYXMgPSBwcm9wcy5hcyxcbiAgICBDb21wb25lbnQgPSBfcHJvcHMkYXMgPT09IHZvaWQgMCA/ICdkaXYnIDogX3Byb3BzJGFzLFxuICAgIF9wcm9wcyRkaXNhYmxlRGVmYXVsdCA9IHByb3BzLmRpc2FibGVEZWZhdWx0U3R5bGVzLFxuICAgIGRpc2FibGVEZWZhdWx0U3R5bGVzID0gX3Byb3BzJGRpc2FibGVEZWZhdWx0ID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyRkaXNhYmxlRGVmYXVsdCxcbiAgICBhdHRyaWJ1dGVzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKHByb3BzLCBfZXhjbHVkZWQkMSk7XG4gIHZhciBlZGl0b3IgPSB1c2VTbGF0ZSgpO1xuICAvLyBSZXJlbmRlciBlZGl0b3Igd2hlbiBjb21wb3NpdGlvbiBzdGF0dXMgY2hhbmdlZFxuICB2YXIgX3VzZVN0YXRlID0gUmVhY3QudXNlU3RhdGUoZmFsc2UpLFxuICAgIF91c2VTdGF0ZTIgPSBfc2xpY2VkVG9BcnJheShfdXNlU3RhdGUsIDIpLFxuICAgIGlzQ29tcG9zaW5nID0gX3VzZVN0YXRlMlswXSxcbiAgICBzZXRJc0NvbXBvc2luZyA9IF91c2VTdGF0ZTJbMV07XG4gIHZhciByZWYgPSBSZWFjdC51c2VSZWYobnVsbCk7XG4gIHZhciBkZWZlcnJlZE9wZXJhdGlvbnMgPSBSZWFjdC51c2VSZWYoW10pO1xuICB2YXIgX3VzZVN0YXRlMyA9IFJlYWN0LnVzZVN0YXRlKCksXG4gICAgX3VzZVN0YXRlNCA9IF9zbGljZWRUb0FycmF5KF91c2VTdGF0ZTMsIDIpLFxuICAgIHBsYWNlaG9sZGVySGVpZ2h0ID0gX3VzZVN0YXRlNFswXSxcbiAgICBzZXRQbGFjZWhvbGRlckhlaWdodCA9IF91c2VTdGF0ZTRbMV07XG4gIHZhciBwcm9jZXNzaW5nID0gUmVhY3QudXNlUmVmKGZhbHNlKTtcbiAgdmFyIF91c2VUcmFja1VzZXJJbnB1dCA9IHVzZVRyYWNrVXNlcklucHV0KCksXG4gICAgb25Vc2VySW5wdXQgPSBfdXNlVHJhY2tVc2VySW5wdXQub25Vc2VySW5wdXQsXG4gICAgcmVjZWl2ZWRVc2VySW5wdXQgPSBfdXNlVHJhY2tVc2VySW5wdXQucmVjZWl2ZWRVc2VySW5wdXQ7XG4gIHZhciBfdXNlUmVkdWNlciA9IFJlYWN0LnVzZVJlZHVjZXIoZnVuY3Rpb24gKHMpIHtcbiAgICAgIHJldHVybiBzICsgMTtcbiAgICB9LCAwKSxcbiAgICBfdXNlUmVkdWNlcjIgPSBfc2xpY2VkVG9BcnJheShfdXNlUmVkdWNlciwgMiksXG4gICAgZm9yY2VSZW5kZXIgPSBfdXNlUmVkdWNlcjJbMV07XG4gIHNsYXRlRG9tLkVESVRPUl9UT19GT1JDRV9SRU5ERVIuc2V0KGVkaXRvciwgZm9yY2VSZW5kZXIpO1xuICAvLyBVcGRhdGUgaW50ZXJuYWwgc3RhdGUgb24gZWFjaCByZW5kZXIuXG4gIHNsYXRlRG9tLklTX1JFQURfT05MWS5zZXQoZWRpdG9yLCByZWFkT25seSk7XG4gIC8vIEtlZXAgdHJhY2sgb2Ygc29tZSBzdGF0ZSBmb3IgdGhlIGV2ZW50IGhhbmRsZXIgbG9naWMuXG4gIHZhciBzdGF0ZSA9IFJlYWN0LnVzZU1lbW8oZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB7XG4gICAgICBpc0RyYWdnaW5nSW50ZXJuYWxseTogZmFsc2UsXG4gICAgICBpc1VwZGF0aW5nU2VsZWN0aW9uOiBmYWxzZSxcbiAgICAgIGxhdGVzdEVsZW1lbnQ6IG51bGwsXG4gICAgICBoYXNNYXJrUGxhY2Vob2xkZXI6IGZhbHNlXG4gICAgfTtcbiAgfSwgW10pO1xuICAvLyBUaGUgYXV0b0ZvY3VzIFRleHRhcmVhSFRNTEF0dHJpYnV0ZSBkb2Vzbid0IGRvIGFueXRoaW5nIG9uIGEgZGl2LCBzbyBpdFxuICAvLyBuZWVkcyB0byBiZSBtYW51YWxseSBmb2N1c2VkLlxuICBSZWFjdC51c2VFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgIGlmIChyZWYuY3VycmVudCAmJiBhdXRvRm9jdXMpIHtcbiAgICAgIHJlZi5jdXJyZW50LmZvY3VzKCk7XG4gICAgfVxuICB9LCBbYXV0b0ZvY3VzXSk7XG4gIC8qKlxuICAgKiBUaGUgQW5kcm9pZElucHV0TWFuYWdlciBvYmplY3QgaGFzIGEgY3ljbGljYWwgZGVwZW5kZW5jeSBvbiBvbkRPTVNlbGVjdGlvbkNoYW5nZVxuICAgKlxuICAgKiBJdCBpcyBkZWZpbmVkIGFzIGEgcmVmZXJlbmNlIHRvIHNpbXBsaWZ5IGhvb2sgZGVwZW5kZW5jaWVzIGFuZCBjbGFyaWZ5IHRoYXRcbiAgICogaXQgbmVlZHMgdG8gYmUgaW5pdGlhbGl6ZWQuXG4gICAqL1xuICB2YXIgYW5kcm9pZElucHV0TWFuYWdlclJlZiA9IFJlYWN0LnVzZVJlZigpO1xuICAvLyBMaXN0ZW4gb24gdGhlIG5hdGl2ZSBgc2VsZWN0aW9uY2hhbmdlYCBldmVudCB0byBiZSBhYmxlIHRvIHVwZGF0ZSBhbnkgdGltZVxuICAvLyB0aGUgc2VsZWN0aW9uIGNoYW5nZXMuIFRoaXMgaXMgcmVxdWlyZWQgYmVjYXVzZSBSZWFjdCdzIGBvblNlbGVjdGAgaXMgbGVha3lcbiAgLy8gYW5kIG5vbi1zdGFuZGFyZCBzbyBpdCBkb2Vzbid0IGZpcmUgdW50aWwgYWZ0ZXIgYSBzZWxlY3Rpb24gaGFzIGJlZW5cbiAgLy8gcmVsZWFzZWQuIFRoaXMgY2F1c2VzIGlzc3VlcyBpbiBzaXR1YXRpb25zIHdoZXJlIGFub3RoZXIgY2hhbmdlIGhhcHBlbnNcbiAgLy8gd2hpbGUgYSBzZWxlY3Rpb24gaXMgYmVpbmcgZHJhZ2dlZC5cbiAgdmFyIG9uRE9NU2VsZWN0aW9uQ2hhbmdlID0gUmVhY3QudXNlTWVtbyhmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRocm90dGxlKGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChzbGF0ZURvbS5JU19OT0RFX01BUF9ESVJUWS5nZXQoZWRpdG9yKSkge1xuICAgICAgICBvbkRPTVNlbGVjdGlvbkNoYW5nZSgpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICB2YXIgZWwgPSBSZWFjdEVkaXRvci50b0RPTU5vZGUoZWRpdG9yLCBlZGl0b3IpO1xuICAgICAgdmFyIHJvb3QgPSBlbC5nZXRSb290Tm9kZSgpO1xuICAgICAgaWYgKCFwcm9jZXNzaW5nLmN1cnJlbnQgJiYgc2xhdGVEb20uSVNfV0VCS0lUICYmIHJvb3QgaW5zdGFuY2VvZiBTaGFkb3dSb290KSB7XG4gICAgICAgIHByb2Nlc3NpbmcuY3VycmVudCA9IHRydWU7XG4gICAgICAgIHZhciBhY3RpdmUgPSBzbGF0ZURvbS5nZXRBY3RpdmVFbGVtZW50KCk7XG4gICAgICAgIGlmIChhY3RpdmUpIHtcbiAgICAgICAgICBkb2N1bWVudC5leGVjQ29tbWFuZCgnaW5kZW50Jyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc2xhdGUuVHJhbnNmb3Jtcy5kZXNlbGVjdChlZGl0b3IpO1xuICAgICAgICB9XG4gICAgICAgIHByb2Nlc3NpbmcuY3VycmVudCA9IGZhbHNlO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICB2YXIgYW5kcm9pZElucHV0TWFuYWdlciA9IGFuZHJvaWRJbnB1dE1hbmFnZXJSZWYuY3VycmVudDtcbiAgICAgIGlmICgoc2xhdGVEb20uSVNfQU5EUk9JRCB8fCAhUmVhY3RFZGl0b3IuaXNDb21wb3NpbmcoZWRpdG9yKSkgJiYgKCFzdGF0ZS5pc1VwZGF0aW5nU2VsZWN0aW9uIHx8IGFuZHJvaWRJbnB1dE1hbmFnZXIgIT09IG51bGwgJiYgYW5kcm9pZElucHV0TWFuYWdlciAhPT0gdm9pZCAwICYmIGFuZHJvaWRJbnB1dE1hbmFnZXIuaXNGbHVzaGluZygpKSAmJiAhc3RhdGUuaXNEcmFnZ2luZ0ludGVybmFsbHkpIHtcbiAgICAgICAgdmFyIF9yb290ID0gUmVhY3RFZGl0b3IuZmluZERvY3VtZW50T3JTaGFkb3dSb290KGVkaXRvcik7XG4gICAgICAgIHZhciBhY3RpdmVFbGVtZW50ID0gX3Jvb3QuYWN0aXZlRWxlbWVudDtcbiAgICAgICAgdmFyIF9lbCA9IFJlYWN0RWRpdG9yLnRvRE9NTm9kZShlZGl0b3IsIGVkaXRvcik7XG4gICAgICAgIHZhciBkb21TZWxlY3Rpb24gPSBzbGF0ZURvbS5nZXRTZWxlY3Rpb24oX3Jvb3QpO1xuICAgICAgICBpZiAoYWN0aXZlRWxlbWVudCA9PT0gX2VsKSB7XG4gICAgICAgICAgc3RhdGUubGF0ZXN0RWxlbWVudCA9IGFjdGl2ZUVsZW1lbnQ7XG4gICAgICAgICAgc2xhdGVEb20uSVNfRk9DVVNFRC5zZXQoZWRpdG9yLCB0cnVlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzbGF0ZURvbS5JU19GT0NVU0VEW1wiZGVsZXRlXCJdKGVkaXRvcik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFkb21TZWxlY3Rpb24pIHtcbiAgICAgICAgICByZXR1cm4gc2xhdGUuVHJhbnNmb3Jtcy5kZXNlbGVjdChlZGl0b3IpO1xuICAgICAgICB9XG4gICAgICAgIHZhciBhbmNob3JOb2RlID0gZG9tU2VsZWN0aW9uLmFuY2hvck5vZGUsXG4gICAgICAgICAgZm9jdXNOb2RlID0gZG9tU2VsZWN0aW9uLmZvY3VzTm9kZTtcbiAgICAgICAgdmFyIGFuY2hvck5vZGVTZWxlY3RhYmxlID0gUmVhY3RFZGl0b3IuaGFzRWRpdGFibGVUYXJnZXQoZWRpdG9yLCBhbmNob3JOb2RlKSB8fCBSZWFjdEVkaXRvci5pc1RhcmdldEluc2lkZU5vblJlYWRvbmx5Vm9pZChlZGl0b3IsIGFuY2hvck5vZGUpO1xuICAgICAgICB2YXIgZm9jdXNOb2RlSW5FZGl0b3IgPSBSZWFjdEVkaXRvci5oYXNUYXJnZXQoZWRpdG9yLCBmb2N1c05vZGUpO1xuICAgICAgICBpZiAoYW5jaG9yTm9kZVNlbGVjdGFibGUgJiYgZm9jdXNOb2RlSW5FZGl0b3IpIHtcbiAgICAgICAgICB2YXIgcmFuZ2UgPSBSZWFjdEVkaXRvci50b1NsYXRlUmFuZ2UoZWRpdG9yLCBkb21TZWxlY3Rpb24sIHtcbiAgICAgICAgICAgIGV4YWN0TWF0Y2g6IGZhbHNlLFxuICAgICAgICAgICAgc3VwcHJlc3NUaHJvdzogdHJ1ZVxuICAgICAgICAgIH0pO1xuICAgICAgICAgIGlmIChyYW5nZSkge1xuICAgICAgICAgICAgaWYgKCFSZWFjdEVkaXRvci5pc0NvbXBvc2luZyhlZGl0b3IpICYmICEoYW5kcm9pZElucHV0TWFuYWdlciAhPT0gbnVsbCAmJiBhbmRyb2lkSW5wdXRNYW5hZ2VyICE9PSB2b2lkIDAgJiYgYW5kcm9pZElucHV0TWFuYWdlci5oYXNQZW5kaW5nQ2hhbmdlcygpKSAmJiAhKGFuZHJvaWRJbnB1dE1hbmFnZXIgIT09IG51bGwgJiYgYW5kcm9pZElucHV0TWFuYWdlciAhPT0gdm9pZCAwICYmIGFuZHJvaWRJbnB1dE1hbmFnZXIuaXNGbHVzaGluZygpKSkge1xuICAgICAgICAgICAgICBzbGF0ZS5UcmFuc2Zvcm1zLnNlbGVjdChlZGl0b3IsIHJhbmdlKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGFuZHJvaWRJbnB1dE1hbmFnZXIgPT09IG51bGwgfHwgYW5kcm9pZElucHV0TWFuYWdlciA9PT0gdm9pZCAwIHx8IGFuZHJvaWRJbnB1dE1hbmFnZXIuaGFuZGxlVXNlclNlbGVjdChyYW5nZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vIERlc2VsZWN0IHRoZSBlZGl0b3IgaWYgdGhlIGRvbSBzZWxlY3Rpb24gaXMgbm90IHNlbGVjdGFibGUgaW4gcmVhZG9ubHkgbW9kZVxuICAgICAgICBpZiAocmVhZE9ubHkgJiYgKCFhbmNob3JOb2RlU2VsZWN0YWJsZSB8fCAhZm9jdXNOb2RlSW5FZGl0b3IpKSB7XG4gICAgICAgICAgc2xhdGUuVHJhbnNmb3Jtcy5kZXNlbGVjdChlZGl0b3IpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSwgMTAwKTtcbiAgfSwgW2VkaXRvciwgcmVhZE9ubHksIHN0YXRlXSk7XG4gIHZhciBzY2hlZHVsZU9uRE9NU2VsZWN0aW9uQ2hhbmdlID0gUmVhY3QudXNlTWVtbyhmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGRlYm91bmNlKG9uRE9NU2VsZWN0aW9uQ2hhbmdlLCAwKTtcbiAgfSwgW29uRE9NU2VsZWN0aW9uQ2hhbmdlXSk7XG4gIGFuZHJvaWRJbnB1dE1hbmFnZXJSZWYuY3VycmVudCA9IHVzZUFuZHJvaWRJbnB1dE1hbmFnZXIoe1xuICAgIG5vZGU6IHJlZixcbiAgICBvbkRPTVNlbGVjdGlvbkNoYW5nZTogb25ET01TZWxlY3Rpb25DaGFuZ2UsXG4gICAgc2NoZWR1bGVPbkRPTVNlbGVjdGlvbkNoYW5nZTogc2NoZWR1bGVPbkRPTVNlbGVjdGlvbkNoYW5nZVxuICB9KTtcbiAgdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgdmFyIF9hbmRyb2lkSW5wdXRNYW5hZ2VyUiwgX2FuZHJvaWRJbnB1dE1hbmFnZXJSMjtcbiAgICAvLyBVcGRhdGUgZWxlbWVudC1yZWxhdGVkIHdlYWsgbWFwcyB3aXRoIHRoZSBET00gZWxlbWVudCByZWYuXG4gICAgdmFyIHdpbmRvdztcbiAgICBpZiAocmVmLmN1cnJlbnQgJiYgKHdpbmRvdyA9IHNsYXRlRG9tLmdldERlZmF1bHRWaWV3KHJlZi5jdXJyZW50KSkpIHtcbiAgICAgIHNsYXRlRG9tLkVESVRPUl9UT19XSU5ET1cuc2V0KGVkaXRvciwgd2luZG93KTtcbiAgICAgIHNsYXRlRG9tLkVESVRPUl9UT19FTEVNRU5ULnNldChlZGl0b3IsIHJlZi5jdXJyZW50KTtcbiAgICAgIHNsYXRlRG9tLk5PREVfVE9fRUxFTUVOVC5zZXQoZWRpdG9yLCByZWYuY3VycmVudCk7XG4gICAgICBzbGF0ZURvbS5FTEVNRU5UX1RPX05PREUuc2V0KHJlZi5jdXJyZW50LCBlZGl0b3IpO1xuICAgIH0gZWxzZSB7XG4gICAgICBzbGF0ZURvbS5OT0RFX1RPX0VMRU1FTlRbXCJkZWxldGVcIl0oZWRpdG9yKTtcbiAgICB9XG4gICAgLy8gTWFrZSBzdXJlIHRoZSBET00gc2VsZWN0aW9uIHN0YXRlIGlzIGluIHN5bmMuXG4gICAgdmFyIHNlbGVjdGlvbiA9IGVkaXRvci5zZWxlY3Rpb247XG4gICAgdmFyIHJvb3QgPSBSZWFjdEVkaXRvci5maW5kRG9jdW1lbnRPclNoYWRvd1Jvb3QoZWRpdG9yKTtcbiAgICB2YXIgZG9tU2VsZWN0aW9uID0gc2xhdGVEb20uZ2V0U2VsZWN0aW9uKHJvb3QpO1xuICAgIGlmICghZG9tU2VsZWN0aW9uIHx8ICFSZWFjdEVkaXRvci5pc0ZvY3VzZWQoZWRpdG9yKSB8fCAoX2FuZHJvaWRJbnB1dE1hbmFnZXJSID0gYW5kcm9pZElucHV0TWFuYWdlclJlZi5jdXJyZW50KSAhPT0gbnVsbCAmJiBfYW5kcm9pZElucHV0TWFuYWdlclIgIT09IHZvaWQgMCAmJiBfYW5kcm9pZElucHV0TWFuYWdlclIuaGFzUGVuZGluZ0FjdGlvbigpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHZhciBzZXREb21TZWxlY3Rpb24gPSBmdW5jdGlvbiBzZXREb21TZWxlY3Rpb24oZm9yY2VDaGFuZ2UpIHtcbiAgICAgIHZhciBoYXNEb21TZWxlY3Rpb24gPSBkb21TZWxlY3Rpb24udHlwZSAhPT0gJ05vbmUnO1xuICAgICAgLy8gSWYgdGhlIERPTSBzZWxlY3Rpb24gaXMgcHJvcGVybHkgdW5zZXQsIHdlJ3JlIGRvbmUuXG4gICAgICBpZiAoIXNlbGVjdGlvbiAmJiAhaGFzRG9tU2VsZWN0aW9uKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIC8vIEdldCBhbmNob3JOb2RlIGFuZCBmb2N1c05vZGVcbiAgICAgIHZhciBmb2N1c05vZGUgPSBkb21TZWxlY3Rpb24uZm9jdXNOb2RlO1xuICAgICAgdmFyIGFuY2hvck5vZGU7XG4gICAgICAvLyBDT01QQVQ6IEluIGZpcmVmb3ggdGhlIG5vcm1hbCBzZWxlY3Rpb24gd2F5IGRvZXMgbm90IHdvcmtcbiAgICAgIC8vIChodHRwczovL2dpdGh1Yi5jb20vaWFuc3Rvcm10YXlsb3Ivc2xhdGUvcHVsbC81NDg2I2lzc3VlLTE4MjA3MjAyMjMpXG4gICAgICBpZiAoc2xhdGVEb20uSVNfRklSRUZPWCAmJiBkb21TZWxlY3Rpb24ucmFuZ2VDb3VudCA+IDEpIHtcbiAgICAgICAgdmFyIGZpcnN0UmFuZ2UgPSBkb21TZWxlY3Rpb24uZ2V0UmFuZ2VBdCgwKTtcbiAgICAgICAgdmFyIGxhc3RSYW5nZSA9IGRvbVNlbGVjdGlvbi5nZXRSYW5nZUF0KGRvbVNlbGVjdGlvbi5yYW5nZUNvdW50IC0gMSk7XG4gICAgICAgIC8vIFJpZ2h0IHRvIGxlZnRcbiAgICAgICAgaWYgKGZpcnN0UmFuZ2Uuc3RhcnRDb250YWluZXIgPT09IGZvY3VzTm9kZSkge1xuICAgICAgICAgIGFuY2hvck5vZGUgPSBsYXN0UmFuZ2UuZW5kQ29udGFpbmVyO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIExlZnQgdG8gcmlnaHRcbiAgICAgICAgICBhbmNob3JOb2RlID0gZmlyc3RSYW5nZS5zdGFydENvbnRhaW5lcjtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYW5jaG9yTm9kZSA9IGRvbVNlbGVjdGlvbi5hbmNob3JOb2RlO1xuICAgICAgfVxuICAgICAgLy8gdmVyaWZ5IHRoYXQgdGhlIGRvbSBzZWxlY3Rpb24gaXMgaW4gdGhlIGVkaXRvclxuICAgICAgdmFyIGVkaXRvckVsZW1lbnQgPSBzbGF0ZURvbS5FRElUT1JfVE9fRUxFTUVOVC5nZXQoZWRpdG9yKTtcbiAgICAgIHZhciBoYXNEb21TZWxlY3Rpb25JbkVkaXRvciA9IGZhbHNlO1xuICAgICAgaWYgKGVkaXRvckVsZW1lbnQuY29udGFpbnMoYW5jaG9yTm9kZSkgJiYgZWRpdG9yRWxlbWVudC5jb250YWlucyhmb2N1c05vZGUpKSB7XG4gICAgICAgIGhhc0RvbVNlbGVjdGlvbkluRWRpdG9yID0gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIC8vIElmIHRoZSBET00gc2VsZWN0aW9uIGlzIGluIHRoZSBlZGl0b3IgYW5kIHRoZSBlZGl0b3Igc2VsZWN0aW9uIGlzIGFscmVhZHkgY29ycmVjdCwgd2UncmUgZG9uZS5cbiAgICAgIGlmIChoYXNEb21TZWxlY3Rpb24gJiYgaGFzRG9tU2VsZWN0aW9uSW5FZGl0b3IgJiYgc2VsZWN0aW9uICYmICFmb3JjZUNoYW5nZSkge1xuICAgICAgICB2YXIgc2xhdGVSYW5nZSA9IFJlYWN0RWRpdG9yLnRvU2xhdGVSYW5nZShlZGl0b3IsIGRvbVNlbGVjdGlvbiwge1xuICAgICAgICAgIGV4YWN0TWF0Y2g6IHRydWUsXG4gICAgICAgICAgLy8gZG9tU2VsZWN0aW9uIGlzIG5vdCBuZWNlc3NhcmlseSBhIHZhbGlkIFNsYXRlIHJhbmdlXG4gICAgICAgICAgLy8gKGUuZy4gd2hlbiBjbGlja2luZyBvbiBjb250ZW50RWRpdGFibGU6ZmFsc2UgZWxlbWVudClcbiAgICAgICAgICBzdXBwcmVzc1Rocm93OiB0cnVlXG4gICAgICAgIH0pO1xuICAgICAgICBpZiAoc2xhdGVSYW5nZSAmJiBzbGF0ZS5SYW5nZS5lcXVhbHMoc2xhdGVSYW5nZSwgc2VsZWN0aW9uKSkge1xuICAgICAgICAgIHZhciBfYW5jaG9yTm9kZTtcbiAgICAgICAgICBpZiAoIXN0YXRlLmhhc01hcmtQbGFjZWhvbGRlcikge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cbiAgICAgICAgICAvLyBFbnN1cmUgc2VsZWN0aW9uIGlzIGluc2lkZSB0aGUgbWFyayBwbGFjZWhvbGRlclxuICAgICAgICAgIGlmICgoX2FuY2hvck5vZGUgPSBhbmNob3JOb2RlKSAhPT0gbnVsbCAmJiBfYW5jaG9yTm9kZSAhPT0gdm9pZCAwICYmIChfYW5jaG9yTm9kZSA9IF9hbmNob3JOb2RlLnBhcmVudEVsZW1lbnQpICE9PSBudWxsICYmIF9hbmNob3JOb2RlICE9PSB2b2lkIDAgJiYgX2FuY2hvck5vZGUuaGFzQXR0cmlidXRlKCdkYXRhLXNsYXRlLW1hcmstcGxhY2Vob2xkZXInKSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgLy8gd2hlbiA8RWRpdGFibGUvPiBpcyBiZWluZyBjb250cm9sbGVkIHRocm91Z2ggZXh0ZXJuYWwgdmFsdWVcbiAgICAgIC8vIHRoZW4gaXRzIGNoaWxkcmVuIG1pZ2h0IGp1c3QgY2hhbmdlIC0gRE9NIHJlc3BvbmRzIHRvIGl0IG9uIGl0cyBvd25cbiAgICAgIC8vIGJ1dCBTbGF0ZSdzIHZhbHVlIGlzIG5vdCBiZWluZyB1cGRhdGVkIHRocm91Z2ggYW55IG9wZXJhdGlvblxuICAgICAgLy8gYW5kIHRodXMgaXQgZG9lc24ndCB0cmFuc2Zvcm0gc2VsZWN0aW9uIG9uIGl0cyBvd25cbiAgICAgIGlmIChzZWxlY3Rpb24gJiYgIVJlYWN0RWRpdG9yLmhhc1JhbmdlKGVkaXRvciwgc2VsZWN0aW9uKSkge1xuICAgICAgICBlZGl0b3Iuc2VsZWN0aW9uID0gUmVhY3RFZGl0b3IudG9TbGF0ZVJhbmdlKGVkaXRvciwgZG9tU2VsZWN0aW9uLCB7XG4gICAgICAgICAgZXhhY3RNYXRjaDogZmFsc2UsXG4gICAgICAgICAgc3VwcHJlc3NUaHJvdzogdHJ1ZVxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgLy8gT3RoZXJ3aXNlIHRoZSBET00gc2VsZWN0aW9uIGlzIG91dCBvZiBzeW5jLCBzbyB1cGRhdGUgaXQuXG4gICAgICBzdGF0ZS5pc1VwZGF0aW5nU2VsZWN0aW9uID0gdHJ1ZTtcbiAgICAgIHZhciBuZXdEb21SYW5nZSA9IG51bGw7XG4gICAgICB0cnkge1xuICAgICAgICBuZXdEb21SYW5nZSA9IHNlbGVjdGlvbiAmJiBSZWFjdEVkaXRvci50b0RPTVJhbmdlKGVkaXRvciwgc2VsZWN0aW9uKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgLy8gSWdub3JlLCBkb20gYW5kIHN0YXRlIG1pZ2h0IGJlIG91dCBvZiBzeW5jXG4gICAgICB9XG4gICAgICBpZiAobmV3RG9tUmFuZ2UpIHtcbiAgICAgICAgaWYgKFJlYWN0RWRpdG9yLmlzQ29tcG9zaW5nKGVkaXRvcikgJiYgIXNsYXRlRG9tLklTX0FORFJPSUQpIHtcbiAgICAgICAgICBkb21TZWxlY3Rpb24uY29sbGFwc2VUb0VuZCgpO1xuICAgICAgICB9IGVsc2UgaWYgKHNsYXRlLlJhbmdlLmlzQmFja3dhcmQoc2VsZWN0aW9uKSkge1xuICAgICAgICAgIGRvbVNlbGVjdGlvbi5zZXRCYXNlQW5kRXh0ZW50KG5ld0RvbVJhbmdlLmVuZENvbnRhaW5lciwgbmV3RG9tUmFuZ2UuZW5kT2Zmc2V0LCBuZXdEb21SYW5nZS5zdGFydENvbnRhaW5lciwgbmV3RG9tUmFuZ2Uuc3RhcnRPZmZzZXQpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGRvbVNlbGVjdGlvbi5zZXRCYXNlQW5kRXh0ZW50KG5ld0RvbVJhbmdlLnN0YXJ0Q29udGFpbmVyLCBuZXdEb21SYW5nZS5zdGFydE9mZnNldCwgbmV3RG9tUmFuZ2UuZW5kQ29udGFpbmVyLCBuZXdEb21SYW5nZS5lbmRPZmZzZXQpO1xuICAgICAgICB9XG4gICAgICAgIHNjcm9sbFNlbGVjdGlvbkludG9WaWV3KGVkaXRvciwgbmV3RG9tUmFuZ2UpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZG9tU2VsZWN0aW9uLnJlbW92ZUFsbFJhbmdlcygpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG5ld0RvbVJhbmdlO1xuICAgIH07XG4gICAgLy8gSW4gZmlyZWZveCBpZiB0aGVyZSBpcyBtb3JlIHRoZW4gMSByYW5nZSBhbmQgd2UgY2FsbCBzZXREb21TZWxlY3Rpb24gd2UgcmVtb3ZlIHRoZSBhYmlsaXR5IHRvIHNlbGVjdCBtb3JlIGNlbGxzIGluIGEgdGFibGVcbiAgICBpZiAoZG9tU2VsZWN0aW9uLnJhbmdlQ291bnQgPD0gMSkge1xuICAgICAgc2V0RG9tU2VsZWN0aW9uKCk7XG4gICAgfVxuICAgIHZhciBlbnN1cmVTZWxlY3Rpb24gPSAoKF9hbmRyb2lkSW5wdXRNYW5hZ2VyUjIgPSBhbmRyb2lkSW5wdXRNYW5hZ2VyUmVmLmN1cnJlbnQpID09PSBudWxsIHx8IF9hbmRyb2lkSW5wdXRNYW5hZ2VyUjIgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hbmRyb2lkSW5wdXRNYW5hZ2VyUjIuaXNGbHVzaGluZygpKSA9PT0gJ2FjdGlvbic7XG4gICAgaWYgKCFzbGF0ZURvbS5JU19BTkRST0lEIHx8ICFlbnN1cmVTZWxlY3Rpb24pIHtcbiAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICBzdGF0ZS5pc1VwZGF0aW5nU2VsZWN0aW9uID0gZmFsc2U7XG4gICAgICB9KTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdmFyIHRpbWVvdXRJZCA9IG51bGw7XG4gICAgdmFyIGFuaW1hdGlvbkZyYW1lSWQgPSByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKGVuc3VyZVNlbGVjdGlvbikge1xuICAgICAgICB2YXIgZW5zdXJlRG9tU2VsZWN0aW9uID0gZnVuY3Rpb24gZW5zdXJlRG9tU2VsZWN0aW9uKGZvcmNlQ2hhbmdlKSB7XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHZhciBlbCA9IFJlYWN0RWRpdG9yLnRvRE9NTm9kZShlZGl0b3IsIGVkaXRvcik7XG4gICAgICAgICAgICBlbC5mb2N1cygpO1xuICAgICAgICAgICAgc2V0RG9tU2VsZWN0aW9uKGZvcmNlQ2hhbmdlKTtcbiAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAvLyBJZ25vcmUsIGRvbSBhbmQgc3RhdGUgbWlnaHQgYmUgb3V0IG9mIHN5bmNcbiAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIC8vIENvbXBhdDogQW5kcm9pZCBJTUVzIHRyeSB0byBmb3JjZSB0aGVpciBzZWxlY3Rpb24gYnkgbWFudWFsbHkgcmUtYXBwbHlpbmcgaXQgZXZlbiBhZnRlciB3ZSBzZXQgaXQuXG4gICAgICAgIC8vIFRoaXMgZXNzZW50aWFsbHkgd291bGQgbWFrZSBzZXR0aW5nIHRoZSBzbGF0ZSBzZWxlY3Rpb24gZHVyaW5nIGFuIHVwZGF0ZSBtZWFuaW5nbGVzcywgc28gd2UgZm9yY2UgaXRcbiAgICAgICAgLy8gYWdhaW4gaGVyZS4gV2UgY2FuJ3Qgb25seSBkbyBpdCBpbiB0aGUgc2V0VGltZW91dCBhZnRlciB0aGUgYW5pbWF0aW9uIGZyYW1lIHNpbmNlIHRoYXQgd291bGQgY2F1c2UgYVxuICAgICAgICAvLyB2aXNpYmxlIGZsaWNrZXIuXG4gICAgICAgIGVuc3VyZURvbVNlbGVjdGlvbigpO1xuICAgICAgICB0aW1lb3V0SWQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAvLyBDT01QQVQ6IFdoaWxlIHNldHRpbmcgdGhlIHNlbGVjdGlvbiBpbiBhbiBhbmltYXRpb24gZnJhbWUgdmlzdWFsbHkgY29ycmVjdGx5IHNldHMgdGhlIHNlbGVjdGlvbixcbiAgICAgICAgICAvLyBpdCBkb2Vzbid0IHVwZGF0ZSBHQm9hcmRzIHNwZWxsY2hlY2tlciBzdGF0ZS4gV2UgaGF2ZSB0byBtYW51YWxseSB0cmlnZ2VyIGEgc2VsZWN0aW9uIGNoYW5nZSBhZnRlclxuICAgICAgICAgIC8vIHRoZSBhbmltYXRpb24gZnJhbWUgdG8gZW5zdXJlIGl0IGRpc3BsYXlzIHRoZSBjb3JyZWN0IHN0YXRlLlxuICAgICAgICAgIGVuc3VyZURvbVNlbGVjdGlvbih0cnVlKTtcbiAgICAgICAgICBzdGF0ZS5pc1VwZGF0aW5nU2VsZWN0aW9uID0gZmFsc2U7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICBjYW5jZWxBbmltYXRpb25GcmFtZShhbmltYXRpb25GcmFtZUlkKTtcbiAgICAgIGlmICh0aW1lb3V0SWQpIHtcbiAgICAgICAgY2xlYXJUaW1lb3V0KHRpbWVvdXRJZCk7XG4gICAgICB9XG4gICAgfTtcbiAgfSk7XG4gIC8vIExpc3RlbiBvbiB0aGUgbmF0aXZlIGBiZWZvcmVpbnB1dGAgZXZlbnQgdG8gZ2V0IHJlYWwgXCJMZXZlbCAyXCIgZXZlbnRzLiBUaGlzXG4gIC8vIGlzIHJlcXVpcmVkIGJlY2F1c2UgUmVhY3QncyBgYmVmb3JlaW5wdXRgIGlzIGZha2UgYW5kIG5ldmVyIHJlYWxseSBhdHRhY2hlc1xuICAvLyB0byB0aGUgcmVhbCBldmVudCBzYWRseS4gKDIwMTkvMTEvMDEpXG4gIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWFjdC9pc3N1ZXMvMTEyMTFcbiAgdmFyIG9uRE9NQmVmb3JlSW5wdXQgPSBSZWFjdC51c2VDYWxsYmFjayhmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICB2YXIgZWwgPSBSZWFjdEVkaXRvci50b0RPTU5vZGUoZWRpdG9yLCBlZGl0b3IpO1xuICAgIHZhciByb290ID0gZWwuZ2V0Um9vdE5vZGUoKTtcbiAgICBpZiAocHJvY2Vzc2luZyAhPT0gbnVsbCAmJiBwcm9jZXNzaW5nICE9PSB2b2lkIDAgJiYgcHJvY2Vzc2luZy5jdXJyZW50ICYmIHNsYXRlRG9tLklTX1dFQktJVCAmJiByb290IGluc3RhbmNlb2YgU2hhZG93Um9vdCkge1xuICAgICAgdmFyIHJhbmdlcyA9IGV2ZW50LmdldFRhcmdldFJhbmdlcygpO1xuICAgICAgdmFyIHJhbmdlID0gcmFuZ2VzWzBdO1xuICAgICAgdmFyIG5ld1JhbmdlID0gbmV3IHdpbmRvdy5SYW5nZSgpO1xuICAgICAgbmV3UmFuZ2Uuc2V0U3RhcnQocmFuZ2Uuc3RhcnRDb250YWluZXIsIHJhbmdlLnN0YXJ0T2Zmc2V0KTtcbiAgICAgIG5ld1JhbmdlLnNldEVuZChyYW5nZS5lbmRDb250YWluZXIsIHJhbmdlLmVuZE9mZnNldCk7XG4gICAgICAvLyBUcmFuc2xhdGUgdGhlIERPTSBSYW5nZSBpbnRvIGEgU2xhdGUgUmFuZ2VcbiAgICAgIHZhciBzbGF0ZVJhbmdlID0gUmVhY3RFZGl0b3IudG9TbGF0ZVJhbmdlKGVkaXRvciwgbmV3UmFuZ2UsIHtcbiAgICAgICAgZXhhY3RNYXRjaDogZmFsc2UsXG4gICAgICAgIHN1cHByZXNzVGhyb3c6IGZhbHNlXG4gICAgICB9KTtcbiAgICAgIHNsYXRlLlRyYW5zZm9ybXMuc2VsZWN0KGVkaXRvciwgc2xhdGVSYW5nZSk7XG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgZXZlbnQuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIG9uVXNlcklucHV0KCk7XG4gICAgaWYgKCFyZWFkT25seSAmJiBSZWFjdEVkaXRvci5oYXNFZGl0YWJsZVRhcmdldChlZGl0b3IsIGV2ZW50LnRhcmdldCkgJiYgIWlzRE9NRXZlbnRIYW5kbGVkKGV2ZW50LCBwcm9wc09uRE9NQmVmb3JlSW5wdXQpKSB7XG4gICAgICB2YXIgX0VESVRPUl9UT19VU0VSX1NFTEVDO1xuICAgICAgLy8gQ09NUEFUOiBCZWZvcmVJbnB1dCBldmVudHMgYXJlbid0IGNhbmNlbGFibGUgb24gYW5kcm9pZCwgc28gd2UgaGF2ZSB0byBoYW5kbGUgdGhlbSBkaWZmZXJlbnRseSB1c2luZyB0aGUgYW5kcm9pZCBpbnB1dCBtYW5hZ2VyLlxuICAgICAgaWYgKGFuZHJvaWRJbnB1dE1hbmFnZXJSZWYuY3VycmVudCkge1xuICAgICAgICByZXR1cm4gYW5kcm9pZElucHV0TWFuYWdlclJlZi5jdXJyZW50LmhhbmRsZURPTUJlZm9yZUlucHV0KGV2ZW50KTtcbiAgICAgIH1cbiAgICAgIC8vIFNvbWUgSU1Fcy9DaHJvbWUgZXh0ZW5zaW9ucyBsaWtlIGUuZy4gR3JhbW1hcmx5IHNldCB0aGUgc2VsZWN0aW9uIGltbWVkaWF0ZWx5IGJlZm9yZVxuICAgICAgLy8gdHJpZ2dlcmluZyBhIGBiZWZvcmVpbnB1dGAgZXhwZWN0aW5nIHRoZSBjaGFuZ2UgdG8gYmUgYXBwbGllZCB0byB0aGUgaW1tZWRpYXRlbHkgYmVmb3JlXG4gICAgICAvLyBzZXQgc2VsZWN0aW9uLlxuICAgICAgc2NoZWR1bGVPbkRPTVNlbGVjdGlvbkNoYW5nZS5mbHVzaCgpO1xuICAgICAgb25ET01TZWxlY3Rpb25DaGFuZ2UuZmx1c2goKTtcbiAgICAgIHZhciBzZWxlY3Rpb24gPSBlZGl0b3Iuc2VsZWN0aW9uO1xuICAgICAgdmFyIHR5cGUgPSBldmVudC5pbnB1dFR5cGU7XG4gICAgICB2YXIgZGF0YSA9IGV2ZW50LmRhdGFUcmFuc2ZlciB8fCBldmVudC5kYXRhIHx8IHVuZGVmaW5lZDtcbiAgICAgIHZhciBpc0NvbXBvc2l0aW9uQ2hhbmdlID0gdHlwZSA9PT0gJ2luc2VydENvbXBvc2l0aW9uVGV4dCcgfHwgdHlwZSA9PT0gJ2RlbGV0ZUNvbXBvc2l0aW9uVGV4dCc7XG4gICAgICAvLyBDT01QQVQ6IHVzZSBjb21wb3NpdGlvbiBjaGFuZ2UgZXZlbnRzIGFzIGEgaGludCB0byB3aGVyZSB3ZSBzaG91bGQgaW5zZXJ0XG4gICAgICAvLyBjb21wb3NpdGlvbiB0ZXh0IGlmIHdlIGFyZW4ndCBjb21wb3NpbmcgdG8gd29yayBhcm91bmQgaHR0cHM6Ly9naXRodWIuY29tL2lhbnN0b3JtdGF5bG9yL3NsYXRlL2lzc3Vlcy81MDM4XG4gICAgICBpZiAoaXNDb21wb3NpdGlvbkNoYW5nZSAmJiBSZWFjdEVkaXRvci5pc0NvbXBvc2luZyhlZGl0b3IpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHZhciBfbmF0aXZlID0gZmFsc2U7XG4gICAgICBpZiAodHlwZSA9PT0gJ2luc2VydFRleHQnICYmIHNlbGVjdGlvbiAmJiBzbGF0ZS5SYW5nZS5pc0NvbGxhcHNlZChzZWxlY3Rpb24pICYmXG4gICAgICAvLyBPbmx5IHVzZSBuYXRpdmUgY2hhcmFjdGVyIGluc2VydGlvbiBmb3Igc2luZ2xlIGNoYXJhY3RlcnMgYS16IG9yIHNwYWNlIGZvciBub3cuXG4gICAgICAvLyBMb25nLXByZXNzIGV2ZW50cyAoaG9sZCBhICsgcHJlc3MgNCA9IMOkKSB0byBjaG9vc2UgYSBzcGVjaWFsIGNoYXJhY3RlciBvdGhlcndpc2VcbiAgICAgIC8vIGNhdXNlcyBkdXBsaWNhdGUgaW5zZXJ0cy5cbiAgICAgIGV2ZW50LmRhdGEgJiYgZXZlbnQuZGF0YS5sZW5ndGggPT09IDEgJiYgL1thLXogXS9pLnRlc3QoZXZlbnQuZGF0YSkgJiZcbiAgICAgIC8vIENocm9tZSBoYXMgaXNzdWVzIGNvcnJlY3RseSBlZGl0aW5nIHRoZSBzdGFydCBvZiBub2RlczogaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL2Nocm9taXVtL2lzc3Vlcy9kZXRhaWw/aWQ9MTI0OTQwNVxuICAgICAgLy8gV2hlbiB0aGVyZSBpcyBhbiBpbmxpbmUgZWxlbWVudCwgZS5nLiBhIGxpbmssIGFuZCB5b3Ugc2VsZWN0XG4gICAgICAvLyByaWdodCBhZnRlciBpdCAodGhlIHN0YXJ0IG9mIHRoZSBuZXh0IG5vZGUpLlxuICAgICAgc2VsZWN0aW9uLmFuY2hvci5vZmZzZXQgIT09IDApIHtcbiAgICAgICAgX25hdGl2ZSA9IHRydWU7XG4gICAgICAgIC8vIFNraXAgbmF0aXZlIGlmIHRoZXJlIGFyZSBtYXJrcywgYXNcbiAgICAgICAgLy8gYGluc2VydFRleHRgIHdpbGwgaW5zZXJ0IGEgbm9kZSwgbm90IGp1c3QgdGV4dC5cbiAgICAgICAgaWYgKGVkaXRvci5tYXJrcykge1xuICAgICAgICAgIF9uYXRpdmUgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICAvLyBJZiB0aGUgTk9ERV9NQVAgaXMgZGlydHksIHdlIGNhbid0IHRydXN0IHRoZSBzZWxlY3Rpb24gYW5jaG9yIChlZyBSZWFjdEVkaXRvci50b0RPTVBvaW50KVxuICAgICAgICBpZiAoIXNsYXRlRG9tLklTX05PREVfTUFQX0RJUlRZLmdldChlZGl0b3IpKSB7XG4gICAgICAgICAgdmFyIF9ub2RlJHBhcmVudEVsZW1lbnQsIF93aW5kb3ckZ2V0Q29tcHV0ZWRTdDtcbiAgICAgICAgICAvLyBDaHJvbWUgYWxzbyBoYXMgaXNzdWVzIGNvcnJlY3RseSBlZGl0aW5nIHRoZSBlbmQgb2YgYW5jaG9yIGVsZW1lbnRzOiBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvY2hyb21pdW0vaXNzdWVzL2RldGFpbD9pZD0xMjU5MTAwXG4gICAgICAgICAgLy8gVGhlcmVmb3JlIHdlIGRvbid0IGFsbG93IG5hdGl2ZSBldmVudHMgdG8gaW5zZXJ0IHRleHQgYXQgdGhlIGVuZCBvZiBhbmNob3Igbm9kZXMuXG4gICAgICAgICAgdmFyIGFuY2hvciA9IHNlbGVjdGlvbi5hbmNob3I7XG4gICAgICAgICAgdmFyIF9SZWFjdEVkaXRvciR0b0RPTVBvaSA9IFJlYWN0RWRpdG9yLnRvRE9NUG9pbnQoZWRpdG9yLCBhbmNob3IpLFxuICAgICAgICAgICAgX1JlYWN0RWRpdG9yJHRvRE9NUG9pMiA9IF9zbGljZWRUb0FycmF5KF9SZWFjdEVkaXRvciR0b0RPTVBvaSwgMiksXG4gICAgICAgICAgICBub2RlID0gX1JlYWN0RWRpdG9yJHRvRE9NUG9pMlswXSxcbiAgICAgICAgICAgIG9mZnNldCA9IF9SZWFjdEVkaXRvciR0b0RPTVBvaTJbMV07XG4gICAgICAgICAgdmFyIGFuY2hvck5vZGUgPSAoX25vZGUkcGFyZW50RWxlbWVudCA9IG5vZGUucGFyZW50RWxlbWVudCkgPT09IG51bGwgfHwgX25vZGUkcGFyZW50RWxlbWVudCA9PT0gdm9pZCAwID8gdm9pZCAwIDogX25vZGUkcGFyZW50RWxlbWVudC5jbG9zZXN0KCdhJyk7XG4gICAgICAgICAgdmFyIF93aW5kb3cgPSBSZWFjdEVkaXRvci5nZXRXaW5kb3coZWRpdG9yKTtcbiAgICAgICAgICBpZiAoX25hdGl2ZSAmJiBhbmNob3JOb2RlICYmIFJlYWN0RWRpdG9yLmhhc0RPTU5vZGUoZWRpdG9yLCBhbmNob3JOb2RlKSkge1xuICAgICAgICAgICAgdmFyIF9sYXN0VGV4dCR0ZXh0Q29udGVudDtcbiAgICAgICAgICAgIC8vIEZpbmQgdGhlIGxhc3QgdGV4dCBub2RlIGluc2lkZSB0aGUgYW5jaG9yLlxuICAgICAgICAgICAgdmFyIGxhc3RUZXh0ID0gX3dpbmRvdyA9PT0gbnVsbCB8fCBfd2luZG93ID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfd2luZG93LmRvY3VtZW50LmNyZWF0ZVRyZWVXYWxrZXIoYW5jaG9yTm9kZSwgTm9kZUZpbHRlci5TSE9XX1RFWFQpLmxhc3RDaGlsZCgpO1xuICAgICAgICAgICAgaWYgKGxhc3RUZXh0ID09PSBub2RlICYmICgoX2xhc3RUZXh0JHRleHRDb250ZW50ID0gbGFzdFRleHQudGV4dENvbnRlbnQpID09PSBudWxsIHx8IF9sYXN0VGV4dCR0ZXh0Q29udGVudCA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2xhc3RUZXh0JHRleHRDb250ZW50Lmxlbmd0aCkgPT09IG9mZnNldCkge1xuICAgICAgICAgICAgICBfbmF0aXZlID0gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIC8vIENocm9tZSBoYXMgaXNzdWVzIHdpdGggdGhlIHByZXNlbmNlIG9mIHRhYiBjaGFyYWN0ZXJzIGluc2lkZSBlbGVtZW50cyB3aXRoIHdoaXRlU3BhY2UgPSAncHJlJ1xuICAgICAgICAgIC8vIGNhdXNpbmcgYWJub3JtYWwgaW5zZXJ0IGJlaGF2aW9yOiBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvY2hyb21pdW0vaXNzdWVzL2RldGFpbD9pZD0xMjE5MTM5XG4gICAgICAgICAgaWYgKF9uYXRpdmUgJiYgbm9kZS5wYXJlbnRFbGVtZW50ICYmIChfd2luZG93ID09PSBudWxsIHx8IF93aW5kb3cgPT09IHZvaWQgMCB8fCAoX3dpbmRvdyRnZXRDb21wdXRlZFN0ID0gX3dpbmRvdy5nZXRDb21wdXRlZFN0eWxlKG5vZGUucGFyZW50RWxlbWVudCkpID09PSBudWxsIHx8IF93aW5kb3ckZ2V0Q29tcHV0ZWRTdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogX3dpbmRvdyRnZXRDb21wdXRlZFN0LndoaXRlU3BhY2UpID09PSAncHJlJykge1xuICAgICAgICAgICAgdmFyIGJsb2NrID0gc2xhdGUuRWRpdG9yLmFib3ZlKGVkaXRvciwge1xuICAgICAgICAgICAgICBhdDogYW5jaG9yLnBhdGgsXG4gICAgICAgICAgICAgIG1hdGNoOiBmdW5jdGlvbiBtYXRjaChuKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHNsYXRlLkVsZW1lbnQuaXNFbGVtZW50KG4pICYmIHNsYXRlLkVkaXRvci5pc0Jsb2NrKGVkaXRvciwgbik7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgaWYgKGJsb2NrICYmIHNsYXRlLk5vZGUuc3RyaW5nKGJsb2NrWzBdKS5pbmNsdWRlcygnXFx0JykpIHtcbiAgICAgICAgICAgICAgX25hdGl2ZSA9IGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgLy8gQ09NUEFUOiBGb3IgdGhlIGRlbGV0aW5nIGZvcndhcmQvYmFja3dhcmQgaW5wdXQgdHlwZXMgd2UgZG9uJ3Qgd2FudFxuICAgICAgLy8gdG8gY2hhbmdlIHRoZSBzZWxlY3Rpb24gYmVjYXVzZSBpdCBpcyB0aGUgcmFuZ2UgdGhhdCB3aWxsIGJlIGRlbGV0ZWQsXG4gICAgICAvLyBhbmQgdGhvc2UgY29tbWFuZHMgZGV0ZXJtaW5lIHRoYXQgZm9yIHRoZW1zZWx2ZXMuXG4gICAgICAvLyBJZiB0aGUgTk9ERV9NQVAgaXMgZGlydHksIHdlIGNhbid0IHRydXN0IHRoZSBzZWxlY3Rpb24gYW5jaG9yIChlZyBSZWFjdEVkaXRvci50b0RPTVBvaW50IHZpYSBSZWFjdEVkaXRvci50b1NsYXRlUmFuZ2UpXG4gICAgICBpZiAoKCF0eXBlLnN0YXJ0c1dpdGgoJ2RlbGV0ZScpIHx8IHR5cGUuc3RhcnRzV2l0aCgnZGVsZXRlQnknKSkgJiYgIXNsYXRlRG9tLklTX05PREVfTUFQX0RJUlRZLmdldChlZGl0b3IpKSB7XG4gICAgICAgIHZhciBfZXZlbnQkZ2V0VGFyZ2V0UmFuZ2UgPSBldmVudC5nZXRUYXJnZXRSYW5nZXMoKSxcbiAgICAgICAgICBfZXZlbnQkZ2V0VGFyZ2V0UmFuZ2UyID0gX3NsaWNlZFRvQXJyYXkoX2V2ZW50JGdldFRhcmdldFJhbmdlLCAxKSxcbiAgICAgICAgICB0YXJnZXRSYW5nZSA9IF9ldmVudCRnZXRUYXJnZXRSYW5nZTJbMF07XG4gICAgICAgIGlmICh0YXJnZXRSYW5nZSkge1xuICAgICAgICAgIHZhciBfcmFuZ2UgPSBSZWFjdEVkaXRvci50b1NsYXRlUmFuZ2UoZWRpdG9yLCB0YXJnZXRSYW5nZSwge1xuICAgICAgICAgICAgZXhhY3RNYXRjaDogZmFsc2UsXG4gICAgICAgICAgICBzdXBwcmVzc1Rocm93OiBmYWxzZVxuICAgICAgICAgIH0pO1xuICAgICAgICAgIGlmICghc2VsZWN0aW9uIHx8ICFzbGF0ZS5SYW5nZS5lcXVhbHMoc2VsZWN0aW9uLCBfcmFuZ2UpKSB7XG4gICAgICAgICAgICBfbmF0aXZlID0gZmFsc2U7XG4gICAgICAgICAgICB2YXIgc2VsZWN0aW9uUmVmID0gIWlzQ29tcG9zaXRpb25DaGFuZ2UgJiYgZWRpdG9yLnNlbGVjdGlvbiAmJiBzbGF0ZS5FZGl0b3IucmFuZ2VSZWYoZWRpdG9yLCBlZGl0b3Iuc2VsZWN0aW9uKTtcbiAgICAgICAgICAgIHNsYXRlLlRyYW5zZm9ybXMuc2VsZWN0KGVkaXRvciwgX3JhbmdlKTtcbiAgICAgICAgICAgIGlmIChzZWxlY3Rpb25SZWYpIHtcbiAgICAgICAgICAgICAgc2xhdGVEb20uRURJVE9SX1RPX1VTRVJfU0VMRUNUSU9OLnNldChlZGl0b3IsIHNlbGVjdGlvblJlZik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICAvLyBDb21wb3NpdGlvbiBjaGFuZ2UgdHlwZXMgb2NjdXIgd2hpbGUgYSB1c2VyIGlzIGNvbXBvc2luZyB0ZXh0IGFuZCBjYW4ndCBiZVxuICAgICAgLy8gY2FuY2VsbGVkLiBMZXQgdGhlbSB0aHJvdWdoIGFuZCB3YWl0IGZvciB0aGUgY29tcG9zaXRpb24gdG8gZW5kLlxuICAgICAgaWYgKGlzQ29tcG9zaXRpb25DaGFuZ2UpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgaWYgKCFfbmF0aXZlKSB7XG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICB9XG4gICAgICAvLyBDT01QQVQ6IElmIHRoZSBzZWxlY3Rpb24gaXMgZXhwYW5kZWQsIGV2ZW4gaWYgdGhlIGNvbW1hbmQgc2VlbXMgbGlrZVxuICAgICAgLy8gYSBkZWxldGUgZm9yd2FyZC9iYWNrd2FyZCBjb21tYW5kIGl0IHNob3VsZCBkZWxldGUgdGhlIHNlbGVjdGlvbi5cbiAgICAgIGlmIChzZWxlY3Rpb24gJiYgc2xhdGUuUmFuZ2UuaXNFeHBhbmRlZChzZWxlY3Rpb24pICYmIHR5cGUuc3RhcnRzV2l0aCgnZGVsZXRlJykpIHtcbiAgICAgICAgdmFyIGRpcmVjdGlvbiA9IHR5cGUuZW5kc1dpdGgoJ0JhY2t3YXJkJykgPyAnYmFja3dhcmQnIDogJ2ZvcndhcmQnO1xuICAgICAgICBzbGF0ZS5FZGl0b3IuZGVsZXRlRnJhZ21lbnQoZWRpdG9yLCB7XG4gICAgICAgICAgZGlyZWN0aW9uOiBkaXJlY3Rpb25cbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHN3aXRjaCAodHlwZSkge1xuICAgICAgICBjYXNlICdkZWxldGVCeUNvbXBvc2l0aW9uJzpcbiAgICAgICAgY2FzZSAnZGVsZXRlQnlDdXQnOlxuICAgICAgICBjYXNlICdkZWxldGVCeURyYWcnOlxuICAgICAgICAgIHtcbiAgICAgICAgICAgIHNsYXRlLkVkaXRvci5kZWxldGVGcmFnbWVudChlZGl0b3IpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICBjYXNlICdkZWxldGVDb250ZW50JzpcbiAgICAgICAgY2FzZSAnZGVsZXRlQ29udGVudEZvcndhcmQnOlxuICAgICAgICAgIHtcbiAgICAgICAgICAgIHNsYXRlLkVkaXRvci5kZWxldGVGb3J3YXJkKGVkaXRvcik7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgIGNhc2UgJ2RlbGV0ZUNvbnRlbnRCYWNrd2FyZCc6XG4gICAgICAgICAge1xuICAgICAgICAgICAgc2xhdGUuRWRpdG9yLmRlbGV0ZUJhY2t3YXJkKGVkaXRvcik7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgIGNhc2UgJ2RlbGV0ZUVudGlyZVNvZnRMaW5lJzpcbiAgICAgICAgICB7XG4gICAgICAgICAgICBzbGF0ZS5FZGl0b3IuZGVsZXRlQmFja3dhcmQoZWRpdG9yLCB7XG4gICAgICAgICAgICAgIHVuaXQ6ICdsaW5lJ1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBzbGF0ZS5FZGl0b3IuZGVsZXRlRm9yd2FyZChlZGl0b3IsIHtcbiAgICAgICAgICAgICAgdW5pdDogJ2xpbmUnXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgY2FzZSAnZGVsZXRlSGFyZExpbmVCYWNrd2FyZCc6XG4gICAgICAgICAge1xuICAgICAgICAgICAgc2xhdGUuRWRpdG9yLmRlbGV0ZUJhY2t3YXJkKGVkaXRvciwge1xuICAgICAgICAgICAgICB1bml0OiAnYmxvY2snXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgY2FzZSAnZGVsZXRlU29mdExpbmVCYWNrd2FyZCc6XG4gICAgICAgICAge1xuICAgICAgICAgICAgc2xhdGUuRWRpdG9yLmRlbGV0ZUJhY2t3YXJkKGVkaXRvciwge1xuICAgICAgICAgICAgICB1bml0OiAnbGluZSdcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICBjYXNlICdkZWxldGVIYXJkTGluZUZvcndhcmQnOlxuICAgICAgICAgIHtcbiAgICAgICAgICAgIHNsYXRlLkVkaXRvci5kZWxldGVGb3J3YXJkKGVkaXRvciwge1xuICAgICAgICAgICAgICB1bml0OiAnYmxvY2snXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgY2FzZSAnZGVsZXRlU29mdExpbmVGb3J3YXJkJzpcbiAgICAgICAgICB7XG4gICAgICAgICAgICBzbGF0ZS5FZGl0b3IuZGVsZXRlRm9yd2FyZChlZGl0b3IsIHtcbiAgICAgICAgICAgICAgdW5pdDogJ2xpbmUnXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgY2FzZSAnZGVsZXRlV29yZEJhY2t3YXJkJzpcbiAgICAgICAgICB7XG4gICAgICAgICAgICBzbGF0ZS5FZGl0b3IuZGVsZXRlQmFja3dhcmQoZWRpdG9yLCB7XG4gICAgICAgICAgICAgIHVuaXQ6ICd3b3JkJ1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgIGNhc2UgJ2RlbGV0ZVdvcmRGb3J3YXJkJzpcbiAgICAgICAgICB7XG4gICAgICAgICAgICBzbGF0ZS5FZGl0b3IuZGVsZXRlRm9yd2FyZChlZGl0b3IsIHtcbiAgICAgICAgICAgICAgdW5pdDogJ3dvcmQnXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgY2FzZSAnaW5zZXJ0TGluZUJyZWFrJzpcbiAgICAgICAgICBzbGF0ZS5FZGl0b3IuaW5zZXJ0U29mdEJyZWFrKGVkaXRvcik7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ2luc2VydFBhcmFncmFwaCc6XG4gICAgICAgICAge1xuICAgICAgICAgICAgc2xhdGUuRWRpdG9yLmluc2VydEJyZWFrKGVkaXRvcik7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgIGNhc2UgJ2luc2VydEZyb21Db21wb3NpdGlvbic6XG4gICAgICAgIGNhc2UgJ2luc2VydEZyb21Ecm9wJzpcbiAgICAgICAgY2FzZSAnaW5zZXJ0RnJvbVBhc3RlJzpcbiAgICAgICAgY2FzZSAnaW5zZXJ0RnJvbVlhbmsnOlxuICAgICAgICBjYXNlICdpbnNlcnRSZXBsYWNlbWVudFRleHQnOlxuICAgICAgICBjYXNlICdpbnNlcnRUZXh0JzpcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpZiAodHlwZSA9PT0gJ2luc2VydEZyb21Db21wb3NpdGlvbicpIHtcbiAgICAgICAgICAgICAgLy8gQ09NUEFUOiBpbiBTYWZhcmksIGBjb21wb3NpdGlvbmVuZGAgaXMgZGlzcGF0Y2hlZCBhZnRlciB0aGVcbiAgICAgICAgICAgICAgLy8gYGJlZm9yZWlucHV0YCBmb3IgXCJpbnNlcnRGcm9tQ29tcG9zaXRpb25cIi4gQnV0IGlmIHdlIHdhaXQgZm9yIGl0XG4gICAgICAgICAgICAgIC8vIHRoZW4gd2Ugd2lsbCBhYm9ydCBiZWNhdXNlIHdlJ3JlIHN0aWxsIGNvbXBvc2luZyBhbmQgdGhlIHNlbGVjdGlvblxuICAgICAgICAgICAgICAvLyB3b24ndCBiZSB1cGRhdGVkIHByb3Blcmx5LlxuICAgICAgICAgICAgICAvLyBodHRwczovL3d3dy53My5vcmcvVFIvaW5wdXQtZXZlbnRzLTIvXG4gICAgICAgICAgICAgIGlmIChSZWFjdEVkaXRvci5pc0NvbXBvc2luZyhlZGl0b3IpKSB7XG4gICAgICAgICAgICAgICAgc2V0SXNDb21wb3NpbmcoZmFsc2UpO1xuICAgICAgICAgICAgICAgIHNsYXRlRG9tLklTX0NPTVBPU0lORy5zZXQoZWRpdG9yLCBmYWxzZSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIHVzZSBhIHdlYWsgY29tcGFyaXNvbiBpbnN0ZWFkIG9mICdpbnN0YW5jZW9mJyB0byBhbGxvd1xuICAgICAgICAgICAgLy8gcHJvZ3JhbW1hdGljIGFjY2VzcyBvZiBwYXN0ZSBldmVudHMgY29taW5nIGZyb20gZXh0ZXJuYWwgd2luZG93c1xuICAgICAgICAgICAgLy8gbGlrZSBjeXByZXNzIHdoZXJlIGN5LndpbmRvdyBkb2VzIG5vdCB3b3JrIHJlYWxpYmx5XG4gICAgICAgICAgICBpZiAoKGRhdGEgPT09IG51bGwgfHwgZGF0YSA9PT0gdm9pZCAwID8gdm9pZCAwIDogZGF0YS5jb25zdHJ1Y3Rvci5uYW1lKSA9PT0gJ0RhdGFUcmFuc2ZlcicpIHtcbiAgICAgICAgICAgICAgUmVhY3RFZGl0b3IuaW5zZXJ0RGF0YShlZGl0b3IsIGRhdGEpO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgZGF0YSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgLy8gT25seSBpbnNlcnRUZXh0IG9wZXJhdGlvbnMgdXNlIHRoZSBuYXRpdmUgZnVuY3Rpb25hbGl0eSwgZm9yIG5vdy5cbiAgICAgICAgICAgICAgLy8gUG90ZW50aWFsbHkgZXhwYW5kIHRvIHNpbmdsZSBjaGFyYWN0ZXIgZGVsZXRlcywgYXMgd2VsbC5cbiAgICAgICAgICAgICAgaWYgKF9uYXRpdmUpIHtcbiAgICAgICAgICAgICAgICBkZWZlcnJlZE9wZXJhdGlvbnMuY3VycmVudC5wdXNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgIHJldHVybiBzbGF0ZS5FZGl0b3IuaW5zZXJ0VGV4dChlZGl0b3IsIGRhdGEpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHNsYXRlLkVkaXRvci5pbnNlcnRUZXh0KGVkaXRvciwgZGF0YSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgIH1cbiAgICAgIC8vIFJlc3RvcmUgdGhlIGFjdHVhbCB1c2VyIHNlY3Rpb24gaWYgbm90aGluZyBtYW51YWxseSBzZXQgaXQuXG4gICAgICB2YXIgdG9SZXN0b3JlID0gKF9FRElUT1JfVE9fVVNFUl9TRUxFQyA9IHNsYXRlRG9tLkVESVRPUl9UT19VU0VSX1NFTEVDVElPTi5nZXQoZWRpdG9yKSkgPT09IG51bGwgfHwgX0VESVRPUl9UT19VU0VSX1NFTEVDID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfRURJVE9SX1RPX1VTRVJfU0VMRUMudW5yZWYoKTtcbiAgICAgIHNsYXRlRG9tLkVESVRPUl9UT19VU0VSX1NFTEVDVElPTltcImRlbGV0ZVwiXShlZGl0b3IpO1xuICAgICAgaWYgKHRvUmVzdG9yZSAmJiAoIWVkaXRvci5zZWxlY3Rpb24gfHwgIXNsYXRlLlJhbmdlLmVxdWFscyhlZGl0b3Iuc2VsZWN0aW9uLCB0b1Jlc3RvcmUpKSkge1xuICAgICAgICBzbGF0ZS5UcmFuc2Zvcm1zLnNlbGVjdChlZGl0b3IsIHRvUmVzdG9yZSk7XG4gICAgICB9XG4gICAgfVxuICB9LCBbZWRpdG9yLCBvbkRPTVNlbGVjdGlvbkNoYW5nZSwgb25Vc2VySW5wdXQsIHByb3BzT25ET01CZWZvcmVJbnB1dCwgcmVhZE9ubHksIHNjaGVkdWxlT25ET01TZWxlY3Rpb25DaGFuZ2VdKTtcbiAgdmFyIGNhbGxiYWNrUmVmID0gUmVhY3QudXNlQ2FsbGJhY2soZnVuY3Rpb24gKG5vZGUpIHtcbiAgICBpZiAobm9kZSA9PSBudWxsKSB7XG4gICAgICBvbkRPTVNlbGVjdGlvbkNoYW5nZS5jYW5jZWwoKTtcbiAgICAgIHNjaGVkdWxlT25ET01TZWxlY3Rpb25DaGFuZ2UuY2FuY2VsKCk7XG4gICAgICBzbGF0ZURvbS5FRElUT1JfVE9fRUxFTUVOVFtcImRlbGV0ZVwiXShlZGl0b3IpO1xuICAgICAgc2xhdGVEb20uTk9ERV9UT19FTEVNRU5UW1wiZGVsZXRlXCJdKGVkaXRvcik7XG4gICAgICBpZiAocmVmLmN1cnJlbnQgJiYgc2xhdGVEb20uSEFTX0JFRk9SRV9JTlBVVF9TVVBQT1JUKSB7XG4gICAgICAgIC8vIEB0cy1pZ25vcmUgVGhlIGBiZWZvcmVpbnB1dGAgZXZlbnQgaXNuJ3QgcmVjb2duaXplZC5cbiAgICAgICAgcmVmLmN1cnJlbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcignYmVmb3JlaW5wdXQnLCBvbkRPTUJlZm9yZUlucHV0KTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgLy8gQXR0YWNoIGEgbmF0aXZlIERPTSBldmVudCBoYW5kbGVyIGZvciBgYmVmb3JlaW5wdXRgIGV2ZW50cywgYmVjYXVzZSBSZWFjdCdzXG4gICAgICAvLyBidWlsdC1pbiBgb25CZWZvcmVJbnB1dGAgaXMgYWN0dWFsbHkgYSBsZWFreSBwb2x5ZmlsbCB0aGF0IGRvZXNuJ3QgZXhwb3NlXG4gICAgICAvLyByZWFsIGBiZWZvcmVpbnB1dGAgZXZlbnRzIHNhZGx5Li4uICgyMDE5LzExLzA0KVxuICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JlYWN0L2lzc3Vlcy8xMTIxMVxuICAgICAgaWYgKHNsYXRlRG9tLkhBU19CRUZPUkVfSU5QVVRfU1VQUE9SVCkge1xuICAgICAgICAvLyBAdHMtaWdub3JlIFRoZSBgYmVmb3JlaW5wdXRgIGV2ZW50IGlzbid0IHJlY29nbml6ZWQuXG4gICAgICAgIG5vZGUuYWRkRXZlbnRMaXN0ZW5lcignYmVmb3JlaW5wdXQnLCBvbkRPTUJlZm9yZUlucHV0KTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmVmLmN1cnJlbnQgPSBub2RlO1xuICAgIGlmICh0eXBlb2YgZm9yd2FyZGVkUmVmID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBmb3J3YXJkZWRSZWYobm9kZSk7XG4gICAgfSBlbHNlIGlmIChmb3J3YXJkZWRSZWYpIHtcbiAgICAgIGZvcndhcmRlZFJlZi5jdXJyZW50ID0gbm9kZTtcbiAgICB9XG4gIH0sIFtvbkRPTVNlbGVjdGlvbkNoYW5nZSwgc2NoZWR1bGVPbkRPTVNlbGVjdGlvbkNoYW5nZSwgZWRpdG9yLCBvbkRPTUJlZm9yZUlucHV0LCBmb3J3YXJkZWRSZWZdKTtcbiAgdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHdpbmRvdyA9IFJlYWN0RWRpdG9yLmdldFdpbmRvdyhlZGl0b3IpO1xuICAgIC8vIENPTVBBVDogSW4gQ2hyb21lLCBgc2VsZWN0aW9uY2hhbmdlYCBldmVudHMgY2FuIGZpcmUgd2hlbiA8aW5wdXQ+IGFuZFxuICAgIC8vIDx0ZXh0YXJlYT4gZWxlbWVudHMgYXJlIGFwcGVuZGVkIHRvIHRoZSBET00sIGNhdXNpbmdcbiAgICAvLyBgZWRpdG9yLnNlbGVjdGlvbmAgdG8gYmUgb3ZlcndyaXR0ZW4gaW4gc29tZSBjaXJjdW1zdGFuY2VzLlxuICAgIC8vICgyMDI1LzAxLzE2KSBodHRwczovL2lzc3Vlcy5jaHJvbWl1bS5vcmcvaXNzdWVzLzM4OTM2ODQxMlxuICAgIHZhciBvblNlbGVjdGlvbkNoYW5nZSA9IGZ1bmN0aW9uIG9uU2VsZWN0aW9uQ2hhbmdlKF9yZWYpIHtcbiAgICAgIHZhciB0YXJnZXQgPSBfcmVmLnRhcmdldDtcbiAgICAgIHZhciB0YXJnZXRFbGVtZW50ID0gdGFyZ2V0IGluc3RhbmNlb2YgSFRNTEVsZW1lbnQgPyB0YXJnZXQgOiBudWxsO1xuICAgICAgdmFyIHRhcmdldFRhZ05hbWUgPSB0YXJnZXRFbGVtZW50ID09PSBudWxsIHx8IHRhcmdldEVsZW1lbnQgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHRhcmdldEVsZW1lbnQudGFnTmFtZTtcbiAgICAgIGlmICh0YXJnZXRUYWdOYW1lID09PSAnSU5QVVQnIHx8IHRhcmdldFRhZ05hbWUgPT09ICdURVhUQVJFQScpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgc2NoZWR1bGVPbkRPTVNlbGVjdGlvbkNoYW5nZSgpO1xuICAgIH07XG4gICAgLy8gQXR0YWNoIGEgbmF0aXZlIERPTSBldmVudCBoYW5kbGVyIGZvciBgc2VsZWN0aW9uY2hhbmdlYCwgYmVjYXVzZSBSZWFjdCdzXG4gICAgLy8gYnVpbHQtaW4gYG9uU2VsZWN0YCBoYW5kbGVyIGRvZXNuJ3QgZmlyZSBmb3IgYWxsIHNlbGVjdGlvbiBjaGFuZ2VzLiBJdCdzXG4gICAgLy8gYSBsZWFreSBwb2x5ZmlsbCB0aGF0IG9ubHkgZmlyZXMgb24ga2V5cHJlc3NlcyBvciBjbGlja3MuIEluc3RlYWQsIHdlXG4gICAgLy8gd2FudCB0byBmaXJlIGZvciBhbnkgY2hhbmdlIHRvIHRoZSBzZWxlY3Rpb24gaW5zaWRlIHRoZSBlZGl0b3IuXG4gICAgLy8gKDIwMTkvMTEvMDQpIGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWFjdC9pc3N1ZXMvNTc4NVxuICAgIHdpbmRvdy5kb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdzZWxlY3Rpb25jaGFuZ2UnLCBvblNlbGVjdGlvbkNoYW5nZSk7XG4gICAgLy8gTGlzdGVuIGZvciBkcmFnZW5kIGFuZCBkcm9wIGdsb2JhbGx5LiBJbiBGaXJlZm94LCBpZiBhIGRyb3AgaGFuZGxlclxuICAgIC8vIGluaXRpYXRlcyBhbiBvcGVyYXRpb24gdGhhdCBjYXVzZXMgdGhlIG9yaWdpbmFsbHkgZHJhZ2dlZCBlbGVtZW50IHRvXG4gICAgLy8gdW5tb3VudCwgdGhhdCBlbGVtZW50IHdpbGwgbm90IGVtaXQgYSBkcmFnZW5kIGV2ZW50LiAoMjAyNC8wNi8yMSlcbiAgICB2YXIgc3RvcHBlZERyYWdnaW5nID0gZnVuY3Rpb24gc3RvcHBlZERyYWdnaW5nKCkge1xuICAgICAgc3RhdGUuaXNEcmFnZ2luZ0ludGVybmFsbHkgPSBmYWxzZTtcbiAgICB9O1xuICAgIHdpbmRvdy5kb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdkcmFnZW5kJywgc3RvcHBlZERyYWdnaW5nKTtcbiAgICB3aW5kb3cuZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignZHJvcCcsIHN0b3BwZWREcmFnZ2luZyk7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIHdpbmRvdy5kb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdzZWxlY3Rpb25jaGFuZ2UnLCBvblNlbGVjdGlvbkNoYW5nZSk7XG4gICAgICB3aW5kb3cuZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcignZHJhZ2VuZCcsIHN0b3BwZWREcmFnZ2luZyk7XG4gICAgICB3aW5kb3cuZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcignZHJvcCcsIHN0b3BwZWREcmFnZ2luZyk7XG4gICAgfTtcbiAgfSwgW3NjaGVkdWxlT25ET01TZWxlY3Rpb25DaGFuZ2UsIHN0YXRlXSk7XG4gIHZhciBkZWNvcmF0aW9ucyA9IGRlY29yYXRlKFtlZGl0b3IsIFtdXSk7XG4gIHZhciBzaG93UGxhY2Vob2xkZXIgPSBwbGFjZWhvbGRlciAmJiBlZGl0b3IuY2hpbGRyZW4ubGVuZ3RoID09PSAxICYmIEFycmF5LmZyb20oc2xhdGUuTm9kZS50ZXh0cyhlZGl0b3IpKS5sZW5ndGggPT09IDEgJiYgc2xhdGUuTm9kZS5zdHJpbmcoZWRpdG9yKSA9PT0gJycgJiYgIWlzQ29tcG9zaW5nO1xuICB2YXIgcGxhY2VIb2xkZXJSZXNpemVIYW5kbGVyID0gUmVhY3QudXNlQ2FsbGJhY2soZnVuY3Rpb24gKHBsYWNlaG9sZGVyRWwpIHtcbiAgICBpZiAocGxhY2Vob2xkZXJFbCAmJiBzaG93UGxhY2Vob2xkZXIpIHtcbiAgICAgIHZhciBfcGxhY2Vob2xkZXJFbCRnZXRCb3U7XG4gICAgICBzZXRQbGFjZWhvbGRlckhlaWdodCgoX3BsYWNlaG9sZGVyRWwkZ2V0Qm91ID0gcGxhY2Vob2xkZXJFbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKSkgPT09IG51bGwgfHwgX3BsYWNlaG9sZGVyRWwkZ2V0Qm91ID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfcGxhY2Vob2xkZXJFbCRnZXRCb3UuaGVpZ2h0KTtcbiAgICB9IGVsc2Uge1xuICAgICAgc2V0UGxhY2Vob2xkZXJIZWlnaHQodW5kZWZpbmVkKTtcbiAgICB9XG4gIH0sIFtzaG93UGxhY2Vob2xkZXJdKTtcbiAgaWYgKHNob3dQbGFjZWhvbGRlcikge1xuICAgIHZhciBfZGVjb3JhdGlvbnMkcHVzaDtcbiAgICB2YXIgc3RhcnQgPSBzbGF0ZS5FZGl0b3Iuc3RhcnQoZWRpdG9yLCBbXSk7XG4gICAgZGVjb3JhdGlvbnMucHVzaCgoX2RlY29yYXRpb25zJHB1c2ggPSB7fSwgX2RlZmluZVByb3BlcnR5KF9kZWNvcmF0aW9ucyRwdXNoLCBzbGF0ZURvbS5QTEFDRUhPTERFUl9TWU1CT0wsIHRydWUpLCBfZGVmaW5lUHJvcGVydHkoX2RlY29yYXRpb25zJHB1c2gsIFwicGxhY2Vob2xkZXJcIiwgcGxhY2Vob2xkZXIpLCBfZGVmaW5lUHJvcGVydHkoX2RlY29yYXRpb25zJHB1c2gsIFwib25QbGFjZWhvbGRlclJlc2l6ZVwiLCBwbGFjZUhvbGRlclJlc2l6ZUhhbmRsZXIpLCBfZGVmaW5lUHJvcGVydHkoX2RlY29yYXRpb25zJHB1c2gsIFwiYW5jaG9yXCIsIHN0YXJ0KSwgX2RlZmluZVByb3BlcnR5KF9kZWNvcmF0aW9ucyRwdXNoLCBcImZvY3VzXCIsIHN0YXJ0KSwgX2RlY29yYXRpb25zJHB1c2gpKTtcbiAgfVxuICB2YXIgbWFya3MgPSBlZGl0b3IubWFya3M7XG4gIHN0YXRlLmhhc01hcmtQbGFjZWhvbGRlciA9IGZhbHNlO1xuICBpZiAoZWRpdG9yLnNlbGVjdGlvbiAmJiBzbGF0ZS5SYW5nZS5pc0NvbGxhcHNlZChlZGl0b3Iuc2VsZWN0aW9uKSAmJiBtYXJrcykge1xuICAgIHZhciBhbmNob3IgPSBlZGl0b3Iuc2VsZWN0aW9uLmFuY2hvcjtcbiAgICB2YXIgbGVhZiA9IHNsYXRlLk5vZGUubGVhZihlZGl0b3IsIGFuY2hvci5wYXRoKTtcbiAgICBsZWFmLnRleHQ7XG4gICAgICB2YXIgcmVzdCA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhsZWFmLCBfZXhjbHVkZWQyKTtcbiAgICAvLyBXaGlsZSBtYXJrcyBpc24ndCBhICdjb21wbGV0ZScgdGV4dCwgd2UgY2FuIHN0aWxsIHVzZSBsb29zZSBUZXh0LmVxdWFsc1xuICAgIC8vIGhlcmUgd2hpY2ggb25seSBjb21wYXJlcyBtYXJrcyBhbnl3YXkuXG4gICAgaWYgKCFzbGF0ZS5UZXh0LmVxdWFscyhsZWFmLCBtYXJrcywge1xuICAgICAgbG9vc2U6IHRydWVcbiAgICB9KSkge1xuICAgICAgc3RhdGUuaGFzTWFya1BsYWNlaG9sZGVyID0gdHJ1ZTtcbiAgICAgIHZhciB1bnNldCA9IE9iamVjdC5mcm9tRW50cmllcyhPYmplY3Qua2V5cyhyZXN0KS5tYXAoZnVuY3Rpb24gKG1hcmspIHtcbiAgICAgICAgcmV0dXJuIFttYXJrLCBudWxsXTtcbiAgICAgIH0pKTtcbiAgICAgIGRlY29yYXRpb25zLnB1c2goX29iamVjdFNwcmVhZChfb2JqZWN0U3ByZWFkKF9vYmplY3RTcHJlYWQoX2RlZmluZVByb3BlcnR5KHt9LCBzbGF0ZURvbS5NQVJLX1BMQUNFSE9MREVSX1NZTUJPTCwgdHJ1ZSksIHVuc2V0KSwgbWFya3MpLCB7fSwge1xuICAgICAgICBhbmNob3I6IGFuY2hvcixcbiAgICAgICAgZm9jdXM6IGFuY2hvclxuICAgICAgfSkpO1xuICAgIH1cbiAgfVxuICAvLyBVcGRhdGUgRURJVE9SX1RPX01BUktfUExBQ0VIT0xERVJfTUFSS1MgaW4gc2V0VGltZW91dCB1c2VFZmZlY3QgdG8gZW5zdXJlIHdlIGRvbid0IHNldCBpdFxuICAvLyBiZWZvcmUgd2UgcmVjZWl2ZSB0aGUgY29tcG9zaXRpb24gZW5kIGV2ZW50LlxuICBSZWFjdC51c2VFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIHNlbGVjdGlvbiA9IGVkaXRvci5zZWxlY3Rpb247XG4gICAgICBpZiAoc2VsZWN0aW9uKSB7XG4gICAgICAgIHZhciBfYW5jaG9yID0gc2VsZWN0aW9uLmFuY2hvcjtcbiAgICAgICAgdmFyIF90ZXh0ID0gc2xhdGUuTm9kZS5sZWFmKGVkaXRvciwgX2FuY2hvci5wYXRoKTtcbiAgICAgICAgLy8gV2hpbGUgbWFya3MgaXNuJ3QgYSAnY29tcGxldGUnIHRleHQsIHdlIGNhbiBzdGlsbCB1c2UgbG9vc2UgVGV4dC5lcXVhbHNcbiAgICAgICAgLy8gaGVyZSB3aGljaCBvbmx5IGNvbXBhcmVzIG1hcmtzIGFueXdheS5cbiAgICAgICAgaWYgKG1hcmtzICYmICFzbGF0ZS5UZXh0LmVxdWFscyhfdGV4dCwgbWFya3MsIHtcbiAgICAgICAgICBsb29zZTogdHJ1ZVxuICAgICAgICB9KSkge1xuICAgICAgICAgIHNsYXRlRG9tLkVESVRPUl9UT19QRU5ESU5HX0lOU0VSVElPTl9NQVJLUy5zZXQoZWRpdG9yLCBtYXJrcyk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBzbGF0ZURvbS5FRElUT1JfVE9fUEVORElOR19JTlNFUlRJT05fTUFSS1NbXCJkZWxldGVcIl0oZWRpdG9yKTtcbiAgICB9KTtcbiAgfSk7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChSZWFkT25seUNvbnRleHQuUHJvdmlkZXIsIHtcbiAgICB2YWx1ZTogcmVhZE9ubHlcbiAgfSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoQ29tcG9zaW5nQ29udGV4dC5Qcm92aWRlciwge1xuICAgIHZhbHVlOiBpc0NvbXBvc2luZ1xuICB9LCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChEZWNvcmF0ZUNvbnRleHQuUHJvdmlkZXIsIHtcbiAgICB2YWx1ZTogZGVjb3JhdGVcbiAgfSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoUmVzdG9yZURPTSwge1xuICAgIG5vZGU6IHJlZixcbiAgICByZWNlaXZlZFVzZXJJbnB1dDogcmVjZWl2ZWRVc2VySW5wdXRcbiAgfSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoQ29tcG9uZW50LCBfb2JqZWN0U3ByZWFkKF9vYmplY3RTcHJlYWQoe1xuICAgIHJvbGU6IHJlYWRPbmx5ID8gdW5kZWZpbmVkIDogJ3RleHRib3gnLFxuICAgIFwiYXJpYS1tdWx0aWxpbmVcIjogcmVhZE9ubHkgPyB1bmRlZmluZWQgOiB0cnVlXG4gIH0sIGF0dHJpYnV0ZXMpLCB7fSwge1xuICAgIC8vIENPTVBBVDogQ2VydGFpbiBicm93c2VycyBkb24ndCBzdXBwb3J0IHRoZSBgYmVmb3JlaW5wdXRgIGV2ZW50LCBzbyB3ZSdkXG4gICAgLy8gaGF2ZSB0byB1c2UgaGFja3MgdG8gbWFrZSB0aGVzZSByZXBsYWNlbWVudC1iYXNlZCBmZWF0dXJlcyB3b3JrLlxuICAgIC8vIEZvciBTU1Igc2l0dWF0aW9ucyBIQVNfQkVGT1JFX0lOUFVUX1NVUFBPUlQgaXMgZmFsc2UgYW5kIHJlc3VsdHMgaW4gcHJvcFxuICAgIC8vIG1pc21hdGNoIHdhcm5pbmcgYXBwIG1vdmVzIHRvIGJyb3dzZXIuIFBhc3MtdGhyb3VnaCBjb25zdW1lciBwcm9wcyB3aGVuXG4gICAgLy8gbm90IENBTl9VU0VfRE9NIChTU1IpIGFuZCBkZWZhdWx0IHRvIGZhbHN5IHZhbHVlXG4gICAgc3BlbGxDaGVjazogc2xhdGVEb20uSEFTX0JFRk9SRV9JTlBVVF9TVVBQT1JUIHx8ICFzbGF0ZURvbS5DQU5fVVNFX0RPTSA/IGF0dHJpYnV0ZXMuc3BlbGxDaGVjayA6IGZhbHNlLFxuICAgIGF1dG9Db3JyZWN0OiBzbGF0ZURvbS5IQVNfQkVGT1JFX0lOUFVUX1NVUFBPUlQgfHwgIXNsYXRlRG9tLkNBTl9VU0VfRE9NID8gYXR0cmlidXRlcy5hdXRvQ29ycmVjdCA6ICdmYWxzZScsXG4gICAgYXV0b0NhcGl0YWxpemU6IHNsYXRlRG9tLkhBU19CRUZPUkVfSU5QVVRfU1VQUE9SVCB8fCAhc2xhdGVEb20uQ0FOX1VTRV9ET00gPyBhdHRyaWJ1dGVzLmF1dG9DYXBpdGFsaXplIDogJ2ZhbHNlJyxcbiAgICBcImRhdGEtc2xhdGUtZWRpdG9yXCI6IHRydWUsXG4gICAgXCJkYXRhLXNsYXRlLW5vZGVcIjogXCJ2YWx1ZVwiLFxuICAgIC8vIGV4cGxpY2l0bHkgc2V0IHRoaXNcbiAgICBjb250ZW50RWRpdGFibGU6ICFyZWFkT25seSxcbiAgICAvLyBpbiBzb21lIGNhc2VzLCBhIGRlY29yYXRpb24gbmVlZHMgYWNjZXNzIHRvIHRoZSByYW5nZSAvIHNlbGVjdGlvbiB0byBkZWNvcmF0ZSBhIHRleHQgbm9kZSxcbiAgICAvLyB0aGVuIHlvdSB3aWxsIHNlbGVjdCB0aGUgd2hvbGUgdGV4dCBub2RlIHdoZW4geW91IHNlbGVjdCBwYXJ0IHRoZSBvZiB0ZXh0XG4gICAgLy8gdGhpcyBtYWdpYyB6SW5kZXg9XCItMVwiIHdpbGwgZml4IGl0XG4gICAgemluZGV4OiAtMSxcbiAgICBzdXBwcmVzc0NvbnRlbnRFZGl0YWJsZVdhcm5pbmc6IHRydWUsXG4gICAgcmVmOiBjYWxsYmFja1JlZixcbiAgICBzdHlsZTogX29iamVjdFNwcmVhZChfb2JqZWN0U3ByZWFkKHt9LCBkaXNhYmxlRGVmYXVsdFN0eWxlcyA/IHt9IDogX29iamVjdFNwcmVhZCh7XG4gICAgICAvLyBBbGxvdyBwb3NpdGlvbmluZyByZWxhdGl2ZSB0byB0aGUgZWRpdGFibGUgZWxlbWVudC5cbiAgICAgIHBvc2l0aW9uOiAncmVsYXRpdmUnLFxuICAgICAgLy8gUHJlc2VydmUgYWRqYWNlbnQgd2hpdGVzcGFjZSBhbmQgbmV3IGxpbmVzLlxuICAgICAgd2hpdGVTcGFjZTogJ3ByZS13cmFwJyxcbiAgICAgIC8vIEFsbG93IHdvcmRzIHRvIGJyZWFrIGlmIHRoZXkgYXJlIHRvbyBsb25nLlxuICAgICAgd29yZFdyYXA6ICdicmVhay13b3JkJ1xuICAgIH0sIHBsYWNlaG9sZGVySGVpZ2h0ID8ge1xuICAgICAgbWluSGVpZ2h0OiBwbGFjZWhvbGRlckhlaWdodFxuICAgIH0gOiB7fSkpLCB1c2VyU3R5bGUpLFxuICAgIG9uQmVmb3JlSW5wdXQ6IFJlYWN0LnVzZUNhbGxiYWNrKGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgLy8gQ09NUEFUOiBDZXJ0YWluIGJyb3dzZXJzIGRvbid0IHN1cHBvcnQgdGhlIGBiZWZvcmVpbnB1dGAgZXZlbnQsIHNvIHdlXG4gICAgICAvLyBmYWxsIGJhY2sgdG8gUmVhY3QncyBsZWFreSBwb2x5ZmlsbCBpbnN0ZWFkIGp1c3QgZm9yIGl0LiBJdFxuICAgICAgLy8gb25seSB3b3JrcyBmb3IgdGhlIGBpbnNlcnRUZXh0YCBpbnB1dCB0eXBlLlxuICAgICAgaWYgKCFzbGF0ZURvbS5IQVNfQkVGT1JFX0lOUFVUX1NVUFBPUlQgJiYgIXJlYWRPbmx5ICYmICFpc0V2ZW50SGFuZGxlZChldmVudCwgYXR0cmlidXRlcy5vbkJlZm9yZUlucHV0KSAmJiBSZWFjdEVkaXRvci5oYXNTZWxlY3RhYmxlVGFyZ2V0KGVkaXRvciwgZXZlbnQudGFyZ2V0KSkge1xuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICBpZiAoIVJlYWN0RWRpdG9yLmlzQ29tcG9zaW5nKGVkaXRvcikpIHtcbiAgICAgICAgICB2YXIgX3RleHQyID0gZXZlbnQuZGF0YTtcbiAgICAgICAgICBzbGF0ZS5FZGl0b3IuaW5zZXJ0VGV4dChlZGl0b3IsIF90ZXh0Mik7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LCBbYXR0cmlidXRlcy5vbkJlZm9yZUlucHV0LCBlZGl0b3IsIHJlYWRPbmx5XSksXG4gICAgb25JbnB1dDogUmVhY3QudXNlQ2FsbGJhY2soZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICBpZiAoaXNFdmVudEhhbmRsZWQoZXZlbnQsIGF0dHJpYnV0ZXMub25JbnB1dCkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgaWYgKGFuZHJvaWRJbnB1dE1hbmFnZXJSZWYuY3VycmVudCkge1xuICAgICAgICBhbmRyb2lkSW5wdXRNYW5hZ2VyUmVmLmN1cnJlbnQuaGFuZGxlSW5wdXQoKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgLy8gRmx1c2ggbmF0aXZlIG9wZXJhdGlvbnMsIGFzIG5hdGl2ZSBldmVudHMgd2lsbCBoYXZlIHByb3BvZ2F0ZWRcbiAgICAgIC8vIGFuZCB3ZSBjYW4gY29ycmVjdGx5IGNvbXBhcmUgRE9NIHRleHQgdmFsdWVzIGluIGNvbXBvbmVudHNcbiAgICAgIC8vIHRvIHN0b3AgcmVuZGVyaW5nLCBzbyB0aGF0IGJyb3dzZXIgZnVuY3Rpb25zIGxpa2UgYXV0b2NvcnJlY3RcbiAgICAgIC8vIGFuZCBzcGVsbGNoZWNrIHdvcmsgYXMgZXhwZWN0ZWQuXG4gICAgICB2YXIgX2l0ZXJhdG9yID0gX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIoZGVmZXJyZWRPcGVyYXRpb25zLmN1cnJlbnQpLFxuICAgICAgICBfc3RlcDtcbiAgICAgIHRyeSB7XG4gICAgICAgIGZvciAoX2l0ZXJhdG9yLnMoKTsgIShfc3RlcCA9IF9pdGVyYXRvci5uKCkpLmRvbmU7KSB7XG4gICAgICAgICAgdmFyIG9wID0gX3N0ZXAudmFsdWU7XG4gICAgICAgICAgb3AoKTtcbiAgICAgICAgfVxuICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgIF9pdGVyYXRvci5lKGVycik7XG4gICAgICB9IGZpbmFsbHkge1xuICAgICAgICBfaXRlcmF0b3IuZigpO1xuICAgICAgfVxuICAgICAgZGVmZXJyZWRPcGVyYXRpb25zLmN1cnJlbnQgPSBbXTtcbiAgICAgIC8vIENPTVBBVDogU2luY2UgYGJlZm9yZWlucHV0YCBkb2Vzbid0IGZ1bGx5IGBwcmV2ZW50RGVmYXVsdGAsXG4gICAgICAvLyB0aGVyZSdzIGEgY2hhbmNlIHRoYXQgY29udGVudCBtaWdodCBiZSBwbGFjZWQgaW4gdGhlIGJyb3dzZXIncyB1bmRvIHN0YWNrLlxuICAgICAgLy8gVGhpcyBtZWFucyB1bmRvIGNhbiBiZSB0cmlnZ2VyZWQgZXZlbiB3aGVuIHRoZSBkaXYgaXMgbm90IGZvY3VzZWQsXG4gICAgICAvLyBhbmQgaXQgb25seSB0cmlnZ2VycyB0aGUgaW5wdXQgZXZlbnQgZm9yIHRoZSBub2RlLiAoMjAyNC8xMC8wOSlcbiAgICAgIGlmICghUmVhY3RFZGl0b3IuaXNGb2N1c2VkKGVkaXRvcikpIHtcbiAgICAgICAgdmFyIF9uYXRpdmUyID0gZXZlbnQubmF0aXZlRXZlbnQ7XG4gICAgICAgIHZhciBtYXliZUhpc3RvcnlFZGl0b3IgPSBlZGl0b3I7XG4gICAgICAgIGlmIChfbmF0aXZlMi5pbnB1dFR5cGUgPT09ICdoaXN0b3J5VW5kbycgJiYgdHlwZW9mIG1heWJlSGlzdG9yeUVkaXRvci51bmRvID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgbWF5YmVIaXN0b3J5RWRpdG9yLnVuZG8oKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKF9uYXRpdmUyLmlucHV0VHlwZSA9PT0gJ2hpc3RvcnlSZWRvJyAmJiB0eXBlb2YgbWF5YmVIaXN0b3J5RWRpdG9yLnJlZG8gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICBtYXliZUhpc3RvcnlFZGl0b3IucmVkbygpO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sIFthdHRyaWJ1dGVzLm9uSW5wdXQsIGVkaXRvcl0pLFxuICAgIG9uQmx1cjogUmVhY3QudXNlQ2FsbGJhY2soZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICBpZiAocmVhZE9ubHkgfHwgc3RhdGUuaXNVcGRhdGluZ1NlbGVjdGlvbiB8fCAhUmVhY3RFZGl0b3IuaGFzU2VsZWN0YWJsZVRhcmdldChlZGl0b3IsIGV2ZW50LnRhcmdldCkgfHwgaXNFdmVudEhhbmRsZWQoZXZlbnQsIGF0dHJpYnV0ZXMub25CbHVyKSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICAvLyBDT01QQVQ6IElmIHRoZSBjdXJyZW50IGBhY3RpdmVFbGVtZW50YCBpcyBzdGlsbCB0aGUgcHJldmlvdXNcbiAgICAgIC8vIG9uZSwgdGhpcyBpcyBkdWUgdG8gdGhlIHdpbmRvdyBiZWluZyBibHVycmVkIHdoZW4gdGhlIHRhYlxuICAgICAgLy8gaXRzZWxmIGJlY29tZXMgdW5mb2N1c2VkLCBzbyB3ZSB3YW50IHRvIGFib3J0IGVhcmx5IHRvIGFsbG93IHRvXG4gICAgICAvLyBlZGl0b3IgdG8gc3RheSBmb2N1c2VkIHdoZW4gdGhlIHRhYiBiZWNvbWVzIGZvY3VzZWQgYWdhaW4uXG4gICAgICB2YXIgcm9vdCA9IFJlYWN0RWRpdG9yLmZpbmREb2N1bWVudE9yU2hhZG93Um9vdChlZGl0b3IpO1xuICAgICAgaWYgKHN0YXRlLmxhdGVzdEVsZW1lbnQgPT09IHJvb3QuYWN0aXZlRWxlbWVudCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICB2YXIgcmVsYXRlZFRhcmdldCA9IGV2ZW50LnJlbGF0ZWRUYXJnZXQ7XG4gICAgICB2YXIgZWwgPSBSZWFjdEVkaXRvci50b0RPTU5vZGUoZWRpdG9yLCBlZGl0b3IpO1xuICAgICAgLy8gQ09NUEFUOiBUaGUgZXZlbnQgc2hvdWxkIGJlIGlnbm9yZWQgaWYgdGhlIGZvY3VzIGlzIHJldHVybmluZ1xuICAgICAgLy8gdG8gdGhlIGVkaXRvciBmcm9tIGFuIGVtYmVkZGVkIGVkaXRhYmxlIGVsZW1lbnQgKGVnLiBhbiA8aW5wdXQ+XG4gICAgICAvLyBlbGVtZW50IGluc2lkZSBhIHZvaWQgbm9kZSkuXG4gICAgICBpZiAocmVsYXRlZFRhcmdldCA9PT0gZWwpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgLy8gQ09NUEFUOiBUaGUgZXZlbnQgc2hvdWxkIGJlIGlnbm9yZWQgaWYgdGhlIGZvY3VzIGlzIG1vdmluZyBmcm9tXG4gICAgICAvLyB0aGUgZWRpdG9yIHRvIGluc2lkZSBhIHZvaWQgbm9kZSdzIHNwYWNlciBlbGVtZW50LlxuICAgICAgaWYgKHNsYXRlRG9tLmlzRE9NRWxlbWVudChyZWxhdGVkVGFyZ2V0KSAmJiByZWxhdGVkVGFyZ2V0Lmhhc0F0dHJpYnV0ZSgnZGF0YS1zbGF0ZS1zcGFjZXInKSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICAvLyBDT01QQVQ6IFRoZSBldmVudCBzaG91bGQgYmUgaWdub3JlZCBpZiB0aGUgZm9jdXMgaXMgbW92aW5nIHRvIGFcbiAgICAgIC8vIG5vbi0gZWRpdGFibGUgc2VjdGlvbiBvZiBhbiBlbGVtZW50IHRoYXQgaXNuJ3QgYSB2b2lkIG5vZGUgKGVnLlxuICAgICAgLy8gYSBsaXN0IGl0ZW0gb2YgdGhlIGNoZWNrIGxpc3QgZXhhbXBsZSkuXG4gICAgICBpZiAocmVsYXRlZFRhcmdldCAhPSBudWxsICYmIHNsYXRlRG9tLmlzRE9NTm9kZShyZWxhdGVkVGFyZ2V0KSAmJiBSZWFjdEVkaXRvci5oYXNET01Ob2RlKGVkaXRvciwgcmVsYXRlZFRhcmdldCkpIHtcbiAgICAgICAgdmFyIG5vZGUgPSBSZWFjdEVkaXRvci50b1NsYXRlTm9kZShlZGl0b3IsIHJlbGF0ZWRUYXJnZXQpO1xuICAgICAgICBpZiAoc2xhdGUuRWxlbWVudC5pc0VsZW1lbnQobm9kZSkgJiYgIWVkaXRvci5pc1ZvaWQobm9kZSkpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIC8vIENPTVBBVDogU2FmYXJpIGRvZXNuJ3QgYWx3YXlzIHJlbW92ZSB0aGUgc2VsZWN0aW9uIGV2ZW4gaWYgdGhlIGNvbnRlbnQtXG4gICAgICAvLyBlZGl0YWJsZSBlbGVtZW50IG5vIGxvbmdlciBoYXMgZm9jdXMuIFJlZmVyIHRvOlxuICAgICAgLy8gaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvMTIzNTMyNDcvZm9yY2UtY29udGVudGVkaXRhYmxlLWRpdi10by1zdG9wLWFjY2VwdGluZy1pbnB1dC1hZnRlci1pdC1sb3Nlcy1mb2N1cy11bmRlci13ZWJcbiAgICAgIGlmIChzbGF0ZURvbS5JU19XRUJLSVQpIHtcbiAgICAgICAgdmFyIGRvbVNlbGVjdGlvbiA9IHNsYXRlRG9tLmdldFNlbGVjdGlvbihyb290KTtcbiAgICAgICAgZG9tU2VsZWN0aW9uID09PSBudWxsIHx8IGRvbVNlbGVjdGlvbiA9PT0gdm9pZCAwIHx8IGRvbVNlbGVjdGlvbi5yZW1vdmVBbGxSYW5nZXMoKTtcbiAgICAgIH1cbiAgICAgIHNsYXRlRG9tLklTX0ZPQ1VTRURbXCJkZWxldGVcIl0oZWRpdG9yKTtcbiAgICB9LCBbcmVhZE9ubHksIHN0YXRlLmlzVXBkYXRpbmdTZWxlY3Rpb24sIHN0YXRlLmxhdGVzdEVsZW1lbnQsIGVkaXRvciwgYXR0cmlidXRlcy5vbkJsdXJdKSxcbiAgICBvbkNsaWNrOiBSZWFjdC51c2VDYWxsYmFjayhmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgIGlmIChSZWFjdEVkaXRvci5oYXNUYXJnZXQoZWRpdG9yLCBldmVudC50YXJnZXQpICYmICFpc0V2ZW50SGFuZGxlZChldmVudCwgYXR0cmlidXRlcy5vbkNsaWNrKSAmJiBzbGF0ZURvbS5pc0RPTU5vZGUoZXZlbnQudGFyZ2V0KSkge1xuICAgICAgICB2YXIgbm9kZSA9IFJlYWN0RWRpdG9yLnRvU2xhdGVOb2RlKGVkaXRvciwgZXZlbnQudGFyZ2V0KTtcbiAgICAgICAgdmFyIHBhdGggPSBSZWFjdEVkaXRvci5maW5kUGF0aChlZGl0b3IsIG5vZGUpO1xuICAgICAgICAvLyBBdCB0aGlzIHRpbWUsIHRoZSBTbGF0ZSBkb2N1bWVudCBtYXkgYmUgYXJiaXRyYXJpbHkgZGlmZmVyZW50LFxuICAgICAgICAvLyBiZWNhdXNlIG9uQ2xpY2sgaGFuZGxlcnMgY2FuIGNoYW5nZSB0aGUgZG9jdW1lbnQgYmVmb3JlIHdlIGdldCBoZXJlLlxuICAgICAgICAvLyBUaGVyZWZvcmUgd2UgbXVzdCBjaGVjayB0aGF0IHRoaXMgcGF0aCBhY3R1YWxseSBleGlzdHMsXG4gICAgICAgIC8vIGFuZCB0aGF0IGl0IHN0aWxsIHJlZmVycyB0byB0aGUgc2FtZSBub2RlLlxuICAgICAgICBpZiAoIXNsYXRlLkVkaXRvci5oYXNQYXRoKGVkaXRvciwgcGF0aCkgfHwgc2xhdGUuTm9kZS5nZXQoZWRpdG9yLCBwYXRoKSAhPT0gbm9kZSkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZXZlbnQuZGV0YWlsID09PSBzbGF0ZURvbS5UUklQTEVfQ0xJQ0sgJiYgcGF0aC5sZW5ndGggPj0gMSkge1xuICAgICAgICAgIHZhciBibG9ja1BhdGggPSBwYXRoO1xuICAgICAgICAgIGlmICghKHNsYXRlLkVsZW1lbnQuaXNFbGVtZW50KG5vZGUpICYmIHNsYXRlLkVkaXRvci5pc0Jsb2NrKGVkaXRvciwgbm9kZSkpKSB7XG4gICAgICAgICAgICB2YXIgX2Jsb2NrJDtcbiAgICAgICAgICAgIHZhciBibG9jayA9IHNsYXRlLkVkaXRvci5hYm92ZShlZGl0b3IsIHtcbiAgICAgICAgICAgICAgbWF0Y2g6IGZ1bmN0aW9uIG1hdGNoKG4pIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gc2xhdGUuRWxlbWVudC5pc0VsZW1lbnQobikgJiYgc2xhdGUuRWRpdG9yLmlzQmxvY2soZWRpdG9yLCBuKTtcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgYXQ6IHBhdGhcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgYmxvY2tQYXRoID0gKF9ibG9jayQgPSBibG9jayA9PT0gbnVsbCB8fCBibG9jayA9PT0gdm9pZCAwID8gdm9pZCAwIDogYmxvY2tbMV0pICE9PSBudWxsICYmIF9ibG9jayQgIT09IHZvaWQgMCA/IF9ibG9jayQgOiBwYXRoLnNsaWNlKDAsIDEpO1xuICAgICAgICAgIH1cbiAgICAgICAgICB2YXIgcmFuZ2UgPSBzbGF0ZS5FZGl0b3IucmFuZ2UoZWRpdG9yLCBibG9ja1BhdGgpO1xuICAgICAgICAgIHNsYXRlLlRyYW5zZm9ybXMuc2VsZWN0KGVkaXRvciwgcmFuZ2UpO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAocmVhZE9ubHkpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdmFyIF9zdGFydCA9IHNsYXRlLkVkaXRvci5zdGFydChlZGl0b3IsIHBhdGgpO1xuICAgICAgICB2YXIgZW5kID0gc2xhdGUuRWRpdG9yLmVuZChlZGl0b3IsIHBhdGgpO1xuICAgICAgICB2YXIgc3RhcnRWb2lkID0gc2xhdGUuRWRpdG9yW1widm9pZFwiXShlZGl0b3IsIHtcbiAgICAgICAgICBhdDogX3N0YXJ0XG4gICAgICAgIH0pO1xuICAgICAgICB2YXIgZW5kVm9pZCA9IHNsYXRlLkVkaXRvcltcInZvaWRcIl0oZWRpdG9yLCB7XG4gICAgICAgICAgYXQ6IGVuZFxuICAgICAgICB9KTtcbiAgICAgICAgaWYgKHN0YXJ0Vm9pZCAmJiBlbmRWb2lkICYmIHNsYXRlLlBhdGguZXF1YWxzKHN0YXJ0Vm9pZFsxXSwgZW5kVm9pZFsxXSkpIHtcbiAgICAgICAgICB2YXIgX3JhbmdlMiA9IHNsYXRlLkVkaXRvci5yYW5nZShlZGl0b3IsIF9zdGFydCk7XG4gICAgICAgICAgc2xhdGUuVHJhbnNmb3Jtcy5zZWxlY3QoZWRpdG9yLCBfcmFuZ2UyKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sIFtlZGl0b3IsIGF0dHJpYnV0ZXMub25DbGljaywgcmVhZE9ubHldKSxcbiAgICBvbkNvbXBvc2l0aW9uRW5kOiBSZWFjdC51c2VDYWxsYmFjayhmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgIGlmIChSZWFjdEVkaXRvci5oYXNTZWxlY3RhYmxlVGFyZ2V0KGVkaXRvciwgZXZlbnQudGFyZ2V0KSkge1xuICAgICAgICB2YXIgX2FuZHJvaWRJbnB1dE1hbmFnZXJSMztcbiAgICAgICAgaWYgKFJlYWN0RWRpdG9yLmlzQ29tcG9zaW5nKGVkaXRvcikpIHtcbiAgICAgICAgICBQcm9taXNlLnJlc29sdmUoKS50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHNldElzQ29tcG9zaW5nKGZhbHNlKTtcbiAgICAgICAgICAgIHNsYXRlRG9tLklTX0NPTVBPU0lORy5zZXQoZWRpdG9yLCBmYWxzZSk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgKF9hbmRyb2lkSW5wdXRNYW5hZ2VyUjMgPSBhbmRyb2lkSW5wdXRNYW5hZ2VyUmVmLmN1cnJlbnQpID09PSBudWxsIHx8IF9hbmRyb2lkSW5wdXRNYW5hZ2VyUjMgPT09IHZvaWQgMCB8fCBfYW5kcm9pZElucHV0TWFuYWdlclIzLmhhbmRsZUNvbXBvc2l0aW9uRW5kKGV2ZW50KTtcbiAgICAgICAgaWYgKGlzRXZlbnRIYW5kbGVkKGV2ZW50LCBhdHRyaWJ1dGVzLm9uQ29tcG9zaXRpb25FbmQpIHx8IHNsYXRlRG9tLklTX0FORFJPSUQpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgLy8gQ09NUEFUOiBJbiBDaHJvbWUsIGBiZWZvcmVpbnB1dGAgZXZlbnRzIGZvciBjb21wb3NpdGlvbnNcbiAgICAgICAgLy8gYXJlbid0IGNvcnJlY3QgYW5kIG5ldmVyIGZpcmUgdGhlIFwiaW5zZXJ0RnJvbUNvbXBvc2l0aW9uXCJcbiAgICAgICAgLy8gdHlwZSB0aGF0IHdlIG5lZWQuIFNvIGluc3RlYWQsIGluc2VydCB3aGVuZXZlciBhIGNvbXBvc2l0aW9uXG4gICAgICAgIC8vIGVuZHMgc2luY2UgaXQgd2lsbCBhbHJlYWR5IGhhdmUgYmVlbiBjb21taXR0ZWQgdG8gdGhlIERPTS5cbiAgICAgICAgaWYgKCFzbGF0ZURvbS5JU19XRUJLSVQgJiYgIXNsYXRlRG9tLklTX0ZJUkVGT1hfTEVHQUNZICYmICFzbGF0ZURvbS5JU19JT1MgJiYgIXNsYXRlRG9tLklTX1dFQ0hBVEJST1dTRVIgJiYgIXNsYXRlRG9tLklTX1VDX01PQklMRSAmJiBldmVudC5kYXRhKSB7XG4gICAgICAgICAgdmFyIHBsYWNlaG9sZGVyTWFya3MgPSBzbGF0ZURvbS5FRElUT1JfVE9fUEVORElOR19JTlNFUlRJT05fTUFSS1MuZ2V0KGVkaXRvcik7XG4gICAgICAgICAgc2xhdGVEb20uRURJVE9SX1RPX1BFTkRJTkdfSU5TRVJUSU9OX01BUktTW1wiZGVsZXRlXCJdKGVkaXRvcik7XG4gICAgICAgICAgLy8gRW5zdXJlIHdlIGluc2VydCB0ZXh0IHdpdGggdGhlIG1hcmtzIHRoZSB1c2VyIHdhcyBhY3R1YWxseSBzZWVpbmdcbiAgICAgICAgICBpZiAocGxhY2Vob2xkZXJNYXJrcyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBzbGF0ZURvbS5FRElUT1JfVE9fVVNFUl9NQVJLUy5zZXQoZWRpdG9yLCBlZGl0b3IubWFya3MpO1xuICAgICAgICAgICAgZWRpdG9yLm1hcmtzID0gcGxhY2Vob2xkZXJNYXJrcztcbiAgICAgICAgICB9XG4gICAgICAgICAgc2xhdGUuRWRpdG9yLmluc2VydFRleHQoZWRpdG9yLCBldmVudC5kYXRhKTtcbiAgICAgICAgICB2YXIgdXNlck1hcmtzID0gc2xhdGVEb20uRURJVE9SX1RPX1VTRVJfTUFSS1MuZ2V0KGVkaXRvcik7XG4gICAgICAgICAgc2xhdGVEb20uRURJVE9SX1RPX1VTRVJfTUFSS1NbXCJkZWxldGVcIl0oZWRpdG9yKTtcbiAgICAgICAgICBpZiAodXNlck1hcmtzICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGVkaXRvci5tYXJrcyA9IHVzZXJNYXJrcztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LCBbYXR0cmlidXRlcy5vbkNvbXBvc2l0aW9uRW5kLCBlZGl0b3JdKSxcbiAgICBvbkNvbXBvc2l0aW9uVXBkYXRlOiBSZWFjdC51c2VDYWxsYmFjayhmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgIGlmIChSZWFjdEVkaXRvci5oYXNTZWxlY3RhYmxlVGFyZ2V0KGVkaXRvciwgZXZlbnQudGFyZ2V0KSAmJiAhaXNFdmVudEhhbmRsZWQoZXZlbnQsIGF0dHJpYnV0ZXMub25Db21wb3NpdGlvblVwZGF0ZSkpIHtcbiAgICAgICAgaWYgKCFSZWFjdEVkaXRvci5pc0NvbXBvc2luZyhlZGl0b3IpKSB7XG4gICAgICAgICAgc2V0SXNDb21wb3NpbmcodHJ1ZSk7XG4gICAgICAgICAgc2xhdGVEb20uSVNfQ09NUE9TSU5HLnNldChlZGl0b3IsIHRydWUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSwgW2F0dHJpYnV0ZXMub25Db21wb3NpdGlvblVwZGF0ZSwgZWRpdG9yXSksXG4gICAgb25Db21wb3NpdGlvblN0YXJ0OiBSZWFjdC51c2VDYWxsYmFjayhmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgIGlmIChSZWFjdEVkaXRvci5oYXNTZWxlY3RhYmxlVGFyZ2V0KGVkaXRvciwgZXZlbnQudGFyZ2V0KSkge1xuICAgICAgICB2YXIgX2FuZHJvaWRJbnB1dE1hbmFnZXJSNDtcbiAgICAgICAgKF9hbmRyb2lkSW5wdXRNYW5hZ2VyUjQgPSBhbmRyb2lkSW5wdXRNYW5hZ2VyUmVmLmN1cnJlbnQpID09PSBudWxsIHx8IF9hbmRyb2lkSW5wdXRNYW5hZ2VyUjQgPT09IHZvaWQgMCB8fCBfYW5kcm9pZElucHV0TWFuYWdlclI0LmhhbmRsZUNvbXBvc2l0aW9uU3RhcnQoZXZlbnQpO1xuICAgICAgICBpZiAoaXNFdmVudEhhbmRsZWQoZXZlbnQsIGF0dHJpYnV0ZXMub25Db21wb3NpdGlvblN0YXJ0KSB8fCBzbGF0ZURvbS5JU19BTkRST0lEKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHNldElzQ29tcG9zaW5nKHRydWUpO1xuICAgICAgICB2YXIgc2VsZWN0aW9uID0gZWRpdG9yLnNlbGVjdGlvbjtcbiAgICAgICAgaWYgKHNlbGVjdGlvbiAmJiBzbGF0ZS5SYW5nZS5pc0V4cGFuZGVkKHNlbGVjdGlvbikpIHtcbiAgICAgICAgICBzbGF0ZS5FZGl0b3IuZGVsZXRlRnJhZ21lbnQoZWRpdG9yKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LCBbYXR0cmlidXRlcy5vbkNvbXBvc2l0aW9uU3RhcnQsIGVkaXRvcl0pLFxuICAgIG9uQ29weTogUmVhY3QudXNlQ2FsbGJhY2soZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICBpZiAoUmVhY3RFZGl0b3IuaGFzU2VsZWN0YWJsZVRhcmdldChlZGl0b3IsIGV2ZW50LnRhcmdldCkgJiYgIWlzRXZlbnRIYW5kbGVkKGV2ZW50LCBhdHRyaWJ1dGVzLm9uQ29weSkgJiYgIWlzRE9NRXZlbnRUYXJnZXRJbnB1dChldmVudCkpIHtcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgUmVhY3RFZGl0b3Iuc2V0RnJhZ21lbnREYXRhKGVkaXRvciwgZXZlbnQuY2xpcGJvYXJkRGF0YSwgJ2NvcHknKTtcbiAgICAgIH1cbiAgICB9LCBbYXR0cmlidXRlcy5vbkNvcHksIGVkaXRvcl0pLFxuICAgIG9uQ3V0OiBSZWFjdC51c2VDYWxsYmFjayhmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgIGlmICghcmVhZE9ubHkgJiYgUmVhY3RFZGl0b3IuaGFzU2VsZWN0YWJsZVRhcmdldChlZGl0b3IsIGV2ZW50LnRhcmdldCkgJiYgIWlzRXZlbnRIYW5kbGVkKGV2ZW50LCBhdHRyaWJ1dGVzLm9uQ3V0KSAmJiAhaXNET01FdmVudFRhcmdldElucHV0KGV2ZW50KSkge1xuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICBSZWFjdEVkaXRvci5zZXRGcmFnbWVudERhdGEoZWRpdG9yLCBldmVudC5jbGlwYm9hcmREYXRhLCAnY3V0Jyk7XG4gICAgICAgIHZhciBzZWxlY3Rpb24gPSBlZGl0b3Iuc2VsZWN0aW9uO1xuICAgICAgICBpZiAoc2VsZWN0aW9uKSB7XG4gICAgICAgICAgaWYgKHNsYXRlLlJhbmdlLmlzRXhwYW5kZWQoc2VsZWN0aW9uKSkge1xuICAgICAgICAgICAgc2xhdGUuRWRpdG9yLmRlbGV0ZUZyYWdtZW50KGVkaXRvcik7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHZhciBub2RlID0gc2xhdGUuTm9kZS5wYXJlbnQoZWRpdG9yLCBzZWxlY3Rpb24uYW5jaG9yLnBhdGgpO1xuICAgICAgICAgICAgaWYgKHNsYXRlLkVkaXRvci5pc1ZvaWQoZWRpdG9yLCBub2RlKSkge1xuICAgICAgICAgICAgICBzbGF0ZS5UcmFuc2Zvcm1zW1wiZGVsZXRlXCJdKGVkaXRvcik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSwgW3JlYWRPbmx5LCBlZGl0b3IsIGF0dHJpYnV0ZXMub25DdXRdKSxcbiAgICBvbkRyYWdPdmVyOiBSZWFjdC51c2VDYWxsYmFjayhmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgIGlmIChSZWFjdEVkaXRvci5oYXNUYXJnZXQoZWRpdG9yLCBldmVudC50YXJnZXQpICYmICFpc0V2ZW50SGFuZGxlZChldmVudCwgYXR0cmlidXRlcy5vbkRyYWdPdmVyKSkge1xuICAgICAgICAvLyBPbmx5IHdoZW4gdGhlIHRhcmdldCBpcyB2b2lkLCBjYWxsIGBwcmV2ZW50RGVmYXVsdGAgdG8gc2lnbmFsXG4gICAgICAgIC8vIHRoYXQgZHJvcHMgYXJlIGFsbG93ZWQuIEVkaXRhYmxlIGNvbnRlbnQgaXMgZHJvcHBhYmxlIGJ5XG4gICAgICAgIC8vIGRlZmF1bHQsIGFuZCBjYWxsaW5nIGBwcmV2ZW50RGVmYXVsdGAgaGlkZXMgdGhlIGN1cnNvci5cbiAgICAgICAgdmFyIG5vZGUgPSBSZWFjdEVkaXRvci50b1NsYXRlTm9kZShlZGl0b3IsIGV2ZW50LnRhcmdldCk7XG4gICAgICAgIGlmIChzbGF0ZS5FbGVtZW50LmlzRWxlbWVudChub2RlKSAmJiBzbGF0ZS5FZGl0b3IuaXNWb2lkKGVkaXRvciwgbm9kZSkpIHtcbiAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSwgW2F0dHJpYnV0ZXMub25EcmFnT3ZlciwgZWRpdG9yXSksXG4gICAgb25EcmFnU3RhcnQ6IFJlYWN0LnVzZUNhbGxiYWNrKGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgaWYgKCFyZWFkT25seSAmJiBSZWFjdEVkaXRvci5oYXNUYXJnZXQoZWRpdG9yLCBldmVudC50YXJnZXQpICYmICFpc0V2ZW50SGFuZGxlZChldmVudCwgYXR0cmlidXRlcy5vbkRyYWdTdGFydCkpIHtcbiAgICAgICAgdmFyIG5vZGUgPSBSZWFjdEVkaXRvci50b1NsYXRlTm9kZShlZGl0b3IsIGV2ZW50LnRhcmdldCk7XG4gICAgICAgIHZhciBwYXRoID0gUmVhY3RFZGl0b3IuZmluZFBhdGgoZWRpdG9yLCBub2RlKTtcbiAgICAgICAgdmFyIHZvaWRNYXRjaCA9IHNsYXRlLkVsZW1lbnQuaXNFbGVtZW50KG5vZGUpICYmIHNsYXRlLkVkaXRvci5pc1ZvaWQoZWRpdG9yLCBub2RlKSB8fCBzbGF0ZS5FZGl0b3JbXCJ2b2lkXCJdKGVkaXRvciwge1xuICAgICAgICAgIGF0OiBwYXRoLFxuICAgICAgICAgIHZvaWRzOiB0cnVlXG4gICAgICAgIH0pO1xuICAgICAgICAvLyBJZiBzdGFydGluZyBhIGRyYWcgb24gYSB2b2lkIG5vZGUsIG1ha2Ugc3VyZSBpdCBpcyBzZWxlY3RlZFxuICAgICAgICAvLyBzbyB0aGF0IGl0IHNob3dzIHVwIGluIHRoZSBzZWxlY3Rpb24ncyBmcmFnbWVudC5cbiAgICAgICAgaWYgKHZvaWRNYXRjaCkge1xuICAgICAgICAgIHZhciByYW5nZSA9IHNsYXRlLkVkaXRvci5yYW5nZShlZGl0b3IsIHBhdGgpO1xuICAgICAgICAgIHNsYXRlLlRyYW5zZm9ybXMuc2VsZWN0KGVkaXRvciwgcmFuZ2UpO1xuICAgICAgICB9XG4gICAgICAgIHN0YXRlLmlzRHJhZ2dpbmdJbnRlcm5hbGx5ID0gdHJ1ZTtcbiAgICAgICAgUmVhY3RFZGl0b3Iuc2V0RnJhZ21lbnREYXRhKGVkaXRvciwgZXZlbnQuZGF0YVRyYW5zZmVyLCAnZHJhZycpO1xuICAgICAgfVxuICAgIH0sIFtyZWFkT25seSwgZWRpdG9yLCBhdHRyaWJ1dGVzLm9uRHJhZ1N0YXJ0LCBzdGF0ZV0pLFxuICAgIG9uRHJvcDogUmVhY3QudXNlQ2FsbGJhY2soZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICBpZiAoIXJlYWRPbmx5ICYmIFJlYWN0RWRpdG9yLmhhc1RhcmdldChlZGl0b3IsIGV2ZW50LnRhcmdldCkgJiYgIWlzRXZlbnRIYW5kbGVkKGV2ZW50LCBhdHRyaWJ1dGVzLm9uRHJvcCkpIHtcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgLy8gS2VlcCBhIHJlZmVyZW5jZSB0byB0aGUgZHJhZ2dlZCByYW5nZSBiZWZvcmUgdXBkYXRpbmcgc2VsZWN0aW9uXG4gICAgICAgIHZhciBkcmFnZ2VkUmFuZ2UgPSBlZGl0b3Iuc2VsZWN0aW9uO1xuICAgICAgICAvLyBGaW5kIHRoZSByYW5nZSB3aGVyZSB0aGUgZHJvcCBoYXBwZW5lZFxuICAgICAgICB2YXIgcmFuZ2UgPSBSZWFjdEVkaXRvci5maW5kRXZlbnRSYW5nZShlZGl0b3IsIGV2ZW50KTtcbiAgICAgICAgdmFyIGRhdGEgPSBldmVudC5kYXRhVHJhbnNmZXI7XG4gICAgICAgIHNsYXRlLlRyYW5zZm9ybXMuc2VsZWN0KGVkaXRvciwgcmFuZ2UpO1xuICAgICAgICBpZiAoc3RhdGUuaXNEcmFnZ2luZ0ludGVybmFsbHkpIHtcbiAgICAgICAgICBpZiAoZHJhZ2dlZFJhbmdlICYmICFzbGF0ZS5SYW5nZS5lcXVhbHMoZHJhZ2dlZFJhbmdlLCByYW5nZSkgJiYgIXNsYXRlLkVkaXRvcltcInZvaWRcIl0oZWRpdG9yLCB7XG4gICAgICAgICAgICBhdDogcmFuZ2UsXG4gICAgICAgICAgICB2b2lkczogdHJ1ZVxuICAgICAgICAgIH0pKSB7XG4gICAgICAgICAgICBzbGF0ZS5UcmFuc2Zvcm1zW1wiZGVsZXRlXCJdKGVkaXRvciwge1xuICAgICAgICAgICAgICBhdDogZHJhZ2dlZFJhbmdlXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgUmVhY3RFZGl0b3IuaW5zZXJ0RGF0YShlZGl0b3IsIGRhdGEpO1xuICAgICAgICAvLyBXaGVuIGRyYWdnaW5nIGZyb20gYW5vdGhlciBzb3VyY2UgaW50byB0aGUgZWRpdG9yLCBpdCdzIHBvc3NpYmxlXG4gICAgICAgIC8vIHRoYXQgdGhlIGN1cnJlbnQgZWRpdG9yIGRvZXMgbm90IGhhdmUgZm9jdXMuXG4gICAgICAgIGlmICghUmVhY3RFZGl0b3IuaXNGb2N1c2VkKGVkaXRvcikpIHtcbiAgICAgICAgICBSZWFjdEVkaXRvci5mb2N1cyhlZGl0b3IpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSwgW3JlYWRPbmx5LCBlZGl0b3IsIGF0dHJpYnV0ZXMub25Ecm9wLCBzdGF0ZV0pLFxuICAgIG9uRHJhZ0VuZDogUmVhY3QudXNlQ2FsbGJhY2soZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICBpZiAoIXJlYWRPbmx5ICYmIHN0YXRlLmlzRHJhZ2dpbmdJbnRlcm5hbGx5ICYmIGF0dHJpYnV0ZXMub25EcmFnRW5kICYmIFJlYWN0RWRpdG9yLmhhc1RhcmdldChlZGl0b3IsIGV2ZW50LnRhcmdldCkpIHtcbiAgICAgICAgYXR0cmlidXRlcy5vbkRyYWdFbmQoZXZlbnQpO1xuICAgICAgfVxuICAgIH0sIFtyZWFkT25seSwgc3RhdGUsIGF0dHJpYnV0ZXMsIGVkaXRvcl0pLFxuICAgIG9uRm9jdXM6IFJlYWN0LnVzZUNhbGxiYWNrKGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgaWYgKCFyZWFkT25seSAmJiAhc3RhdGUuaXNVcGRhdGluZ1NlbGVjdGlvbiAmJiBSZWFjdEVkaXRvci5oYXNFZGl0YWJsZVRhcmdldChlZGl0b3IsIGV2ZW50LnRhcmdldCkgJiYgIWlzRXZlbnRIYW5kbGVkKGV2ZW50LCBhdHRyaWJ1dGVzLm9uRm9jdXMpKSB7XG4gICAgICAgIHZhciBlbCA9IFJlYWN0RWRpdG9yLnRvRE9NTm9kZShlZGl0b3IsIGVkaXRvcik7XG4gICAgICAgIHZhciByb290ID0gUmVhY3RFZGl0b3IuZmluZERvY3VtZW50T3JTaGFkb3dSb290KGVkaXRvcik7XG4gICAgICAgIHN0YXRlLmxhdGVzdEVsZW1lbnQgPSByb290LmFjdGl2ZUVsZW1lbnQ7XG4gICAgICAgIC8vIENPTVBBVDogSWYgdGhlIGVkaXRvciBoYXMgbmVzdGVkIGVkaXRhYmxlIGVsZW1lbnRzLCB0aGUgZm9jdXNcbiAgICAgICAgLy8gY2FuIGdvIHRvIHRoZW0uIEluIEZpcmVmb3gsIHRoaXMgbXVzdCBiZSBwcmV2ZW50ZWQgYmVjYXVzZSBpdFxuICAgICAgICAvLyByZXN1bHRzIGluIGlzc3VlcyB3aXRoIGtleWJvYXJkIG5hdmlnYXRpb24uICgyMDE3LzAzLzMwKVxuICAgICAgICBpZiAoc2xhdGVEb20uSVNfRklSRUZPWCAmJiBldmVudC50YXJnZXQgIT09IGVsKSB7XG4gICAgICAgICAgZWwuZm9jdXMoKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgc2xhdGVEb20uSVNfRk9DVVNFRC5zZXQoZWRpdG9yLCB0cnVlKTtcbiAgICAgIH1cbiAgICB9LCBbcmVhZE9ubHksIHN0YXRlLCBlZGl0b3IsIGF0dHJpYnV0ZXMub25Gb2N1c10pLFxuICAgIG9uS2V5RG93bjogUmVhY3QudXNlQ2FsbGJhY2soZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICBpZiAoIXJlYWRPbmx5ICYmIFJlYWN0RWRpdG9yLmhhc0VkaXRhYmxlVGFyZ2V0KGVkaXRvciwgZXZlbnQudGFyZ2V0KSkge1xuICAgICAgICB2YXIgX2FuZHJvaWRJbnB1dE1hbmFnZXJSNTtcbiAgICAgICAgKF9hbmRyb2lkSW5wdXRNYW5hZ2VyUjUgPSBhbmRyb2lkSW5wdXRNYW5hZ2VyUmVmLmN1cnJlbnQpID09PSBudWxsIHx8IF9hbmRyb2lkSW5wdXRNYW5hZ2VyUjUgPT09IHZvaWQgMCB8fCBfYW5kcm9pZElucHV0TWFuYWdlclI1LmhhbmRsZUtleURvd24oZXZlbnQpO1xuICAgICAgICB2YXIgbmF0aXZlRXZlbnQgPSBldmVudC5uYXRpdmVFdmVudDtcbiAgICAgICAgLy8gQ09NUEFUOiBUaGUgY29tcG9zaXRpb24gZW5kIGV2ZW50IGlzbid0IGZpcmVkIHJlbGlhYmx5IGluIGFsbCBicm93c2VycyxcbiAgICAgICAgLy8gc28gd2Ugc29tZXRpbWVzIG1pZ2h0IGVuZCB1cCBzdHVjayBpbiBhIGNvbXBvc2l0aW9uIHN0YXRlIGV2ZW4gdGhvdWdoIHdlXG4gICAgICAgIC8vIGFyZW4ndCBjb21wb3NpbmcgYW55IG1vcmUuXG4gICAgICAgIGlmIChSZWFjdEVkaXRvci5pc0NvbXBvc2luZyhlZGl0b3IpICYmIG5hdGl2ZUV2ZW50LmlzQ29tcG9zaW5nID09PSBmYWxzZSkge1xuICAgICAgICAgIHNsYXRlRG9tLklTX0NPTVBPU0lORy5zZXQoZWRpdG9yLCBmYWxzZSk7XG4gICAgICAgICAgc2V0SXNDb21wb3NpbmcoZmFsc2UpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc0V2ZW50SGFuZGxlZChldmVudCwgYXR0cmlidXRlcy5vbktleURvd24pIHx8IFJlYWN0RWRpdG9yLmlzQ29tcG9zaW5nKGVkaXRvcikpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHNlbGVjdGlvbiA9IGVkaXRvci5zZWxlY3Rpb247XG4gICAgICAgIHZhciBlbGVtZW50ID0gZWRpdG9yLmNoaWxkcmVuW3NlbGVjdGlvbiAhPT0gbnVsbCA/IHNlbGVjdGlvbi5mb2N1cy5wYXRoWzBdIDogMF07XG4gICAgICAgIHZhciBpc1JUTCA9IGdldERpcmVjdGlvbihzbGF0ZS5Ob2RlLnN0cmluZyhlbGVtZW50KSkgPT09ICdydGwnO1xuICAgICAgICAvLyBDT01QQVQ6IFNpbmNlIHdlIHByZXZlbnQgdGhlIGRlZmF1bHQgYmVoYXZpb3Igb25cbiAgICAgICAgLy8gYGJlZm9yZWlucHV0YCBldmVudHMsIHRoZSBicm93c2VyIGRvZXNuJ3QgdGhpbmsgdGhlcmUncyBldmVyXG4gICAgICAgIC8vIGFueSBoaXN0b3J5IHN0YWNrIHRvIHVuZG8gb3IgcmVkbywgc28gd2UgaGF2ZSB0byBtYW5hZ2UgdGhlc2VcbiAgICAgICAgLy8gaG90a2V5cyBvdXJzZWx2ZXMuICgyMDE5LzExLzA2KVxuICAgICAgICBpZiAoc2xhdGVEb20uSG90a2V5cy5pc1JlZG8obmF0aXZlRXZlbnQpKSB7XG4gICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICB2YXIgbWF5YmVIaXN0b3J5RWRpdG9yID0gZWRpdG9yO1xuICAgICAgICAgIGlmICh0eXBlb2YgbWF5YmVIaXN0b3J5RWRpdG9yLnJlZG8gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIG1heWJlSGlzdG9yeUVkaXRvci5yZWRvKCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc2xhdGVEb20uSG90a2V5cy5pc1VuZG8obmF0aXZlRXZlbnQpKSB7XG4gICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICB2YXIgX21heWJlSGlzdG9yeUVkaXRvciA9IGVkaXRvcjtcbiAgICAgICAgICBpZiAodHlwZW9mIF9tYXliZUhpc3RvcnlFZGl0b3IudW5kbyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgX21heWJlSGlzdG9yeUVkaXRvci51bmRvKCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICAvLyBDT01QQVQ6IENlcnRhaW4gYnJvd3NlcnMgZG9uJ3QgaGFuZGxlIHRoZSBzZWxlY3Rpb24gdXBkYXRlc1xuICAgICAgICAvLyBwcm9wZXJseS4gSW4gQ2hyb21lLCB0aGUgc2VsZWN0aW9uIGlzbid0IHByb3Blcmx5IGV4dGVuZGVkLlxuICAgICAgICAvLyBBbmQgaW4gRmlyZWZveCwgdGhlIHNlbGVjdGlvbiBpc24ndCBwcm9wZXJseSBjb2xsYXBzZWQuXG4gICAgICAgIC8vICgyMDE3LzEwLzE3KVxuICAgICAgICBpZiAoc2xhdGVEb20uSG90a2V5cy5pc01vdmVMaW5lQmFja3dhcmQobmF0aXZlRXZlbnQpKSB7XG4gICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICBzbGF0ZS5UcmFuc2Zvcm1zLm1vdmUoZWRpdG9yLCB7XG4gICAgICAgICAgICB1bml0OiAnbGluZScsXG4gICAgICAgICAgICByZXZlcnNlOiB0cnVlXG4gICAgICAgICAgfSk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzbGF0ZURvbS5Ib3RrZXlzLmlzTW92ZUxpbmVGb3J3YXJkKG5hdGl2ZUV2ZW50KSkge1xuICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgc2xhdGUuVHJhbnNmb3Jtcy5tb3ZlKGVkaXRvciwge1xuICAgICAgICAgICAgdW5pdDogJ2xpbmUnXG4gICAgICAgICAgfSk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzbGF0ZURvbS5Ib3RrZXlzLmlzRXh0ZW5kTGluZUJhY2t3YXJkKG5hdGl2ZUV2ZW50KSkge1xuICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgc2xhdGUuVHJhbnNmb3Jtcy5tb3ZlKGVkaXRvciwge1xuICAgICAgICAgICAgdW5pdDogJ2xpbmUnLFxuICAgICAgICAgICAgZWRnZTogJ2ZvY3VzJyxcbiAgICAgICAgICAgIHJldmVyc2U6IHRydWVcbiAgICAgICAgICB9KTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHNsYXRlRG9tLkhvdGtleXMuaXNFeHRlbmRMaW5lRm9yd2FyZChuYXRpdmVFdmVudCkpIHtcbiAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgIHNsYXRlLlRyYW5zZm9ybXMubW92ZShlZGl0b3IsIHtcbiAgICAgICAgICAgIHVuaXQ6ICdsaW5lJyxcbiAgICAgICAgICAgIGVkZ2U6ICdmb2N1cydcbiAgICAgICAgICB9KTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgLy8gQ09NUEFUOiBJZiBhIHZvaWQgbm9kZSBpcyBzZWxlY3RlZCwgb3IgYSB6ZXJvLXdpZHRoIHRleHQgbm9kZVxuICAgICAgICAvLyBhZGphY2VudCB0byBhbiBpbmxpbmUgaXMgc2VsZWN0ZWQsIHdlIG5lZWQgdG8gaGFuZGxlIHRoZXNlXG4gICAgICAgIC8vIGhvdGtleXMgbWFudWFsbHkgYmVjYXVzZSBicm93c2VycyB3b24ndCBiZSBhYmxlIHRvIHNraXAgb3ZlclxuICAgICAgICAvLyB0aGUgdm9pZCBub2RlIHdpdGggdGhlIHplcm8td2lkdGggc3BhY2Ugbm90IGJlaW5nIGFuIGVtcHR5XG4gICAgICAgIC8vIHN0cmluZy5cbiAgICAgICAgaWYgKHNsYXRlRG9tLkhvdGtleXMuaXNNb3ZlQmFja3dhcmQobmF0aXZlRXZlbnQpKSB7XG4gICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICBpZiAoc2VsZWN0aW9uICYmIHNsYXRlLlJhbmdlLmlzQ29sbGFwc2VkKHNlbGVjdGlvbikpIHtcbiAgICAgICAgICAgIHNsYXRlLlRyYW5zZm9ybXMubW92ZShlZGl0b3IsIHtcbiAgICAgICAgICAgICAgcmV2ZXJzZTogIWlzUlRMXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc2xhdGUuVHJhbnNmb3Jtcy5jb2xsYXBzZShlZGl0b3IsIHtcbiAgICAgICAgICAgICAgZWRnZTogaXNSVEwgPyAnZW5kJyA6ICdzdGFydCdcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHNsYXRlRG9tLkhvdGtleXMuaXNNb3ZlRm9yd2FyZChuYXRpdmVFdmVudCkpIHtcbiAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgIGlmIChzZWxlY3Rpb24gJiYgc2xhdGUuUmFuZ2UuaXNDb2xsYXBzZWQoc2VsZWN0aW9uKSkge1xuICAgICAgICAgICAgc2xhdGUuVHJhbnNmb3Jtcy5tb3ZlKGVkaXRvciwge1xuICAgICAgICAgICAgICByZXZlcnNlOiBpc1JUTFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHNsYXRlLlRyYW5zZm9ybXMuY29sbGFwc2UoZWRpdG9yLCB7XG4gICAgICAgICAgICAgIGVkZ2U6IGlzUlRMID8gJ3N0YXJ0JyA6ICdlbmQnXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzbGF0ZURvbS5Ib3RrZXlzLmlzTW92ZVdvcmRCYWNrd2FyZChuYXRpdmVFdmVudCkpIHtcbiAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgIGlmIChzZWxlY3Rpb24gJiYgc2xhdGUuUmFuZ2UuaXNFeHBhbmRlZChzZWxlY3Rpb24pKSB7XG4gICAgICAgICAgICBzbGF0ZS5UcmFuc2Zvcm1zLmNvbGxhcHNlKGVkaXRvciwge1xuICAgICAgICAgICAgICBlZGdlOiAnZm9jdXMnXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgc2xhdGUuVHJhbnNmb3Jtcy5tb3ZlKGVkaXRvciwge1xuICAgICAgICAgICAgdW5pdDogJ3dvcmQnLFxuICAgICAgICAgICAgcmV2ZXJzZTogIWlzUlRMXG4gICAgICAgICAgfSk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzbGF0ZURvbS5Ib3RrZXlzLmlzTW92ZVdvcmRGb3J3YXJkKG5hdGl2ZUV2ZW50KSkge1xuICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgaWYgKHNlbGVjdGlvbiAmJiBzbGF0ZS5SYW5nZS5pc0V4cGFuZGVkKHNlbGVjdGlvbikpIHtcbiAgICAgICAgICAgIHNsYXRlLlRyYW5zZm9ybXMuY29sbGFwc2UoZWRpdG9yLCB7XG4gICAgICAgICAgICAgIGVkZ2U6ICdmb2N1cydcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgICBzbGF0ZS5UcmFuc2Zvcm1zLm1vdmUoZWRpdG9yLCB7XG4gICAgICAgICAgICB1bml0OiAnd29yZCcsXG4gICAgICAgICAgICByZXZlcnNlOiBpc1JUTFxuICAgICAgICAgIH0pO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICAvLyBDT01QQVQ6IENlcnRhaW4gYnJvd3NlcnMgZG9uJ3Qgc3VwcG9ydCB0aGUgYGJlZm9yZWlucHV0YCBldmVudCwgc28gd2VcbiAgICAgICAgLy8gZmFsbCBiYWNrIHRvIGd1ZXNzaW5nIGF0IHRoZSBpbnB1dCBpbnRlbnRpb24gZm9yIGhvdGtleXMuXG4gICAgICAgIC8vIENPTVBBVDogSW4gaU9TLCBzb21lIG9mIHRoZXNlIGhvdGtleXMgYXJlIGhhbmRsZWQgaW4gdGhlXG4gICAgICAgIGlmICghc2xhdGVEb20uSEFTX0JFRk9SRV9JTlBVVF9TVVBQT1JUKSB7XG4gICAgICAgICAgLy8gV2UgZG9uJ3QgaGF2ZSBhIGNvcmUgYmVoYXZpb3IgZm9yIHRoZXNlLCBidXQgdGhleSBjaGFuZ2UgdGhlXG4gICAgICAgICAgLy8gRE9NIGlmIHdlIGRvbid0IHByZXZlbnQgdGhlbSwgc28gd2UgaGF2ZSB0by5cbiAgICAgICAgICBpZiAoc2xhdGVEb20uSG90a2V5cy5pc0JvbGQobmF0aXZlRXZlbnQpIHx8IHNsYXRlRG9tLkhvdGtleXMuaXNJdGFsaWMobmF0aXZlRXZlbnQpIHx8IHNsYXRlRG9tLkhvdGtleXMuaXNUcmFuc3Bvc2VDaGFyYWN0ZXIobmF0aXZlRXZlbnQpKSB7XG4gICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoc2xhdGVEb20uSG90a2V5cy5pc1NvZnRCcmVhayhuYXRpdmVFdmVudCkpIHtcbiAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICBzbGF0ZS5FZGl0b3IuaW5zZXJ0U29mdEJyZWFrKGVkaXRvcik7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChzbGF0ZURvbS5Ib3RrZXlzLmlzU3BsaXRCbG9jayhuYXRpdmVFdmVudCkpIHtcbiAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICBzbGF0ZS5FZGl0b3IuaW5zZXJ0QnJlYWsoZWRpdG9yKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHNsYXRlRG9tLkhvdGtleXMuaXNEZWxldGVCYWNrd2FyZChuYXRpdmVFdmVudCkpIHtcbiAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICBpZiAoc2VsZWN0aW9uICYmIHNsYXRlLlJhbmdlLmlzRXhwYW5kZWQoc2VsZWN0aW9uKSkge1xuICAgICAgICAgICAgICBzbGF0ZS5FZGl0b3IuZGVsZXRlRnJhZ21lbnQoZWRpdG9yLCB7XG4gICAgICAgICAgICAgICAgZGlyZWN0aW9uOiAnYmFja3dhcmQnXG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgc2xhdGUuRWRpdG9yLmRlbGV0ZUJhY2t3YXJkKGVkaXRvcik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChzbGF0ZURvbS5Ib3RrZXlzLmlzRGVsZXRlRm9yd2FyZChuYXRpdmVFdmVudCkpIHtcbiAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICBpZiAoc2VsZWN0aW9uICYmIHNsYXRlLlJhbmdlLmlzRXhwYW5kZWQoc2VsZWN0aW9uKSkge1xuICAgICAgICAgICAgICBzbGF0ZS5FZGl0b3IuZGVsZXRlRnJhZ21lbnQoZWRpdG9yLCB7XG4gICAgICAgICAgICAgICAgZGlyZWN0aW9uOiAnZm9yd2FyZCdcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBzbGF0ZS5FZGl0b3IuZGVsZXRlRm9yd2FyZChlZGl0b3IpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoc2xhdGVEb20uSG90a2V5cy5pc0RlbGV0ZUxpbmVCYWNrd2FyZChuYXRpdmVFdmVudCkpIHtcbiAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICBpZiAoc2VsZWN0aW9uICYmIHNsYXRlLlJhbmdlLmlzRXhwYW5kZWQoc2VsZWN0aW9uKSkge1xuICAgICAgICAgICAgICBzbGF0ZS5FZGl0b3IuZGVsZXRlRnJhZ21lbnQoZWRpdG9yLCB7XG4gICAgICAgICAgICAgICAgZGlyZWN0aW9uOiAnYmFja3dhcmQnXG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgc2xhdGUuRWRpdG9yLmRlbGV0ZUJhY2t3YXJkKGVkaXRvciwge1xuICAgICAgICAgICAgICAgIHVuaXQ6ICdsaW5lJ1xuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHNsYXRlRG9tLkhvdGtleXMuaXNEZWxldGVMaW5lRm9yd2FyZChuYXRpdmVFdmVudCkpIHtcbiAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICBpZiAoc2VsZWN0aW9uICYmIHNsYXRlLlJhbmdlLmlzRXhwYW5kZWQoc2VsZWN0aW9uKSkge1xuICAgICAgICAgICAgICBzbGF0ZS5FZGl0b3IuZGVsZXRlRnJhZ21lbnQoZWRpdG9yLCB7XG4gICAgICAgICAgICAgICAgZGlyZWN0aW9uOiAnZm9yd2FyZCdcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBzbGF0ZS5FZGl0b3IuZGVsZXRlRm9yd2FyZChlZGl0b3IsIHtcbiAgICAgICAgICAgICAgICB1bml0OiAnbGluZSdcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChzbGF0ZURvbS5Ib3RrZXlzLmlzRGVsZXRlV29yZEJhY2t3YXJkKG5hdGl2ZUV2ZW50KSkge1xuICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgIGlmIChzZWxlY3Rpb24gJiYgc2xhdGUuUmFuZ2UuaXNFeHBhbmRlZChzZWxlY3Rpb24pKSB7XG4gICAgICAgICAgICAgIHNsYXRlLkVkaXRvci5kZWxldGVGcmFnbWVudChlZGl0b3IsIHtcbiAgICAgICAgICAgICAgICBkaXJlY3Rpb246ICdiYWNrd2FyZCdcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBzbGF0ZS5FZGl0b3IuZGVsZXRlQmFja3dhcmQoZWRpdG9yLCB7XG4gICAgICAgICAgICAgICAgdW5pdDogJ3dvcmQnXG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoc2xhdGVEb20uSG90a2V5cy5pc0RlbGV0ZVdvcmRGb3J3YXJkKG5hdGl2ZUV2ZW50KSkge1xuICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgIGlmIChzZWxlY3Rpb24gJiYgc2xhdGUuUmFuZ2UuaXNFeHBhbmRlZChzZWxlY3Rpb24pKSB7XG4gICAgICAgICAgICAgIHNsYXRlLkVkaXRvci5kZWxldGVGcmFnbWVudChlZGl0b3IsIHtcbiAgICAgICAgICAgICAgICBkaXJlY3Rpb246ICdmb3J3YXJkJ1xuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHNsYXRlLkVkaXRvci5kZWxldGVGb3J3YXJkKGVkaXRvciwge1xuICAgICAgICAgICAgICAgIHVuaXQ6ICd3b3JkJ1xuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWYgKHNsYXRlRG9tLklTX0NIUk9NRSB8fCBzbGF0ZURvbS5JU19XRUJLSVQpIHtcbiAgICAgICAgICAgIC8vIENPTVBBVDogQ2hyb21lIGFuZCBTYWZhcmkgc3VwcG9ydCBgYmVmb3JlaW5wdXRgIGV2ZW50IGJ1dCBkbyBub3QgZmlyZVxuICAgICAgICAgICAgLy8gYW4gZXZlbnQgd2hlbiBkZWxldGluZyBiYWNrd2FyZHMgaW4gYSBzZWxlY3RlZCB2b2lkIGlubGluZSBub2RlXG4gICAgICAgICAgICBpZiAoc2VsZWN0aW9uICYmIChzbGF0ZURvbS5Ib3RrZXlzLmlzRGVsZXRlQmFja3dhcmQobmF0aXZlRXZlbnQpIHx8IHNsYXRlRG9tLkhvdGtleXMuaXNEZWxldGVGb3J3YXJkKG5hdGl2ZUV2ZW50KSkgJiYgc2xhdGUuUmFuZ2UuaXNDb2xsYXBzZWQoc2VsZWN0aW9uKSkge1xuICAgICAgICAgICAgICB2YXIgY3VycmVudE5vZGUgPSBzbGF0ZS5Ob2RlLnBhcmVudChlZGl0b3IsIHNlbGVjdGlvbi5hbmNob3IucGF0aCk7XG4gICAgICAgICAgICAgIGlmIChzbGF0ZS5FbGVtZW50LmlzRWxlbWVudChjdXJyZW50Tm9kZSkgJiYgc2xhdGUuRWRpdG9yLmlzVm9pZChlZGl0b3IsIGN1cnJlbnROb2RlKSAmJiAoc2xhdGUuRWRpdG9yLmlzSW5saW5lKGVkaXRvciwgY3VycmVudE5vZGUpIHx8IHNsYXRlLkVkaXRvci5pc0Jsb2NrKGVkaXRvciwgY3VycmVudE5vZGUpKSkge1xuICAgICAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgc2xhdGUuRWRpdG9yLmRlbGV0ZUJhY2t3YXJkKGVkaXRvciwge1xuICAgICAgICAgICAgICAgICAgdW5pdDogJ2Jsb2NrJ1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sIFtyZWFkT25seSwgZWRpdG9yLCBhdHRyaWJ1dGVzLm9uS2V5RG93bl0pLFxuICAgIG9uUGFzdGU6IFJlYWN0LnVzZUNhbGxiYWNrKGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgaWYgKCFyZWFkT25seSAmJiBSZWFjdEVkaXRvci5oYXNFZGl0YWJsZVRhcmdldChlZGl0b3IsIGV2ZW50LnRhcmdldCkgJiYgIWlzRXZlbnRIYW5kbGVkKGV2ZW50LCBhdHRyaWJ1dGVzLm9uUGFzdGUpKSB7XG4gICAgICAgIC8vIENPTVBBVDogQ2VydGFpbiBicm93c2VycyBkb24ndCBzdXBwb3J0IHRoZSBgYmVmb3JlaW5wdXRgIGV2ZW50LCBzbyB3ZVxuICAgICAgICAvLyBmYWxsIGJhY2sgdG8gUmVhY3QncyBgb25QYXN0ZWAgaGVyZSBpbnN0ZWFkLlxuICAgICAgICAvLyBDT01QQVQ6IEZpcmVmb3gsIENocm9tZSBhbmQgU2FmYXJpIGRvbid0IGVtaXQgYGJlZm9yZWlucHV0YCBldmVudHNcbiAgICAgICAgLy8gd2hlbiBcInBhc3RlIHdpdGhvdXQgZm9ybWF0dGluZ1wiIGlzIHVzZWQsIHNvIGZhbGxiYWNrLiAoMjAyMC8wMi8yMClcbiAgICAgICAgLy8gQ09NUEFUOiBTYWZhcmkgSW5wdXRFdmVudHMgZ2VuZXJhdGVkIGJ5IHBhc3Rpbmcgd29uJ3QgaW5jbHVkZVxuICAgICAgICAvLyBhcHBsaWNhdGlvbi94LXNsYXRlLWZyYWdtZW50IGl0ZW1zLCBzbyB1c2UgdGhlXG4gICAgICAgIC8vIENsaXBib2FyZEV2ZW50IGhlcmUuICgyMDIzLzAzLzE1KVxuICAgICAgICBpZiAoIXNsYXRlRG9tLkhBU19CRUZPUkVfSU5QVVRfU1VQUE9SVCB8fCBzbGF0ZURvbS5pc1BsYWluVGV4dE9ubHlQYXN0ZShldmVudC5uYXRpdmVFdmVudCkgfHwgc2xhdGVEb20uSVNfV0VCS0lUKSB7XG4gICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICBSZWFjdEVkaXRvci5pbnNlcnREYXRhKGVkaXRvciwgZXZlbnQuY2xpcGJvYXJkRGF0YSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LCBbcmVhZE9ubHksIGVkaXRvciwgYXR0cmlidXRlcy5vblBhc3RlXSlcbiAgfSksIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KENoaWxkcmVuLCB7XG4gICAgZGVjb3JhdGlvbnM6IGRlY29yYXRpb25zLFxuICAgIG5vZGU6IGVkaXRvcixcbiAgICByZW5kZXJFbGVtZW50OiByZW5kZXJFbGVtZW50LFxuICAgIHJlbmRlclBsYWNlaG9sZGVyOiByZW5kZXJQbGFjZWhvbGRlcixcbiAgICByZW5kZXJMZWFmOiByZW5kZXJMZWFmLFxuICAgIHNlbGVjdGlvbjogZWRpdG9yLnNlbGVjdGlvblxuICB9KSkpKSkpO1xufSk7XG4vKipcbiAqIFRoZSBkZWZhdWx0IHBsYWNlaG9sZGVyIGVsZW1lbnRcbiAqL1xudmFyIERlZmF1bHRQbGFjZWhvbGRlciA9IGZ1bmN0aW9uIERlZmF1bHRQbGFjZWhvbGRlcihfcmVmMikge1xuICB2YXIgYXR0cmlidXRlcyA9IF9yZWYyLmF0dHJpYnV0ZXMsXG4gICAgY2hpbGRyZW4gPSBfcmVmMi5jaGlsZHJlbjtcbiAgcmV0dXJuIChcbiAgICAvKiNfX1BVUkVfXyovXG4gICAgLy8gQ09NUEFUOiBBcnRpZmljaWFsbHkgYWRkIGEgbGluZS1icmVhayB0byB0aGUgZW5kIG9uIHRoZSBwbGFjZWhvbGRlciBlbGVtZW50XG4gICAgLy8gdG8gcHJldmVudCBBbmRyb2lkIElNRXMgdG8gcGljayB1cCBpdHMgY29udGVudCBpbiBhdXRvY29ycmVjdCBhbmQgdG8gYXV0by1jYXBpdGFsaXplIHRoZSBmaXJzdCBsZXR0ZXJcbiAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFwic3BhblwiLCBfb2JqZWN0U3ByZWFkKHt9LCBhdHRyaWJ1dGVzKSwgY2hpbGRyZW4sIHNsYXRlRG9tLklTX0FORFJPSUQgJiYgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJiclwiLCBudWxsKSlcbiAgKTtcbn07XG4vKipcbiAqIEEgZGVmYXVsdCBtZW1vaXplZCBkZWNvcmF0ZSBmdW5jdGlvbi5cbiAqL1xudmFyIGRlZmF1bHREZWNvcmF0ZSA9IGZ1bmN0aW9uIGRlZmF1bHREZWNvcmF0ZSgpIHtcbiAgcmV0dXJuIFtdO1xufTtcbi8qKlxuICogQSBkZWZhdWx0IGltcGxlbWVudCB0byBzY3JvbGwgZG9tIHJhbmdlIGludG8gdmlldy5cbiAqL1xudmFyIGRlZmF1bHRTY3JvbGxTZWxlY3Rpb25JbnRvVmlldyA9IGZ1bmN0aW9uIGRlZmF1bHRTY3JvbGxTZWxlY3Rpb25JbnRvVmlldyhlZGl0b3IsIGRvbVJhbmdlKSB7XG4gIC8vIFRoaXMgd2FzIGFmZmVjdGluZyB0aGUgc2VsZWN0aW9uIG9mIG11bHRpcGxlIGJsb2NrcyBhbmQgZHJhZ2dpbmcgYmVoYXZpb3IsXG4gIC8vIHNvIGVuYWJsZWQgb25seSBpZiB0aGUgc2VsZWN0aW9uIGhhcyBiZWVuIGNvbGxhcHNlZC5cbiAgaWYgKGRvbVJhbmdlLmdldEJvdW5kaW5nQ2xpZW50UmVjdCAmJiAoIWVkaXRvci5zZWxlY3Rpb24gfHwgZWRpdG9yLnNlbGVjdGlvbiAmJiBzbGF0ZS5SYW5nZS5pc0NvbGxhcHNlZChlZGl0b3Iuc2VsZWN0aW9uKSkpIHtcbiAgICB2YXIgbGVhZkVsID0gZG9tUmFuZ2Uuc3RhcnRDb250YWluZXIucGFyZW50RWxlbWVudDtcbiAgICBsZWFmRWwuZ2V0Qm91bmRpbmdDbGllbnRSZWN0ID0gZG9tUmFuZ2UuZ2V0Qm91bmRpbmdDbGllbnRSZWN0LmJpbmQoZG9tUmFuZ2UpO1xuICAgIHNjcm9sbEludG9WaWV3KGxlYWZFbCwge1xuICAgICAgc2Nyb2xsTW9kZTogJ2lmLW5lZWRlZCdcbiAgICB9KTtcbiAgICAvLyBAdHMtZXhwZWN0LWVycm9yIGFuIHVub3J0aG9kb3ggZGVsZXRlIEQ6XG4gICAgZGVsZXRlIGxlYWZFbC5nZXRCb3VuZGluZ0NsaWVudFJlY3Q7XG4gIH1cbn07XG4vKipcbiAqIENoZWNrIGlmIGFuIGV2ZW50IGlzIG92ZXJyaWRlZCBieSBhIGhhbmRsZXIuXG4gKi9cbnZhciBpc0V2ZW50SGFuZGxlZCA9IGZ1bmN0aW9uIGlzRXZlbnRIYW5kbGVkKGV2ZW50LCBoYW5kbGVyKSB7XG4gIGlmICghaGFuZGxlcikge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICAvLyBUaGUgY3VzdG9tIGV2ZW50IGhhbmRsZXIgbWF5IHJldHVybiBhIGJvb2xlYW4gdG8gc3BlY2lmeSB3aGV0aGVyIHRoZSBldmVudFxuICAvLyBzaGFsbCBiZSB0cmVhdGVkIGFzIGJlaW5nIGhhbmRsZWQgb3Igbm90LlxuICB2YXIgc2hvdWxkVHJlYXRFdmVudEFzSGFuZGxlZCA9IGhhbmRsZXIoZXZlbnQpO1xuICBpZiAoc2hvdWxkVHJlYXRFdmVudEFzSGFuZGxlZCAhPSBudWxsKSB7XG4gICAgcmV0dXJuIHNob3VsZFRyZWF0RXZlbnRBc0hhbmRsZWQ7XG4gIH1cbiAgcmV0dXJuIGV2ZW50LmlzRGVmYXVsdFByZXZlbnRlZCgpIHx8IGV2ZW50LmlzUHJvcGFnYXRpb25TdG9wcGVkKCk7XG59O1xuLyoqXG4gKiBDaGVjayBpZiB0aGUgZXZlbnQncyB0YXJnZXQgaXMgYW4gaW5wdXQgZWxlbWVudFxuICovXG52YXIgaXNET01FdmVudFRhcmdldElucHV0ID0gZnVuY3Rpb24gaXNET01FdmVudFRhcmdldElucHV0KGV2ZW50KSB7XG4gIHJldHVybiBzbGF0ZURvbS5pc0RPTU5vZGUoZXZlbnQudGFyZ2V0KSAmJiAoZXZlbnQudGFyZ2V0IGluc3RhbmNlb2YgSFRNTElucHV0RWxlbWVudCB8fCBldmVudC50YXJnZXQgaW5zdGFuY2VvZiBIVE1MVGV4dEFyZWFFbGVtZW50KTtcbn07XG4vKipcbiAqIENoZWNrIGlmIGEgRE9NIGV2ZW50IGlzIG92ZXJyaWRlZCBieSBhIGhhbmRsZXIuXG4gKi9cbnZhciBpc0RPTUV2ZW50SGFuZGxlZCA9IGZ1bmN0aW9uIGlzRE9NRXZlbnRIYW5kbGVkKGV2ZW50LCBoYW5kbGVyKSB7XG4gIGlmICghaGFuZGxlcikge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICAvLyBUaGUgY3VzdG9tIGV2ZW50IGhhbmRsZXIgbWF5IHJldHVybiBhIGJvb2xlYW4gdG8gc3BlY2lmeSB3aGV0aGVyIHRoZSBldmVudFxuICAvLyBzaGFsbCBiZSB0cmVhdGVkIGFzIGJlaW5nIGhhbmRsZWQgb3Igbm90LlxuICB2YXIgc2hvdWxkVHJlYXRFdmVudEFzSGFuZGxlZCA9IGhhbmRsZXIoZXZlbnQpO1xuICBpZiAoc2hvdWxkVHJlYXRFdmVudEFzSGFuZGxlZCAhPSBudWxsKSB7XG4gICAgcmV0dXJuIHNob3VsZFRyZWF0RXZlbnRBc0hhbmRsZWQ7XG4gIH1cbiAgcmV0dXJuIGV2ZW50LmRlZmF1bHRQcmV2ZW50ZWQ7XG59O1xuXG4vKipcbiAqIEEgUmVhY3QgY29udGV4dCBmb3Igc2hhcmluZyB0aGUgYGZvY3VzZWRgIHN0YXRlIG9mIHRoZSBlZGl0b3IuXG4gKi9cbnZhciBGb2N1c2VkQ29udGV4dCA9IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVDb250ZXh0KGZhbHNlKTtcbi8qKlxuICogR2V0IHRoZSBjdXJyZW50IGBmb2N1c2VkYCBzdGF0ZSBvZiB0aGUgZWRpdG9yLlxuICovXG52YXIgdXNlRm9jdXNlZCA9IGZ1bmN0aW9uIHVzZUZvY3VzZWQoKSB7XG4gIHJldHVybiBSZWFjdC51c2VDb250ZXh0KEZvY3VzZWRDb250ZXh0KTtcbn07XG5cbmZ1bmN0aW9uIGlzRXJyb3IoZXJyb3IpIHtcbiAgcmV0dXJuIGVycm9yIGluc3RhbmNlb2YgRXJyb3I7XG59XG4vKipcbiAqIEEgUmVhY3QgY29udGV4dCBmb3Igc2hhcmluZyB0aGUgZWRpdG9yIHNlbGVjdG9yIGNvbnRleHQgaW4gYSB3YXkgdG8gY29udHJvbCByZXJlbmRlcnNcbiAqL1xudmFyIFNsYXRlU2VsZWN0b3JDb250ZXh0ID0gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUNvbnRleHQoe30pO1xudmFyIHJlZkVxdWFsaXR5ID0gZnVuY3Rpb24gcmVmRXF1YWxpdHkoYSwgYikge1xuICByZXR1cm4gYSA9PT0gYjtcbn07XG4vKipcbiAqIHVzZSByZWR1eCBzdHlsZSBzZWxlY3RvcnMgdG8gcHJldmVudCByZXJlbmRlcmluZyBvbiBldmVyeSBrZXlzdHJva2UuXG4gKiBCZWFyIGluIG1pbmQgcmVyZW5kZXJpbmcgY2FuIG9ubHkgcHJldmVudGVkIGlmIHRoZSByZXR1cm5lZCB2YWx1ZSBpcyBhIHZhbHVlIHR5cGUgb3IgZm9yIHJlZmVyZW5jZSB0eXBlcyAoZS5nLiBvYmplY3RzIGFuZCBhcnJheXMpIGFkZCBhIGN1c3RvbSBlcXVhbGl0eSBmdW5jdGlvbi5cbiAqXG4gKiBFeGFtcGxlOlxuICogYGBgXG4gKiAgY29uc3QgaXNTZWxlY3Rpb25BY3RpdmUgPSB1c2VTbGF0ZVNlbGVjdG9yKGVkaXRvciA9PiBCb29sZWFuKGVkaXRvci5zZWxlY3Rpb24pKTtcbiAqIGBgYFxuICovXG5mdW5jdGlvbiB1c2VTbGF0ZVNlbGVjdG9yKHNlbGVjdG9yKSB7XG4gIHZhciBlcXVhbGl0eUZuID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiByZWZFcXVhbGl0eTtcbiAgdmFyIF91c2VSZWR1Y2VyID0gUmVhY3QudXNlUmVkdWNlcihmdW5jdGlvbiAocykge1xuICAgICAgcmV0dXJuIHMgKyAxO1xuICAgIH0sIDApLFxuICAgIF91c2VSZWR1Y2VyMiA9IF9zbGljZWRUb0FycmF5KF91c2VSZWR1Y2VyLCAyKSxcbiAgICBmb3JjZVJlbmRlciA9IF91c2VSZWR1Y2VyMlsxXTtcbiAgdmFyIGNvbnRleHQgPSBSZWFjdC51c2VDb250ZXh0KFNsYXRlU2VsZWN0b3JDb250ZXh0KTtcbiAgaWYgKCFjb250ZXh0KSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiVGhlIGB1c2VTbGF0ZVNlbGVjdG9yYCBob29rIG11c3QgYmUgdXNlZCBpbnNpZGUgdGhlIDxTbGF0ZT4gY29tcG9uZW50J3MgY29udGV4dC5cIik7XG4gIH1cbiAgdmFyIGdldFNsYXRlID0gY29udGV4dC5nZXRTbGF0ZSxcbiAgICBhZGRFdmVudExpc3RlbmVyID0gY29udGV4dC5hZGRFdmVudExpc3RlbmVyO1xuICB2YXIgbGF0ZXN0U3Vic2NyaXB0aW9uQ2FsbGJhY2tFcnJvciA9IFJlYWN0LnVzZVJlZigpO1xuICB2YXIgbGF0ZXN0U2VsZWN0b3IgPSBSZWFjdC51c2VSZWYoZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBudWxsO1xuICB9KTtcbiAgdmFyIGxhdGVzdFNlbGVjdGVkU3RhdGUgPSBSZWFjdC51c2VSZWYobnVsbCk7XG4gIHZhciBzZWxlY3RlZFN0YXRlO1xuICB0cnkge1xuICAgIGlmIChzZWxlY3RvciAhPT0gbGF0ZXN0U2VsZWN0b3IuY3VycmVudCB8fCBsYXRlc3RTdWJzY3JpcHRpb25DYWxsYmFja0Vycm9yLmN1cnJlbnQpIHtcbiAgICAgIHNlbGVjdGVkU3RhdGUgPSBzZWxlY3RvcihnZXRTbGF0ZSgpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc2VsZWN0ZWRTdGF0ZSA9IGxhdGVzdFNlbGVjdGVkU3RhdGUuY3VycmVudDtcbiAgICB9XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIGlmIChsYXRlc3RTdWJzY3JpcHRpb25DYWxsYmFja0Vycm9yLmN1cnJlbnQgJiYgaXNFcnJvcihlcnIpKSB7XG4gICAgICBlcnIubWVzc2FnZSArPSBcIlxcblRoZSBlcnJvciBtYXkgYmUgY29ycmVsYXRlZCB3aXRoIHRoaXMgcHJldmlvdXMgZXJyb3I6XFxuXCIuY29uY2F0KGxhdGVzdFN1YnNjcmlwdGlvbkNhbGxiYWNrRXJyb3IuY3VycmVudC5zdGFjaywgXCJcXG5cXG5cIik7XG4gICAgfVxuICAgIHRocm93IGVycjtcbiAgfVxuICB1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICBsYXRlc3RTZWxlY3Rvci5jdXJyZW50ID0gc2VsZWN0b3I7XG4gICAgbGF0ZXN0U2VsZWN0ZWRTdGF0ZS5jdXJyZW50ID0gc2VsZWN0ZWRTdGF0ZTtcbiAgICBsYXRlc3RTdWJzY3JpcHRpb25DYWxsYmFja0Vycm9yLmN1cnJlbnQgPSB1bmRlZmluZWQ7XG4gIH0pO1xuICB1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBjaGVja0ZvclVwZGF0ZXMoKSB7XG4gICAgICB0cnkge1xuICAgICAgICB2YXIgbmV3U2VsZWN0ZWRTdGF0ZSA9IGxhdGVzdFNlbGVjdG9yLmN1cnJlbnQoZ2V0U2xhdGUoKSk7XG4gICAgICAgIGlmIChlcXVhbGl0eUZuKG5ld1NlbGVjdGVkU3RhdGUsIGxhdGVzdFNlbGVjdGVkU3RhdGUuY3VycmVudCkpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgbGF0ZXN0U2VsZWN0ZWRTdGF0ZS5jdXJyZW50ID0gbmV3U2VsZWN0ZWRTdGF0ZTtcbiAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAvLyB3ZSBpZ25vcmUgYWxsIGVycm9ycyBoZXJlLCBzaW5jZSB3aGVuIHRoZSBjb21wb25lbnRcbiAgICAgICAgLy8gaXMgcmUtcmVuZGVyZWQsIHRoZSBzZWxlY3RvcnMgYXJlIGNhbGxlZCBhZ2FpbiwgYW5kXG4gICAgICAgIC8vIHdpbGwgdGhyb3cgYWdhaW4sIGlmIG5laXRoZXIgcHJvcHMgbm9yIHN0b3JlIHN0YXRlXG4gICAgICAgIC8vIGNoYW5nZWRcbiAgICAgICAgaWYgKGVyciBpbnN0YW5jZW9mIEVycm9yKSB7XG4gICAgICAgICAgbGF0ZXN0U3Vic2NyaXB0aW9uQ2FsbGJhY2tFcnJvci5jdXJyZW50ID0gZXJyO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGxhdGVzdFN1YnNjcmlwdGlvbkNhbGxiYWNrRXJyb3IuY3VycmVudCA9IG5ldyBFcnJvcihTdHJpbmcoZXJyKSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGZvcmNlUmVuZGVyKCk7XG4gICAgfVxuICAgIHZhciB1bnN1YnNjcmliZSA9IGFkZEV2ZW50TGlzdGVuZXIoY2hlY2tGb3JVcGRhdGVzKTtcbiAgICBjaGVja0ZvclVwZGF0ZXMoKTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHVuc3Vic2NyaWJlKCk7XG4gICAgfTtcbiAgfSxcbiAgLy8gZG9uJ3QgcmVyZW5kZXIgb24gZXF1YWxpdHlGbiBjaGFuZ2Ugc2luY2Ugd2Ugd2FudCB0byBiZSBhYmxlIHRvIGRlZmluZSBpdCBpbmxpbmVcbiAgW2FkZEV2ZW50TGlzdGVuZXIsIGdldFNsYXRlXSk7XG4gIHJldHVybiBzZWxlY3RlZFN0YXRlO1xufVxuLyoqXG4gKiBDcmVhdGUgc2VsZWN0b3IgY29udGV4dCB3aXRoIGVkaXRvciB1cGRhdGluZyBvbiBldmVyeSBlZGl0b3IgY2hhbmdlXG4gKi9cbmZ1bmN0aW9uIHVzZVNlbGVjdG9yQ29udGV4dChlZGl0b3IpIHtcbiAgdmFyIGV2ZW50TGlzdGVuZXJzID0gUmVhY3QudXNlUmVmKFtdKS5jdXJyZW50O1xuICB2YXIgc2xhdGVSZWYgPSBSZWFjdC51c2VSZWYoe1xuICAgIGVkaXRvcjogZWRpdG9yXG4gIH0pLmN1cnJlbnQ7XG4gIHZhciBvbkNoYW5nZSA9IFJlYWN0LnVzZUNhbGxiYWNrKGZ1bmN0aW9uIChlZGl0b3IpIHtcbiAgICBzbGF0ZVJlZi5lZGl0b3IgPSBlZGl0b3I7XG4gICAgZXZlbnRMaXN0ZW5lcnMuZm9yRWFjaChmdW5jdGlvbiAobGlzdGVuZXIpIHtcbiAgICAgIHJldHVybiBsaXN0ZW5lcihlZGl0b3IpO1xuICAgIH0pO1xuICB9LCBbZXZlbnRMaXN0ZW5lcnMsIHNsYXRlUmVmXSk7XG4gIHZhciBzZWxlY3RvckNvbnRleHQgPSBSZWFjdC51c2VNZW1vKGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgZ2V0U2xhdGU6IGZ1bmN0aW9uIGdldFNsYXRlKCkge1xuICAgICAgICByZXR1cm4gc2xhdGVSZWYuZWRpdG9yO1xuICAgICAgfSxcbiAgICAgIGFkZEV2ZW50TGlzdGVuZXI6IGZ1bmN0aW9uIGFkZEV2ZW50TGlzdGVuZXIoY2FsbGJhY2spIHtcbiAgICAgICAgZXZlbnRMaXN0ZW5lcnMucHVzaChjYWxsYmFjayk7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgZXZlbnRMaXN0ZW5lcnMuc3BsaWNlKGV2ZW50TGlzdGVuZXJzLmluZGV4T2YoY2FsbGJhY2spLCAxKTtcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICB9O1xuICB9LCBbZXZlbnRMaXN0ZW5lcnMsIHNsYXRlUmVmXSk7XG4gIHJldHVybiB7XG4gICAgc2VsZWN0b3JDb250ZXh0OiBzZWxlY3RvckNvbnRleHQsXG4gICAgb25DaGFuZ2U6IG9uQ2hhbmdlXG4gIH07XG59XG5cbnZhciBSRUFDVF9NQUpPUl9WRVJTSU9OID0gcGFyc2VJbnQoUmVhY3QudmVyc2lvbi5zcGxpdCgnLicpWzBdLCAxMCk7XG5cbnZhciBfZXhjbHVkZWQgPSBbXCJlZGl0b3JcIiwgXCJjaGlsZHJlblwiLCBcIm9uQ2hhbmdlXCIsIFwib25TZWxlY3Rpb25DaGFuZ2VcIiwgXCJvblZhbHVlQ2hhbmdlXCIsIFwiaW5pdGlhbFZhbHVlXCJdO1xuLyoqXG4gKiBBIHdyYXBwZXIgYXJvdW5kIHRoZSBwcm92aWRlciB0byBoYW5kbGUgYG9uQ2hhbmdlYCBldmVudHMsIGJlY2F1c2UgdGhlIGVkaXRvclxuICogaXMgYSBtdXRhYmxlIHNpbmdsZXRvbiBzbyBpdCB3b24ndCBldmVyIHJlZ2lzdGVyIGFzIFwiY2hhbmdlZFwiIG90aGVyd2lzZS5cbiAqL1xudmFyIFNsYXRlID0gZnVuY3Rpb24gU2xhdGUocHJvcHMpIHtcbiAgdmFyIGVkaXRvciA9IHByb3BzLmVkaXRvcixcbiAgICBjaGlsZHJlbiA9IHByb3BzLmNoaWxkcmVuLFxuICAgIG9uQ2hhbmdlID0gcHJvcHMub25DaGFuZ2UsXG4gICAgb25TZWxlY3Rpb25DaGFuZ2UgPSBwcm9wcy5vblNlbGVjdGlvbkNoYW5nZSxcbiAgICBvblZhbHVlQ2hhbmdlID0gcHJvcHMub25WYWx1ZUNoYW5nZSxcbiAgICBpbml0aWFsVmFsdWUgPSBwcm9wcy5pbml0aWFsVmFsdWUsXG4gICAgcmVzdCA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhwcm9wcywgX2V4Y2x1ZGVkKTtcbiAgdmFyIF9SZWFjdCR1c2VTdGF0ZSA9IFJlYWN0LnVzZVN0YXRlKGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmICghc2xhdGUuTm9kZS5pc05vZGVMaXN0KGluaXRpYWxWYWx1ZSkpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiW1NsYXRlXSBpbml0aWFsVmFsdWUgaXMgaW52YWxpZCEgRXhwZWN0ZWQgYSBsaXN0IG9mIGVsZW1lbnRzIGJ1dCBnb3Q6IFwiLmNvbmNhdChzbGF0ZS5TY3J1YmJlci5zdHJpbmdpZnkoaW5pdGlhbFZhbHVlKSkpO1xuICAgICAgfVxuICAgICAgaWYgKCFzbGF0ZS5FZGl0b3IuaXNFZGl0b3IoZWRpdG9yKSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJbU2xhdGVdIGVkaXRvciBpcyBpbnZhbGlkISBZb3UgcGFzc2VkOiBcIi5jb25jYXQoc2xhdGUuU2NydWJiZXIuc3RyaW5naWZ5KGVkaXRvcikpKTtcbiAgICAgIH1cbiAgICAgIGVkaXRvci5jaGlsZHJlbiA9IGluaXRpYWxWYWx1ZTtcbiAgICAgIE9iamVjdC5hc3NpZ24oZWRpdG9yLCByZXN0KTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHY6IDAsXG4gICAgICAgIGVkaXRvcjogZWRpdG9yXG4gICAgICB9O1xuICAgIH0pLFxuICAgIF9SZWFjdCR1c2VTdGF0ZTIgPSBfc2xpY2VkVG9BcnJheShfUmVhY3QkdXNlU3RhdGUsIDIpLFxuICAgIGNvbnRleHQgPSBfUmVhY3QkdXNlU3RhdGUyWzBdLFxuICAgIHNldENvbnRleHQgPSBfUmVhY3QkdXNlU3RhdGUyWzFdO1xuICB2YXIgX3VzZVNlbGVjdG9yQ29udGV4dCA9IHVzZVNlbGVjdG9yQ29udGV4dChlZGl0b3IpLFxuICAgIHNlbGVjdG9yQ29udGV4dCA9IF91c2VTZWxlY3RvckNvbnRleHQuc2VsZWN0b3JDb250ZXh0LFxuICAgIGhhbmRsZVNlbGVjdG9yQ2hhbmdlID0gX3VzZVNlbGVjdG9yQ29udGV4dC5vbkNoYW5nZTtcbiAgdmFyIG9uQ29udGV4dENoYW5nZSA9IFJlYWN0LnVzZUNhbGxiYWNrKGZ1bmN0aW9uIChvcHRpb25zKSB7XG4gICAgdmFyIF9vcHRpb25zJG9wZXJhdGlvbjtcbiAgICBpZiAob25DaGFuZ2UpIHtcbiAgICAgIG9uQ2hhbmdlKGVkaXRvci5jaGlsZHJlbik7XG4gICAgfVxuICAgIHN3aXRjaCAob3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgfHwgKF9vcHRpb25zJG9wZXJhdGlvbiA9IG9wdGlvbnMub3BlcmF0aW9uKSA9PT0gbnVsbCB8fCBfb3B0aW9ucyRvcGVyYXRpb24gPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9vcHRpb25zJG9wZXJhdGlvbi50eXBlKSB7XG4gICAgICBjYXNlICdzZXRfc2VsZWN0aW9uJzpcbiAgICAgICAgb25TZWxlY3Rpb25DaGFuZ2UgPT09IG51bGwgfHwgb25TZWxlY3Rpb25DaGFuZ2UgPT09IHZvaWQgMCB8fCBvblNlbGVjdGlvbkNoYW5nZShlZGl0b3Iuc2VsZWN0aW9uKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICBvblZhbHVlQ2hhbmdlID09PSBudWxsIHx8IG9uVmFsdWVDaGFuZ2UgPT09IHZvaWQgMCB8fCBvblZhbHVlQ2hhbmdlKGVkaXRvci5jaGlsZHJlbik7XG4gICAgfVxuICAgIHNldENvbnRleHQoZnVuY3Rpb24gKHByZXZDb250ZXh0KSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICB2OiBwcmV2Q29udGV4dC52ICsgMSxcbiAgICAgICAgZWRpdG9yOiBlZGl0b3JcbiAgICAgIH07XG4gICAgfSk7XG4gICAgaGFuZGxlU2VsZWN0b3JDaGFuZ2UoZWRpdG9yKTtcbiAgfSwgW2VkaXRvciwgaGFuZGxlU2VsZWN0b3JDaGFuZ2UsIG9uQ2hhbmdlLCBvblNlbGVjdGlvbkNoYW5nZSwgb25WYWx1ZUNoYW5nZV0pO1xuICBSZWFjdC51c2VFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgIHNsYXRlRG9tLkVESVRPUl9UT19PTl9DSEFOR0Uuc2V0KGVkaXRvciwgb25Db250ZXh0Q2hhbmdlKTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgc2xhdGVEb20uRURJVE9SX1RPX09OX0NIQU5HRS5zZXQoZWRpdG9yLCBmdW5jdGlvbiAoKSB7fSk7XG4gICAgfTtcbiAgfSwgW2VkaXRvciwgb25Db250ZXh0Q2hhbmdlXSk7XG4gIHZhciBfdXNlU3RhdGUgPSBSZWFjdC51c2VTdGF0ZShSZWFjdEVkaXRvci5pc0ZvY3VzZWQoZWRpdG9yKSksXG4gICAgX3VzZVN0YXRlMiA9IF9zbGljZWRUb0FycmF5KF91c2VTdGF0ZSwgMiksXG4gICAgaXNGb2N1c2VkID0gX3VzZVN0YXRlMlswXSxcbiAgICBzZXRJc0ZvY3VzZWQgPSBfdXNlU3RhdGUyWzFdO1xuICBSZWFjdC51c2VFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgIHNldElzRm9jdXNlZChSZWFjdEVkaXRvci5pc0ZvY3VzZWQoZWRpdG9yKSk7XG4gIH0sIFtlZGl0b3JdKTtcbiAgdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGZuID0gZnVuY3Rpb24gZm4oKSB7XG4gICAgICByZXR1cm4gc2V0SXNGb2N1c2VkKFJlYWN0RWRpdG9yLmlzRm9jdXNlZChlZGl0b3IpKTtcbiAgICB9O1xuICAgIGlmIChSRUFDVF9NQUpPUl9WRVJTSU9OID49IDE3KSB7XG4gICAgICAvLyBJbiBSZWFjdCA+PSAxNyBvbkZvY3VzIGFuZCBvbkJsdXIgbGlzdGVuIHRvIHRoZSBmb2N1c2luIGFuZCBmb2N1c291dCBldmVudHMgZHVyaW5nIHRoZSBidWJibGluZyBwaGFzZS5cbiAgICAgIC8vIFRoZXJlZm9yZSBpbiBvcmRlciBmb3IgPEVkaXRhYmxlIC8+J3MgaGFuZGxlcnMgdG8gcnVuIGZpcnN0LCB3aGljaCBpcyBuZWNlc3NhcnkgZm9yIFJlYWN0RWRpdG9yLmlzRm9jdXNlZChlZGl0b3IpXG4gICAgICAvLyB0byByZXR1cm4gdGhlIGNvcnJlY3QgdmFsdWUsIHdlIGhhdmUgdG8gbGlzdGVuIHRvIHRoZSBmb2N1c2luIGFuZCBmb2N1c291dCBldmVudHMgd2l0aG91dCB1c2VDYXB0dXJlIGhlcmUuXG4gICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdmb2N1c2luJywgZm4pO1xuICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignZm9jdXNvdXQnLCBmbik7XG4gICAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdmb2N1c2luJywgZm4pO1xuICAgICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdmb2N1c291dCcsIGZuKTtcbiAgICAgIH07XG4gICAgfSBlbHNlIHtcbiAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2ZvY3VzJywgZm4sIHRydWUpO1xuICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignYmx1cicsIGZuLCB0cnVlKTtcbiAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2ZvY3VzJywgZm4sIHRydWUpO1xuICAgICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdibHVyJywgZm4sIHRydWUpO1xuICAgICAgfTtcbiAgICB9XG4gIH0sIFtdKTtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFNsYXRlU2VsZWN0b3JDb250ZXh0LlByb3ZpZGVyLCB7XG4gICAgdmFsdWU6IHNlbGVjdG9yQ29udGV4dFxuICB9LCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChTbGF0ZUNvbnRleHQuUHJvdmlkZXIsIHtcbiAgICB2YWx1ZTogY29udGV4dFxuICB9LCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChFZGl0b3JDb250ZXh0LlByb3ZpZGVyLCB7XG4gICAgdmFsdWU6IGNvbnRleHQuZWRpdG9yXG4gIH0sIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KEZvY3VzZWRDb250ZXh0LlByb3ZpZGVyLCB7XG4gICAgdmFsdWU6IGlzRm9jdXNlZFxuICB9LCBjaGlsZHJlbikpKSk7XG59O1xuXG4vKipcbiAqIEdldCB0aGUgY3VycmVudCBlZGl0b3Igb2JqZWN0IGZyb20gdGhlIFJlYWN0IGNvbnRleHQuXG4gKiBAZGVwcmVjYXRlZCBVc2UgdXNlU2xhdGVTdGF0aWMgaW5zdGVhZC5cbiAqL1xudmFyIHVzZUVkaXRvciA9IGZ1bmN0aW9uIHVzZUVkaXRvcigpIHtcbiAgdmFyIGVkaXRvciA9IFJlYWN0LnVzZUNvbnRleHQoRWRpdG9yQ29udGV4dCk7XG4gIGlmICghZWRpdG9yKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiVGhlIGB1c2VFZGl0b3JgIGhvb2sgbXVzdCBiZSB1c2VkIGluc2lkZSB0aGUgPFNsYXRlPiBjb21wb25lbnQncyBjb250ZXh0LlwiKTtcbiAgfVxuICByZXR1cm4gZWRpdG9yO1xufTtcblxuLyoqXG4gKiBHZXQgdGhlIGN1cnJlbnQgc2xhdGUgc2VsZWN0aW9uLlxuICogT25seSB0cmlnZ2VycyBhIHJlcmVuZGVyIHdoZW4gdGhlIHNlbGVjdGlvbiBhY3R1YWxseSBjaGFuZ2VzXG4gKi9cbnZhciB1c2VTbGF0ZVNlbGVjdGlvbiA9IGZ1bmN0aW9uIHVzZVNsYXRlU2VsZWN0aW9uKCkge1xuICByZXR1cm4gdXNlU2xhdGVTZWxlY3RvcihmdW5jdGlvbiAoZWRpdG9yKSB7XG4gICAgcmV0dXJuIGVkaXRvci5zZWxlY3Rpb247XG4gIH0sIGlzU2VsZWN0aW9uRXF1YWwpO1xufTtcbnZhciBpc1NlbGVjdGlvbkVxdWFsID0gZnVuY3Rpb24gaXNTZWxlY3Rpb25FcXVhbChhLCBiKSB7XG4gIGlmICghYSAmJiAhYikgcmV0dXJuIHRydWU7XG4gIGlmICghYSB8fCAhYikgcmV0dXJuIGZhbHNlO1xuICByZXR1cm4gc2xhdGUuUmFuZ2UuZXF1YWxzKGEsIGIpO1xufTtcblxuLyoqXG4gKiBgd2l0aFJlYWN0YCBhZGRzIFJlYWN0IGFuZCBET00gc3BlY2lmaWMgYmVoYXZpb3JzIHRvIHRoZSBlZGl0b3IuXG4gKlxuICogSWYgeW91IGFyZSB1c2luZyBUeXBlU2NyaXB0LCB5b3UgbXVzdCBleHRlbmQgU2xhdGUncyBDdXN0b21UeXBlcyB0byB1c2VcbiAqIHRoaXMgcGx1Z2luLlxuICpcbiAqIFNlZSBodHRwczovL2RvY3Muc2xhdGVqcy5vcmcvY29uY2VwdHMvMTEtdHlwZXNjcmlwdCB0byBsZWFybiBob3cuXG4gKi9cbnZhciB3aXRoUmVhY3QgPSBmdW5jdGlvbiB3aXRoUmVhY3QoZWRpdG9yKSB7XG4gIHZhciBjbGlwYm9hcmRGb3JtYXRLZXkgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6ICd4LXNsYXRlLWZyYWdtZW50JztcbiAgdmFyIGUgPSBlZGl0b3I7XG4gIGUgPSBzbGF0ZURvbS53aXRoRE9NKGUsIGNsaXBib2FyZEZvcm1hdEtleSk7XG4gIHZhciBfZSA9IGUsXG4gICAgb25DaGFuZ2UgPSBfZS5vbkNoYW5nZTtcbiAgZS5vbkNoYW5nZSA9IGZ1bmN0aW9uIChvcHRpb25zKSB7XG4gICAgLy8gQ09NUEFUOiBSZWFjdCA8IDE4IGRvZXNuJ3QgYmF0Y2ggYHNldFN0YXRlYCBob29rIGNhbGxzLCB3aGljaCBtZWFuc1xuICAgIC8vIHRoYXQgdGhlIGNoaWxkcmVuIGFuZCBzZWxlY3Rpb24gY2FuIGdldCBvdXQgb2Ygc3luYyBmb3Igb25lIHJlbmRlclxuICAgIC8vIHBhc3MuIFNvIHdlIGhhdmUgdG8gdXNlIHRoaXMgdW5zdGFibGUgQVBJIHRvIGVuc3VyZSBpdCBiYXRjaGVzIHRoZW0uXG4gICAgLy8gKDIwMTkvMTIvMDMpXG4gICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JlYWN0L2lzc3Vlcy8xNDI1OSNpc3N1ZWNvbW1lbnQtNDM5NzAyMzY3XG4gICAgdmFyIG1heWJlQmF0Y2hVcGRhdGVzID0gUkVBQ1RfTUFKT1JfVkVSU0lPTiA8IDE4ID8gUmVhY3RET00udW5zdGFibGVfYmF0Y2hlZFVwZGF0ZXMgOiBmdW5jdGlvbiAoY2FsbGJhY2spIHtcbiAgICAgIHJldHVybiBjYWxsYmFjaygpO1xuICAgIH07XG4gICAgbWF5YmVCYXRjaFVwZGF0ZXMoZnVuY3Rpb24gKCkge1xuICAgICAgb25DaGFuZ2Uob3B0aW9ucyk7XG4gICAgfSk7XG4gIH07XG4gIHJldHVybiBlO1xufTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdOT0RFX1RPX0lOREVYJywge1xuXHRlbnVtZXJhYmxlOiB0cnVlLFxuXHRnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHNsYXRlRG9tLk5PREVfVE9fSU5ERVg7IH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdOT0RFX1RPX1BBUkVOVCcsIHtcblx0ZW51bWVyYWJsZTogdHJ1ZSxcblx0Z2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBzbGF0ZURvbS5OT0RFX1RPX1BBUkVOVDsgfVxufSk7XG5leHBvcnRzLkRlZmF1bHRFbGVtZW50ID0gRGVmYXVsdEVsZW1lbnQ7XG5leHBvcnRzLkRlZmF1bHRMZWFmID0gRGVmYXVsdExlYWY7XG5leHBvcnRzLkRlZmF1bHRQbGFjZWhvbGRlciA9IERlZmF1bHRQbGFjZWhvbGRlcjtcbmV4cG9ydHMuRWRpdGFibGUgPSBFZGl0YWJsZTtcbmV4cG9ydHMuUmVhY3RFZGl0b3IgPSBSZWFjdEVkaXRvcjtcbmV4cG9ydHMuU2xhdGUgPSBTbGF0ZTtcbmV4cG9ydHMudXNlQ29tcG9zaW5nID0gdXNlQ29tcG9zaW5nO1xuZXhwb3J0cy51c2VFZGl0b3IgPSB1c2VFZGl0b3I7XG5leHBvcnRzLnVzZUZvY3VzZWQgPSB1c2VGb2N1c2VkO1xuZXhwb3J0cy51c2VSZWFkT25seSA9IHVzZVJlYWRPbmx5O1xuZXhwb3J0cy51c2VTZWxlY3RlZCA9IHVzZVNlbGVjdGVkO1xuZXhwb3J0cy51c2VTbGF0ZSA9IHVzZVNsYXRlO1xuZXhwb3J0cy51c2VTbGF0ZVNlbGVjdGlvbiA9IHVzZVNsYXRlU2VsZWN0aW9uO1xuZXhwb3J0cy51c2VTbGF0ZVNlbGVjdG9yID0gdXNlU2xhdGVTZWxlY3RvcjtcbmV4cG9ydHMudXNlU2xhdGVTdGF0aWMgPSB1c2VTbGF0ZVN0YXRpYztcbmV4cG9ydHMudXNlU2xhdGVXaXRoViA9IHVzZVNsYXRlV2l0aFY7XG5leHBvcnRzLndpdGhSZWFjdCA9IHdpdGhSZWFjdDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(pages-dir-node)/../../../../node_modules/.pnpm/slate-react@0.112.1_react-dom@19.0.0_react@19.0.0__react@19.0.0_slate-dom@0.112.2_slate@0.112.0__slate@0.112.0/node_modules/slate-react/dist/index.js\n");

/***/ }),

/***/ "../../../../node_modules/.pnpm/slate-react@0.112.1_react-dom@19.0.0_react@19.0.0__react@19.0.0_slate-dom@0.112.2_slate@0.112.0__slate@0.112.0/node_modules/slate-react/dist/index.js":
/*!********************************************************************************************************************************************************************************************!*\
  !*** ../../../../node_modules/.pnpm/slate-react@0.112.1_react-dom@19.0.0_react@19.0.0__react@19.0.0_slate-dom@0.112.2_slate@0.112.0__slate@0.112.0/node_modules/slate-react/dist/index.js ***!
  \********************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nvar getDirection = __webpack_require__(/*! direction */ \"../../../../node_modules/.pnpm/direction@1.0.4/node_modules/direction/index.js\");\nvar debounce = __webpack_require__(/*! lodash/debounce */ \"../../../../node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/debounce.js\");\nvar throttle = __webpack_require__(/*! lodash/throttle */ \"../../../../node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/throttle.js\");\nvar React = __webpack_require__(/*! react */ \"react\");\nvar scrollIntoView = __webpack_require__(/*! scroll-into-view-if-needed */ \"../../../../node_modules/.pnpm/scroll-into-view-if-needed@3.1.0/node_modules/scroll-into-view-if-needed/dist/index.cjs\");\nvar slate = __webpack_require__(/*! slate */ \"../../../../node_modules/.pnpm/slate@0.112.0/node_modules/slate/dist/index.js\");\nvar slateDom = __webpack_require__(/*! slate-dom */ \"../../../../node_modules/.pnpm/slate-dom@0.112.2_slate@0.112.0/node_modules/slate-dom/dist/index.js\");\nvar resizeObserver = __webpack_require__(/*! @juggle/resize-observer */ \"../../../../node_modules/.pnpm/@juggle+resize-observer@3.4.0/node_modules/@juggle/resize-observer/lib/exports/resize-observer.umd.js\");\nvar ReactDOM = __webpack_require__(/*! react-dom */ \"react-dom\");\n\nfunction unwrapExports (x) {\n\treturn x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;\n}\n\nfunction createCommonjsModule(fn, module) {\n\treturn module = { exports: {} }, fn(module, module.exports), module.exports;\n}\n\nvar arrayWithHoles = createCommonjsModule(function (module) {\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\nmodule.exports = _arrayWithHoles, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n});\n\nunwrapExports(arrayWithHoles);\n\nvar iterableToArrayLimit = createCommonjsModule(function (module) {\nfunction _iterableToArrayLimit(r, l) {\n  var t = null == r ? null : \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"];\n  if (null != t) {\n    var e,\n      n,\n      i,\n      u,\n      a = [],\n      f = !0,\n      o = !1;\n    try {\n      if (i = (t = t.call(r)).next, 0 === l) {\n        if (Object(t) !== t) return;\n        f = !1;\n      } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0);\n    } catch (r) {\n      o = !0, n = r;\n    } finally {\n      try {\n        if (!f && null != t[\"return\"] && (u = t[\"return\"](), Object(u) !== u)) return;\n      } finally {\n        if (o) throw n;\n      }\n    }\n    return a;\n  }\n}\nmodule.exports = _iterableToArrayLimit, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n});\n\nunwrapExports(iterableToArrayLimit);\n\nvar arrayLikeToArray = createCommonjsModule(function (module) {\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n  return arr2;\n}\nmodule.exports = _arrayLikeToArray, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n});\n\nunwrapExports(arrayLikeToArray);\n\nvar unsupportedIterableToArray = createCommonjsModule(function (module) {\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return arrayLikeToArray(o, minLen);\n}\nmodule.exports = _unsupportedIterableToArray, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n});\n\nunwrapExports(unsupportedIterableToArray);\n\nvar nonIterableRest = createCommonjsModule(function (module) {\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nmodule.exports = _nonIterableRest, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n});\n\nunwrapExports(nonIterableRest);\n\nvar slicedToArray = createCommonjsModule(function (module) {\nfunction _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}\nmodule.exports = _slicedToArray, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n});\n\nvar _slicedToArray = unwrapExports(slicedToArray);\n\nvar objectWithoutPropertiesLoose = createCommonjsModule(function (module) {\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n  return target;\n}\nmodule.exports = _objectWithoutPropertiesLoose, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n});\n\nunwrapExports(objectWithoutPropertiesLoose);\n\nvar objectWithoutProperties = createCommonjsModule(function (module) {\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n  return target;\n}\nmodule.exports = _objectWithoutProperties, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n});\n\nvar _objectWithoutProperties = unwrapExports(objectWithoutProperties);\n\nvar _typeof_1 = createCommonjsModule(function (module) {\nfunction _typeof(o) {\n  \"@babel/helpers - typeof\";\n\n  return (module.exports = _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) {\n    return typeof o;\n  } : function (o) {\n    return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o;\n  }, module.exports.__esModule = true, module.exports[\"default\"] = module.exports), _typeof(o);\n}\nmodule.exports = _typeof, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n});\n\nunwrapExports(_typeof_1);\n\nvar toPrimitive = createCommonjsModule(function (module) {\nvar _typeof = _typeof_1[\"default\"];\nfunction _toPrimitive(input, hint) {\n  if (_typeof(input) !== \"object\" || input === null) return input;\n  var prim = input[Symbol.toPrimitive];\n  if (prim !== undefined) {\n    var res = prim.call(input, hint || \"default\");\n    if (_typeof(res) !== \"object\") return res;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (hint === \"string\" ? String : Number)(input);\n}\nmodule.exports = _toPrimitive, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n});\n\nunwrapExports(toPrimitive);\n\nvar toPropertyKey = createCommonjsModule(function (module) {\nvar _typeof = _typeof_1[\"default\"];\n\nfunction _toPropertyKey(arg) {\n  var key = toPrimitive(arg, \"string\");\n  return _typeof(key) === \"symbol\" ? key : String(key);\n}\nmodule.exports = _toPropertyKey, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n});\n\nunwrapExports(toPropertyKey);\n\nvar defineProperty = createCommonjsModule(function (module) {\nfunction _defineProperty(obj, key, value) {\n  key = toPropertyKey(key);\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nmodule.exports = _defineProperty, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n});\n\nvar _defineProperty = unwrapExports(defineProperty);\n\n/**\n * A React context for sharing the editor object.\n */\nvar EditorContext = /*#__PURE__*/React.createContext(null);\n/**\n * Get the current editor object from the React context.\n */\nvar useSlateStatic = function useSlateStatic() {\n  var editor = React.useContext(EditorContext);\n  if (!editor) {\n    throw new Error(\"The `useSlateStatic` hook must be used inside the <Slate> component's context.\");\n  }\n  return editor;\n};\n\n// eslint-disable-next-line no-redeclare\nvar ReactEditor = slateDom.DOMEditor;\n\nfunction ownKeys$5(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread$5(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$5(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$5(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\n// https://github.com/facebook/draft-js/blob/main/src/component/handlers/composition/DraftEditorCompositionHandler.js#L41\n// When using keyboard English association function, conpositionEnd triggered too fast, resulting in after `insertText` still maintain association state.\nvar RESOLVE_DELAY = 25;\n// Time with no user interaction before the current user action is considered as done.\nvar FLUSH_DELAY = 200;\n// Replace with `const debug = console.log` to debug\nvar debug = function debug() {};\n// Type guard to check if a value is a DataTransfer\nvar isDataTransfer = function isDataTransfer(value) {\n  return (value === null || value === void 0 ? void 0 : value.constructor.name) === 'DataTransfer';\n};\nfunction createAndroidInputManager(_ref) {\n  var editor = _ref.editor,\n    scheduleOnDOMSelectionChange = _ref.scheduleOnDOMSelectionChange,\n    onDOMSelectionChange = _ref.onDOMSelectionChange;\n  var flushing = false;\n  var compositionEndTimeoutId = null;\n  var flushTimeoutId = null;\n  var actionTimeoutId = null;\n  var idCounter = 0;\n  var insertPositionHint = false;\n  var applyPendingSelection = function applyPendingSelection() {\n    var pendingSelection = slateDom.EDITOR_TO_PENDING_SELECTION.get(editor);\n    slateDom.EDITOR_TO_PENDING_SELECTION[\"delete\"](editor);\n    if (pendingSelection) {\n      var selection = editor.selection;\n      var normalized = slateDom.normalizeRange(editor, pendingSelection);\n      if (normalized && (!selection || !slate.Range.equals(normalized, selection))) {\n        slate.Transforms.select(editor, normalized);\n      }\n    }\n  };\n  var performAction = function performAction() {\n    var action = slateDom.EDITOR_TO_PENDING_ACTION.get(editor);\n    slateDom.EDITOR_TO_PENDING_ACTION[\"delete\"](editor);\n    if (!action) {\n      return;\n    }\n    if (action.at) {\n      var target = slate.Point.isPoint(action.at) ? slateDom.normalizePoint(editor, action.at) : slateDom.normalizeRange(editor, action.at);\n      if (!target) {\n        return;\n      }\n      var _targetRange = slate.Editor.range(editor, target);\n      if (!editor.selection || !slate.Range.equals(editor.selection, _targetRange)) {\n        slate.Transforms.select(editor, target);\n      }\n    }\n    action.run();\n  };\n  var flush = function flush() {\n    if (flushTimeoutId) {\n      clearTimeout(flushTimeoutId);\n      flushTimeoutId = null;\n    }\n    if (actionTimeoutId) {\n      clearTimeout(actionTimeoutId);\n      actionTimeoutId = null;\n    }\n    if (!hasPendingDiffs() && !hasPendingAction()) {\n      applyPendingSelection();\n      return;\n    }\n    if (!flushing) {\n      flushing = true;\n      setTimeout(function () {\n        return flushing = false;\n      });\n    }\n    if (hasPendingAction()) {\n      flushing = 'action';\n    }\n    var selectionRef = editor.selection && slate.Editor.rangeRef(editor, editor.selection, {\n      affinity: 'forward'\n    });\n    slateDom.EDITOR_TO_USER_MARKS.set(editor, editor.marks);\n    debug('flush', slateDom.EDITOR_TO_PENDING_ACTION.get(editor), slateDom.EDITOR_TO_PENDING_DIFFS.get(editor));\n    var scheduleSelectionChange = hasPendingDiffs();\n    var diff;\n    while (diff = (_EDITOR_TO_PENDING_DI = slateDom.EDITOR_TO_PENDING_DIFFS.get(editor)) === null || _EDITOR_TO_PENDING_DI === void 0 ? void 0 : _EDITOR_TO_PENDING_DI[0]) {\n      var _EDITOR_TO_PENDING_DI, _EDITOR_TO_PENDING_DI2;\n      var pendingMarks = slateDom.EDITOR_TO_PENDING_INSERTION_MARKS.get(editor);\n      if (pendingMarks !== undefined) {\n        slateDom.EDITOR_TO_PENDING_INSERTION_MARKS[\"delete\"](editor);\n        editor.marks = pendingMarks;\n      }\n      if (pendingMarks && insertPositionHint === false) {\n        insertPositionHint = null;\n      }\n      var range = slateDom.targetRange(diff);\n      if (!editor.selection || !slate.Range.equals(editor.selection, range)) {\n        slate.Transforms.select(editor, range);\n      }\n      if (diff.diff.text) {\n        slate.Editor.insertText(editor, diff.diff.text);\n      } else {\n        slate.Editor.deleteFragment(editor);\n      }\n      // Remove diff only after we have applied it to account for it when transforming\n      // pending ranges.\n      slateDom.EDITOR_TO_PENDING_DIFFS.set(editor, (_EDITOR_TO_PENDING_DI2 = slateDom.EDITOR_TO_PENDING_DIFFS.get(editor)) === null || _EDITOR_TO_PENDING_DI2 === void 0 ? void 0 : _EDITOR_TO_PENDING_DI2.filter(function (_ref2) {\n        var id = _ref2.id;\n        return id !== diff.id;\n      }));\n      if (!slateDom.verifyDiffState(editor, diff)) {\n        scheduleSelectionChange = false;\n        slateDom.EDITOR_TO_PENDING_ACTION[\"delete\"](editor);\n        slateDom.EDITOR_TO_USER_MARKS[\"delete\"](editor);\n        flushing = 'action';\n        // Ensure we don't restore the pending user (dom) selection\n        // since the document and dom state do not match.\n        slateDom.EDITOR_TO_PENDING_SELECTION[\"delete\"](editor);\n        scheduleOnDOMSelectionChange.cancel();\n        onDOMSelectionChange.cancel();\n        selectionRef === null || selectionRef === void 0 || selectionRef.unref();\n      }\n    }\n    var selection = selectionRef === null || selectionRef === void 0 ? void 0 : selectionRef.unref();\n    if (selection && !slateDom.EDITOR_TO_PENDING_SELECTION.get(editor) && (!editor.selection || !slate.Range.equals(selection, editor.selection))) {\n      slate.Transforms.select(editor, selection);\n    }\n    if (hasPendingAction()) {\n      performAction();\n      return;\n    }\n    // COMPAT: The selectionChange event is fired after the action is performed,\n    // so we have to manually schedule it to ensure we don't 'throw away' the selection\n    // while rendering if we have pending changes.\n    if (scheduleSelectionChange) {\n      scheduleOnDOMSelectionChange();\n    }\n    scheduleOnDOMSelectionChange.flush();\n    onDOMSelectionChange.flush();\n    applyPendingSelection();\n    var userMarks = slateDom.EDITOR_TO_USER_MARKS.get(editor);\n    slateDom.EDITOR_TO_USER_MARKS[\"delete\"](editor);\n    if (userMarks !== undefined) {\n      editor.marks = userMarks;\n      editor.onChange();\n    }\n  };\n  var handleCompositionEnd = function handleCompositionEnd(_event) {\n    if (compositionEndTimeoutId) {\n      clearTimeout(compositionEndTimeoutId);\n    }\n    compositionEndTimeoutId = setTimeout(function () {\n      slateDom.IS_COMPOSING.set(editor, false);\n      flush();\n    }, RESOLVE_DELAY);\n  };\n  var handleCompositionStart = function handleCompositionStart(_event) {\n    slateDom.IS_COMPOSING.set(editor, true);\n    if (compositionEndTimeoutId) {\n      clearTimeout(compositionEndTimeoutId);\n      compositionEndTimeoutId = null;\n    }\n  };\n  var updatePlaceholderVisibility = function updatePlaceholderVisibility() {\n    var forceHide = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    var placeholderElement = slateDom.EDITOR_TO_PLACEHOLDER_ELEMENT.get(editor);\n    if (!placeholderElement) {\n      return;\n    }\n    if (hasPendingDiffs() || forceHide) {\n      placeholderElement.style.display = 'none';\n      return;\n    }\n    placeholderElement.style.removeProperty('display');\n  };\n  var storeDiff = function storeDiff(path, diff) {\n    var _EDITOR_TO_PENDING_DI3;\n    var pendingDiffs = (_EDITOR_TO_PENDING_DI3 = slateDom.EDITOR_TO_PENDING_DIFFS.get(editor)) !== null && _EDITOR_TO_PENDING_DI3 !== void 0 ? _EDITOR_TO_PENDING_DI3 : [];\n    slateDom.EDITOR_TO_PENDING_DIFFS.set(editor, pendingDiffs);\n    var target = slate.Node.leaf(editor, path);\n    var idx = pendingDiffs.findIndex(function (change) {\n      return slate.Path.equals(change.path, path);\n    });\n    if (idx < 0) {\n      var normalized = slateDom.normalizeStringDiff(target.text, diff);\n      if (normalized) {\n        pendingDiffs.push({\n          path: path,\n          diff: diff,\n          id: idCounter++\n        });\n      }\n      updatePlaceholderVisibility();\n      return;\n    }\n    var merged = slateDom.mergeStringDiffs(target.text, pendingDiffs[idx].diff, diff);\n    if (!merged) {\n      pendingDiffs.splice(idx, 1);\n      updatePlaceholderVisibility();\n      return;\n    }\n    pendingDiffs[idx] = _objectSpread$5(_objectSpread$5({}, pendingDiffs[idx]), {}, {\n      diff: merged\n    });\n  };\n  var scheduleAction = function scheduleAction(run) {\n    var _ref3 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n      at = _ref3.at;\n    insertPositionHint = false;\n    slateDom.EDITOR_TO_PENDING_SELECTION[\"delete\"](editor);\n    scheduleOnDOMSelectionChange.cancel();\n    onDOMSelectionChange.cancel();\n    if (hasPendingAction()) {\n      flush();\n    }\n    slateDom.EDITOR_TO_PENDING_ACTION.set(editor, {\n      at: at,\n      run: run\n    });\n    // COMPAT: When deleting before a non-contenteditable element chrome only fires a beforeinput,\n    // (no input) and doesn't perform any dom mutations. Without a flush timeout we would never flush\n    // in this case and thus never actually perform the action.\n    actionTimeoutId = setTimeout(flush);\n  };\n  var handleDOMBeforeInput = function handleDOMBeforeInput(event) {\n    var _targetRange2;\n    if (flushTimeoutId) {\n      clearTimeout(flushTimeoutId);\n      flushTimeoutId = null;\n    }\n    if (slateDom.IS_NODE_MAP_DIRTY.get(editor)) {\n      return;\n    }\n    var type = event.inputType;\n    var targetRange = null;\n    var data = event.dataTransfer || event.data || undefined;\n    if (insertPositionHint !== false && type !== 'insertText' && type !== 'insertCompositionText') {\n      insertPositionHint = false;\n    }\n    var _event$getTargetRange = event.getTargetRanges(),\n      _event$getTargetRange2 = _slicedToArray(_event$getTargetRange, 1),\n      nativeTargetRange = _event$getTargetRange2[0];\n    if (nativeTargetRange) {\n      targetRange = ReactEditor.toSlateRange(editor, nativeTargetRange, {\n        exactMatch: false,\n        suppressThrow: true\n      });\n    }\n    // COMPAT: SelectionChange event is fired after the action is performed, so we\n    // have to manually get the selection here to ensure it's up-to-date.\n    var window = ReactEditor.getWindow(editor);\n    var domSelection = window.getSelection();\n    if (!targetRange && domSelection) {\n      nativeTargetRange = domSelection;\n      targetRange = ReactEditor.toSlateRange(editor, domSelection, {\n        exactMatch: false,\n        suppressThrow: true\n      });\n    }\n    targetRange = (_targetRange2 = targetRange) !== null && _targetRange2 !== void 0 ? _targetRange2 : editor.selection;\n    if (!targetRange) {\n      return;\n    }\n    // By default, the input manager tries to store text diffs so that we can\n    // defer flushing them at a later point in time. We don't want to flush\n    // for every input event as this can be expensive. However, there are some\n    // scenarios where we cannot safely store the text diff and must instead\n    // schedule an action to let Slate normalize the editor state.\n    var canStoreDiff = true;\n    if (type.startsWith('delete')) {\n      if (slate.Range.isExpanded(targetRange)) {\n        var _Range$edges = slate.Range.edges(targetRange),\n          _Range$edges2 = _slicedToArray(_Range$edges, 2),\n          _start = _Range$edges2[0],\n          _end = _Range$edges2[1];\n        var _leaf = slate.Node.leaf(editor, _start.path);\n        if (_leaf.text.length === _start.offset && _end.offset === 0) {\n          var next = slate.Editor.next(editor, {\n            at: _start.path,\n            match: slate.Text.isText\n          });\n          if (next && slate.Path.equals(next[1], _end.path)) {\n            targetRange = {\n              anchor: _end,\n              focus: _end\n            };\n          }\n        }\n      }\n      var direction = type.endsWith('Backward') ? 'backward' : 'forward';\n      var _Range$edges3 = slate.Range.edges(targetRange),\n        _Range$edges4 = _slicedToArray(_Range$edges3, 2),\n        start = _Range$edges4[0],\n        end = _Range$edges4[1];\n      var _Editor$leaf = slate.Editor.leaf(editor, start.path),\n        _Editor$leaf2 = _slicedToArray(_Editor$leaf, 2),\n        leaf = _Editor$leaf2[0],\n        path = _Editor$leaf2[1];\n      var diff = {\n        text: '',\n        start: start.offset,\n        end: end.offset\n      };\n      var pendingDiffs = slateDom.EDITOR_TO_PENDING_DIFFS.get(editor);\n      var relevantPendingDiffs = pendingDiffs === null || pendingDiffs === void 0 ? void 0 : pendingDiffs.find(function (change) {\n        return slate.Path.equals(change.path, path);\n      });\n      var diffs = relevantPendingDiffs ? [relevantPendingDiffs.diff, diff] : [diff];\n      var text = slateDom.applyStringDiff.apply(void 0, [leaf.text].concat(diffs));\n      if (text.length === 0) {\n        // Text leaf will be removed, so we need to schedule an\n        // action to remove it so that Slate can normalize instead\n        // of storing as a diff\n        canStoreDiff = false;\n      }\n      if (slate.Range.isExpanded(targetRange)) {\n        if (canStoreDiff && slate.Path.equals(targetRange.anchor.path, targetRange.focus.path)) {\n          var point = {\n            path: targetRange.anchor.path,\n            offset: start.offset\n          };\n          var range = slate.Editor.range(editor, point, point);\n          handleUserSelect(range);\n          return storeDiff(targetRange.anchor.path, {\n            text: '',\n            end: end.offset,\n            start: start.offset\n          });\n        }\n        return scheduleAction(function () {\n          return slate.Editor.deleteFragment(editor, {\n            direction: direction\n          });\n        }, {\n          at: targetRange\n        });\n      }\n    }\n    switch (type) {\n      case 'deleteByComposition':\n      case 'deleteByCut':\n      case 'deleteByDrag':\n        {\n          return scheduleAction(function () {\n            return slate.Editor.deleteFragment(editor);\n          }, {\n            at: targetRange\n          });\n        }\n      case 'deleteContent':\n      case 'deleteContentForward':\n        {\n          var _targetRange3 = targetRange,\n            anchor = _targetRange3.anchor;\n          if (canStoreDiff && slate.Range.isCollapsed(targetRange)) {\n            var targetNode = slate.Node.leaf(editor, anchor.path);\n            if (anchor.offset < targetNode.text.length) {\n              return storeDiff(anchor.path, {\n                text: '',\n                start: anchor.offset,\n                end: anchor.offset + 1\n              });\n            }\n          }\n          return scheduleAction(function () {\n            return slate.Editor.deleteForward(editor);\n          }, {\n            at: targetRange\n          });\n        }\n      case 'deleteContentBackward':\n        {\n          var _nativeTargetRange;\n          var _targetRange4 = targetRange,\n            _anchor = _targetRange4.anchor;\n          // If we have a mismatch between the native and slate selection being collapsed\n          // we are most likely deleting a zero-width placeholder and thus should perform it\n          // as an action to ensure correct behavior (mostly happens with mark placeholders)\n          var nativeCollapsed = slateDom.isDOMSelection(nativeTargetRange) ? nativeTargetRange.isCollapsed : !!((_nativeTargetRange = nativeTargetRange) !== null && _nativeTargetRange !== void 0 && _nativeTargetRange.collapsed);\n          if (canStoreDiff && nativeCollapsed && slate.Range.isCollapsed(targetRange) && _anchor.offset > 0) {\n            return storeDiff(_anchor.path, {\n              text: '',\n              start: _anchor.offset - 1,\n              end: _anchor.offset\n            });\n          }\n          return scheduleAction(function () {\n            return slate.Editor.deleteBackward(editor);\n          }, {\n            at: targetRange\n          });\n        }\n      case 'deleteEntireSoftLine':\n        {\n          return scheduleAction(function () {\n            slate.Editor.deleteBackward(editor, {\n              unit: 'line'\n            });\n            slate.Editor.deleteForward(editor, {\n              unit: 'line'\n            });\n          }, {\n            at: targetRange\n          });\n        }\n      case 'deleteHardLineBackward':\n        {\n          return scheduleAction(function () {\n            return slate.Editor.deleteBackward(editor, {\n              unit: 'block'\n            });\n          }, {\n            at: targetRange\n          });\n        }\n      case 'deleteSoftLineBackward':\n        {\n          return scheduleAction(function () {\n            return slate.Editor.deleteBackward(editor, {\n              unit: 'line'\n            });\n          }, {\n            at: targetRange\n          });\n        }\n      case 'deleteHardLineForward':\n        {\n          return scheduleAction(function () {\n            return slate.Editor.deleteForward(editor, {\n              unit: 'block'\n            });\n          }, {\n            at: targetRange\n          });\n        }\n      case 'deleteSoftLineForward':\n        {\n          return scheduleAction(function () {\n            return slate.Editor.deleteForward(editor, {\n              unit: 'line'\n            });\n          }, {\n            at: targetRange\n          });\n        }\n      case 'deleteWordBackward':\n        {\n          return scheduleAction(function () {\n            return slate.Editor.deleteBackward(editor, {\n              unit: 'word'\n            });\n          }, {\n            at: targetRange\n          });\n        }\n      case 'deleteWordForward':\n        {\n          return scheduleAction(function () {\n            return slate.Editor.deleteForward(editor, {\n              unit: 'word'\n            });\n          }, {\n            at: targetRange\n          });\n        }\n      case 'insertLineBreak':\n        {\n          return scheduleAction(function () {\n            return slate.Editor.insertSoftBreak(editor);\n          }, {\n            at: targetRange\n          });\n        }\n      case 'insertParagraph':\n        {\n          return scheduleAction(function () {\n            return slate.Editor.insertBreak(editor);\n          }, {\n            at: targetRange\n          });\n        }\n      case 'insertCompositionText':\n      case 'deleteCompositionText':\n      case 'insertFromComposition':\n      case 'insertFromDrop':\n      case 'insertFromPaste':\n      case 'insertFromYank':\n      case 'insertReplacementText':\n      case 'insertText':\n        {\n          if (isDataTransfer(data)) {\n            return scheduleAction(function () {\n              return ReactEditor.insertData(editor, data);\n            }, {\n              at: targetRange\n            });\n          }\n          var _text = data !== null && data !== void 0 ? data : '';\n          // COMPAT: If we are writing inside a placeholder, the ime inserts the text inside\n          // the placeholder itself and thus includes the zero-width space inside edit events.\n          if (slateDom.EDITOR_TO_PENDING_INSERTION_MARKS.get(editor)) {\n            _text = _text.replace(\"\\uFEFF\", '');\n          }\n          // Pastes from the Android clipboard will generate `insertText` events.\n          // If the copied text contains any newlines, Android will append an\n          // extra newline to the end of the copied text.\n          if (type === 'insertText' && /.*\\n.*\\n$/.test(_text)) {\n            _text = _text.slice(0, -1);\n          }\n          // If the text includes a newline, split it at newlines and paste each component\n          // string, with soft breaks in between each.\n          if (_text.includes('\\n')) {\n            return scheduleAction(function () {\n              var parts = _text.split('\\n');\n              parts.forEach(function (line, i) {\n                if (line) {\n                  slate.Editor.insertText(editor, line);\n                }\n                if (i !== parts.length - 1) {\n                  slate.Editor.insertSoftBreak(editor);\n                }\n              });\n            }, {\n              at: targetRange\n            });\n          }\n          if (slate.Path.equals(targetRange.anchor.path, targetRange.focus.path)) {\n            var _Range$edges5 = slate.Range.edges(targetRange),\n              _Range$edges6 = _slicedToArray(_Range$edges5, 2),\n              _start2 = _Range$edges6[0],\n              _end2 = _Range$edges6[1];\n            var _diff = {\n              start: _start2.offset,\n              end: _end2.offset,\n              text: _text\n            };\n            // COMPAT: Swiftkey has a weird bug where the target range of the 2nd word\n            // inserted after a mark placeholder is inserted with an anchor offset off by 1.\n            // So writing 'some text' will result in 'some ttext'. Luckily all 'normal' insert\n            // text events are fired with the correct target ranges, only the final 'insertComposition'\n            // isn't, so we can adjust the target range start offset if we are confident this is the\n            // swiftkey insert causing the issue.\n            if (_text && insertPositionHint && type === 'insertCompositionText') {\n              var hintPosition = insertPositionHint.start + insertPositionHint.text.search(/\\S|$/);\n              var diffPosition = _diff.start + _diff.text.search(/\\S|$/);\n              if (diffPosition === hintPosition + 1 && _diff.end === insertPositionHint.start + insertPositionHint.text.length) {\n                _diff.start -= 1;\n                insertPositionHint = null;\n                scheduleFlush();\n              } else {\n                insertPositionHint = false;\n              }\n            } else if (type === 'insertText') {\n              if (insertPositionHint === null) {\n                insertPositionHint = _diff;\n              } else if (insertPositionHint && slate.Range.isCollapsed(targetRange) && insertPositionHint.end + insertPositionHint.text.length === _start2.offset) {\n                insertPositionHint = _objectSpread$5(_objectSpread$5({}, insertPositionHint), {}, {\n                  text: insertPositionHint.text + _text\n                });\n              } else {\n                insertPositionHint = false;\n              }\n            } else {\n              insertPositionHint = false;\n            }\n            if (canStoreDiff) {\n              storeDiff(_start2.path, _diff);\n              return;\n            }\n          }\n          return scheduleAction(function () {\n            return slate.Editor.insertText(editor, _text);\n          }, {\n            at: targetRange\n          });\n        }\n    }\n  };\n  var hasPendingAction = function hasPendingAction() {\n    return !!slateDom.EDITOR_TO_PENDING_ACTION.get(editor);\n  };\n  var hasPendingDiffs = function hasPendingDiffs() {\n    var _EDITOR_TO_PENDING_DI4;\n    return !!((_EDITOR_TO_PENDING_DI4 = slateDom.EDITOR_TO_PENDING_DIFFS.get(editor)) !== null && _EDITOR_TO_PENDING_DI4 !== void 0 && _EDITOR_TO_PENDING_DI4.length);\n  };\n  var hasPendingChanges = function hasPendingChanges() {\n    return hasPendingAction() || hasPendingDiffs();\n  };\n  var isFlushing = function isFlushing() {\n    return flushing;\n  };\n  var handleUserSelect = function handleUserSelect(range) {\n    slateDom.EDITOR_TO_PENDING_SELECTION.set(editor, range);\n    if (flushTimeoutId) {\n      clearTimeout(flushTimeoutId);\n      flushTimeoutId = null;\n    }\n    var selection = editor.selection;\n    if (!range) {\n      return;\n    }\n    var pathChanged = !selection || !slate.Path.equals(selection.anchor.path, range.anchor.path);\n    var parentPathChanged = !selection || !slate.Path.equals(selection.anchor.path.slice(0, -1), range.anchor.path.slice(0, -1));\n    if (pathChanged && insertPositionHint || parentPathChanged) {\n      insertPositionHint = false;\n    }\n    if (pathChanged || hasPendingDiffs()) {\n      flushTimeoutId = setTimeout(flush, FLUSH_DELAY);\n    }\n  };\n  var handleInput = function handleInput() {\n    if (hasPendingAction() || !hasPendingDiffs()) {\n      flush();\n    }\n  };\n  var handleKeyDown = function handleKeyDown(_) {\n    // COMPAT: Swiftkey closes the keyboard when typing inside a empty node\n    // directly next to a non-contenteditable element (= the placeholder).\n    // The only event fired soon enough for us to allow hiding the placeholder\n    // without swiftkey picking it up is the keydown event, so we have to hide it\n    // here. See https://github.com/ianstormtaylor/slate/pull/4988#issuecomment-1201050535\n    if (!hasPendingDiffs()) {\n      updatePlaceholderVisibility(true);\n      setTimeout(updatePlaceholderVisibility);\n    }\n  };\n  var scheduleFlush = function scheduleFlush() {\n    if (!hasPendingAction()) {\n      actionTimeoutId = setTimeout(flush);\n    }\n  };\n  var handleDomMutations = function handleDomMutations(mutations) {\n    if (hasPendingDiffs() || hasPendingAction()) {\n      return;\n    }\n    if (mutations.some(function (mutation) {\n      return slateDom.isTrackedMutation(editor, mutation, mutations);\n    })) {\n      var _EDITOR_TO_FORCE_REND;\n      // Cause a re-render to restore the dom state if we encounter tracked mutations without\n      // a corresponding pending action.\n      (_EDITOR_TO_FORCE_REND = slateDom.EDITOR_TO_FORCE_RENDER.get(editor)) === null || _EDITOR_TO_FORCE_REND === void 0 || _EDITOR_TO_FORCE_REND();\n    }\n  };\n  return {\n    flush: flush,\n    scheduleFlush: scheduleFlush,\n    hasPendingDiffs: hasPendingDiffs,\n    hasPendingAction: hasPendingAction,\n    hasPendingChanges: hasPendingChanges,\n    isFlushing: isFlushing,\n    handleUserSelect: handleUserSelect,\n    handleCompositionEnd: handleCompositionEnd,\n    handleCompositionStart: handleCompositionStart,\n    handleDOMBeforeInput: handleDOMBeforeInput,\n    handleKeyDown: handleKeyDown,\n    handleDomMutations: handleDomMutations,\n    handleInput: handleInput\n  };\n}\n\nfunction useIsMounted() {\n  var isMountedRef = React.useRef(false);\n  React.useEffect(function () {\n    isMountedRef.current = true;\n    return function () {\n      isMountedRef.current = false;\n    };\n  }, []);\n  return isMountedRef.current;\n}\n\n/**\n * Prevent warning on SSR by falling back to useEffect when DOM isn't available\n */\nvar useIsomorphicLayoutEffect = slateDom.CAN_USE_DOM ? React.useLayoutEffect : React.useEffect;\n\nfunction useMutationObserver(node, callback, options) {\n  var _useState = React.useState(function () {\n      return new MutationObserver(callback);\n    }),\n    _useState2 = _slicedToArray(_useState, 1),\n    mutationObserver = _useState2[0];\n  useIsomorphicLayoutEffect(function () {\n    // Discard mutations caused during render phase. This works due to react calling\n    // useLayoutEffect synchronously after the render phase before the next tick.\n    mutationObserver.takeRecords();\n  });\n  React.useEffect(function () {\n    if (!node.current) {\n      throw new Error('Failed to attach MutationObserver, `node` is undefined');\n    }\n    mutationObserver.observe(node.current, options);\n    return function () {\n      return mutationObserver.disconnect();\n    };\n  }, [mutationObserver, node, options]);\n}\n\nvar _excluded$2 = [\"node\"];\nfunction ownKeys$4(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread$4(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$4(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$4(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nvar MUTATION_OBSERVER_CONFIG$1 = {\n  subtree: true,\n  childList: true,\n  characterData: true\n};\nvar useAndroidInputManager = !slateDom.IS_ANDROID ? function () {\n  return null;\n} : function (_ref) {\n  var node = _ref.node,\n    options = _objectWithoutProperties(_ref, _excluded$2);\n  if (!slateDom.IS_ANDROID) {\n    return null;\n  }\n  var editor = useSlateStatic();\n  var isMounted = useIsMounted();\n  var _useState = React.useState(function () {\n      return createAndroidInputManager(_objectSpread$4({\n        editor: editor\n      }, options));\n    }),\n    _useState2 = _slicedToArray(_useState, 1),\n    inputManager = _useState2[0];\n  useMutationObserver(node, inputManager.handleDomMutations, MUTATION_OBSERVER_CONFIG$1);\n  slateDom.EDITOR_TO_SCHEDULE_FLUSH.set(editor, inputManager.scheduleFlush);\n  if (isMounted) {\n    inputManager.flush();\n  }\n  return inputManager;\n};\n\nfunction ownKeys$3(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread$3(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$3(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$3(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\n/**\n * Leaf content strings.\n */\nvar String$1 = function String(props) {\n  var isLast = props.isLast,\n    leaf = props.leaf,\n    parent = props.parent,\n    text = props.text;\n  var editor = useSlateStatic();\n  var path = ReactEditor.findPath(editor, text);\n  var parentPath = slate.Path.parent(path);\n  var isMarkPlaceholder = Boolean(leaf[slateDom.MARK_PLACEHOLDER_SYMBOL]);\n  // COMPAT: Render text inside void nodes with a zero-width space.\n  // So the node can contain selection but the text is not visible.\n  if (editor.isVoid(parent)) {\n    return /*#__PURE__*/React.createElement(ZeroWidthString, {\n      length: slate.Node.string(parent).length\n    });\n  }\n  // COMPAT: If this is the last text node in an empty block, render a zero-\n  // width space that will convert into a line break when copying and pasting\n  // to support expected plain text.\n  if (leaf.text === '' && parent.children[parent.children.length - 1] === text && !editor.isInline(parent) && slate.Editor.string(editor, parentPath) === '') {\n    return /*#__PURE__*/React.createElement(ZeroWidthString, {\n      isLineBreak: true,\n      isMarkPlaceholder: isMarkPlaceholder\n    });\n  }\n  // COMPAT: If the text is empty, it's because it's on the edge of an inline\n  // node, so we render a zero-width space so that the selection can be\n  // inserted next to it still.\n  if (leaf.text === '') {\n    return /*#__PURE__*/React.createElement(ZeroWidthString, {\n      isMarkPlaceholder: isMarkPlaceholder\n    });\n  }\n  // COMPAT: Browsers will collapse trailing new lines at the end of blocks,\n  // so we need to add an extra trailing new lines to prevent that.\n  if (isLast && leaf.text.slice(-1) === '\\n') {\n    return /*#__PURE__*/React.createElement(TextString, {\n      isTrailing: true,\n      text: leaf.text\n    });\n  }\n  return /*#__PURE__*/React.createElement(TextString, {\n    text: leaf.text\n  });\n};\n/**\n * Leaf strings with text in them.\n */\nvar TextString = function TextString(props) {\n  var text = props.text,\n    _props$isTrailing = props.isTrailing,\n    isTrailing = _props$isTrailing === void 0 ? false : _props$isTrailing;\n  var ref = React.useRef(null);\n  var getTextContent = function getTextContent() {\n    return \"\".concat(text !== null && text !== void 0 ? text : '').concat(isTrailing ? '\\n' : '');\n  };\n  var _useState = React.useState(getTextContent),\n    _useState2 = _slicedToArray(_useState, 1),\n    initialText = _useState2[0];\n  // This is the actual text rendering boundary where we interface with the DOM\n  // The text is not rendered as part of the virtual DOM, as since we handle basic character insertions natively,\n  // updating the DOM is not a one way dataflow anymore. What we need here is not reconciliation and diffing\n  // with previous version of the virtual DOM, but rather diffing with the actual DOM element, and replace the DOM <span> content\n  // exactly if and only if its current content does not match our current virtual DOM.\n  // Otherwise the DOM TextNode would always be replaced by React as the user types, which interferes with native text features,\n  // eg makes native spellcheck opt out from checking the text node.\n  // useLayoutEffect: updating our span before browser paint\n  useIsomorphicLayoutEffect(function () {\n    // null coalescing text to make sure we're not outputing \"null\" as a string in the extreme case it is nullish at runtime\n    var textWithTrailing = getTextContent();\n    if (ref.current && ref.current.textContent !== textWithTrailing) {\n      ref.current.textContent = textWithTrailing;\n    }\n    // intentionally not specifying dependencies, so that this effect runs on every render\n    // as this effectively replaces \"specifying the text in the virtual DOM under the <span> below\" on each render\n  });\n  // We intentionally render a memoized <span> that only receives the initial text content when the component is mounted.\n  // We defer to the layout effect above to update the `textContent` of the span element when needed.\n  return /*#__PURE__*/React.createElement(MemoizedText$1, {\n    ref: ref\n  }, initialText);\n};\nvar MemoizedText$1 = /*#__PURE__*/React.memo( /*#__PURE__*/React.forwardRef(function (props, ref) {\n  return /*#__PURE__*/React.createElement(\"span\", {\n    \"data-slate-string\": true,\n    ref: ref\n  }, props.children);\n}));\n/**\n * Leaf strings without text, render as zero-width strings.\n */\nvar ZeroWidthString = function ZeroWidthString(props) {\n  var _props$length = props.length,\n    length = _props$length === void 0 ? 0 : _props$length,\n    _props$isLineBreak = props.isLineBreak,\n    isLineBreak = _props$isLineBreak === void 0 ? false : _props$isLineBreak,\n    _props$isMarkPlacehol = props.isMarkPlaceholder,\n    isMarkPlaceholder = _props$isMarkPlacehol === void 0 ? false : _props$isMarkPlacehol;\n  var attributes = {\n    'data-slate-zero-width': isLineBreak ? 'n' : 'z',\n    'data-slate-length': length\n  };\n  if (isMarkPlaceholder) {\n    attributes['data-slate-mark-placeholder'] = true;\n  }\n  return /*#__PURE__*/React.createElement(\"span\", _objectSpread$3({}, attributes), !(slateDom.IS_ANDROID || slateDom.IS_IOS) || !isLineBreak ? \"\\uFEFF\" : null, isLineBreak ? /*#__PURE__*/React.createElement(\"br\", null) : null);\n};\n\nfunction ownKeys$2(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread$2(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$2(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$2(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\n// Delay the placeholder on Android to prevent the keyboard from closing.\n// (https://github.com/ianstormtaylor/slate/pull/5368)\nvar PLACEHOLDER_DELAY = slateDom.IS_ANDROID ? 300 : 0;\nfunction disconnectPlaceholderResizeObserver(placeholderResizeObserver, releaseObserver) {\n  if (placeholderResizeObserver.current) {\n    placeholderResizeObserver.current.disconnect();\n    if (releaseObserver) {\n      placeholderResizeObserver.current = null;\n    }\n  }\n}\nfunction clearTimeoutRef(timeoutRef) {\n  if (timeoutRef.current) {\n    clearTimeout(timeoutRef.current);\n    timeoutRef.current = null;\n  }\n}\n/**\n * Individual leaves in a text node with unique formatting.\n */\nvar Leaf = function Leaf(props) {\n  var leaf = props.leaf,\n    isLast = props.isLast,\n    text = props.text,\n    parent = props.parent,\n    renderPlaceholder = props.renderPlaceholder,\n    _props$renderLeaf = props.renderLeaf,\n    renderLeaf = _props$renderLeaf === void 0 ? function (props) {\n      return /*#__PURE__*/React.createElement(DefaultLeaf, _objectSpread$2({}, props));\n    } : _props$renderLeaf;\n  var editor = useSlateStatic();\n  var placeholderResizeObserver = React.useRef(null);\n  var placeholderRef = React.useRef(null);\n  var _useState = React.useState(false),\n    _useState2 = _slicedToArray(_useState, 2),\n    showPlaceholder = _useState2[0],\n    setShowPlaceholder = _useState2[1];\n  var showPlaceholderTimeoutRef = React.useRef(null);\n  var callbackPlaceholderRef = React.useCallback(function (placeholderEl) {\n    disconnectPlaceholderResizeObserver(placeholderResizeObserver, placeholderEl == null);\n    if (placeholderEl == null) {\n      var _leaf$onPlaceholderRe;\n      slateDom.EDITOR_TO_PLACEHOLDER_ELEMENT[\"delete\"](editor);\n      (_leaf$onPlaceholderRe = leaf.onPlaceholderResize) === null || _leaf$onPlaceholderRe === void 0 || _leaf$onPlaceholderRe.call(leaf, null);\n    } else {\n      slateDom.EDITOR_TO_PLACEHOLDER_ELEMENT.set(editor, placeholderEl);\n      if (!placeholderResizeObserver.current) {\n        // Create a new observer and observe the placeholder element.\n        var ResizeObserver = window.ResizeObserver || resizeObserver.ResizeObserver;\n        placeholderResizeObserver.current = new ResizeObserver(function () {\n          var _leaf$onPlaceholderRe2;\n          (_leaf$onPlaceholderRe2 = leaf.onPlaceholderResize) === null || _leaf$onPlaceholderRe2 === void 0 || _leaf$onPlaceholderRe2.call(leaf, placeholderEl);\n        });\n      }\n      placeholderResizeObserver.current.observe(placeholderEl);\n      placeholderRef.current = placeholderEl;\n    }\n  }, [placeholderRef, leaf, editor]);\n  var children = /*#__PURE__*/React.createElement(String$1, {\n    isLast: isLast,\n    leaf: leaf,\n    parent: parent,\n    text: text\n  });\n  var leafIsPlaceholder = Boolean(leaf[slateDom.PLACEHOLDER_SYMBOL]);\n  React.useEffect(function () {\n    if (leafIsPlaceholder) {\n      if (!showPlaceholderTimeoutRef.current) {\n        // Delay the placeholder, so it will not render in a selection\n        showPlaceholderTimeoutRef.current = setTimeout(function () {\n          setShowPlaceholder(true);\n          showPlaceholderTimeoutRef.current = null;\n        }, PLACEHOLDER_DELAY);\n      }\n    } else {\n      clearTimeoutRef(showPlaceholderTimeoutRef);\n      setShowPlaceholder(false);\n    }\n    return function () {\n      return clearTimeoutRef(showPlaceholderTimeoutRef);\n    };\n  }, [leafIsPlaceholder, setShowPlaceholder]);\n  if (leafIsPlaceholder && showPlaceholder) {\n    var placeholderProps = {\n      children: leaf.placeholder,\n      attributes: {\n        'data-slate-placeholder': true,\n        style: {\n          position: 'absolute',\n          top: 0,\n          pointerEvents: 'none',\n          width: '100%',\n          maxWidth: '100%',\n          display: 'block',\n          opacity: '0.333',\n          userSelect: 'none',\n          textDecoration: 'none',\n          // Fixes https://github.com/udecode/plate/issues/2315\n          WebkitUserModify: slateDom.IS_WEBKIT ? 'inherit' : undefined\n        },\n        contentEditable: false,\n        ref: callbackPlaceholderRef\n      }\n    };\n    children = /*#__PURE__*/React.createElement(React.Fragment, null, renderPlaceholder(placeholderProps), children);\n  }\n  // COMPAT: Having the `data-` attributes on these leaf elements ensures that\n  // in certain misbehaving browsers they aren't weirdly cloned/destroyed by\n  // contenteditable behaviors. (2019/05/08)\n  var attributes = {\n    'data-slate-leaf': true\n  };\n  return renderLeaf({\n    attributes: attributes,\n    children: children,\n    leaf: leaf,\n    text: text\n  });\n};\nvar MemoizedLeaf = /*#__PURE__*/React.memo(Leaf, function (prev, next) {\n  return next.parent === prev.parent && next.isLast === prev.isLast && next.renderLeaf === prev.renderLeaf && next.renderPlaceholder === prev.renderPlaceholder && next.text === prev.text && slate.Text.equals(next.leaf, prev.leaf) && next.leaf[slateDom.PLACEHOLDER_SYMBOL] === prev.leaf[slateDom.PLACEHOLDER_SYMBOL];\n});\nvar DefaultLeaf = function DefaultLeaf(props) {\n  var attributes = props.attributes,\n    children = props.children;\n  return /*#__PURE__*/React.createElement(\"span\", _objectSpread$2({}, attributes), children);\n};\n\n/**\n * Text.\n */\nvar Text = function Text(props) {\n  var decorations = props.decorations,\n    isLast = props.isLast,\n    parent = props.parent,\n    renderPlaceholder = props.renderPlaceholder,\n    renderLeaf = props.renderLeaf,\n    text = props.text;\n  var editor = useSlateStatic();\n  var ref = React.useRef(null);\n  var leaves = slate.Text.decorations(text, decorations);\n  var key = ReactEditor.findKey(editor, text);\n  var children = [];\n  for (var i = 0; i < leaves.length; i++) {\n    var leaf = leaves[i];\n    children.push( /*#__PURE__*/React.createElement(MemoizedLeaf, {\n      isLast: isLast && i === leaves.length - 1,\n      key: \"\".concat(key.id, \"-\").concat(i),\n      renderPlaceholder: renderPlaceholder,\n      leaf: leaf,\n      text: text,\n      parent: parent,\n      renderLeaf: renderLeaf\n    }));\n  }\n  // Update element-related weak maps with the DOM element ref.\n  var callbackRef = React.useCallback(function (span) {\n    var KEY_TO_ELEMENT = slateDom.EDITOR_TO_KEY_TO_ELEMENT.get(editor);\n    if (span) {\n      KEY_TO_ELEMENT === null || KEY_TO_ELEMENT === void 0 || KEY_TO_ELEMENT.set(key, span);\n      slateDom.NODE_TO_ELEMENT.set(text, span);\n      slateDom.ELEMENT_TO_NODE.set(span, text);\n    } else {\n      KEY_TO_ELEMENT === null || KEY_TO_ELEMENT === void 0 || KEY_TO_ELEMENT[\"delete\"](key);\n      slateDom.NODE_TO_ELEMENT[\"delete\"](text);\n      if (ref.current) {\n        slateDom.ELEMENT_TO_NODE[\"delete\"](ref.current);\n      }\n    }\n    ref.current = span;\n  }, [ref, editor, key, text]);\n  return /*#__PURE__*/React.createElement(\"span\", {\n    \"data-slate-node\": \"text\",\n    ref: callbackRef\n  }, children);\n};\nvar MemoizedText = /*#__PURE__*/React.memo(Text, function (prev, next) {\n  return next.parent === prev.parent && next.isLast === prev.isLast && next.renderLeaf === prev.renderLeaf && next.renderPlaceholder === prev.renderPlaceholder && next.text === prev.text && slateDom.isTextDecorationsEqual(next.decorations, prev.decorations);\n});\n\nfunction ownKeys$1(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread$1(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$1(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$1(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\n/**\n * Element.\n */\nvar Element = function Element(props) {\n  var decorations = props.decorations,\n    element = props.element,\n    _props$renderElement = props.renderElement,\n    renderElement = _props$renderElement === void 0 ? function (p) {\n      return /*#__PURE__*/React.createElement(DefaultElement, _objectSpread$1({}, p));\n    } : _props$renderElement,\n    renderPlaceholder = props.renderPlaceholder,\n    renderLeaf = props.renderLeaf,\n    selection = props.selection;\n  var editor = useSlateStatic();\n  var readOnly = useReadOnly();\n  var isInline = editor.isInline(element);\n  var key = ReactEditor.findKey(editor, element);\n  var ref = React.useCallback(function (ref) {\n    // Update element-related weak maps with the DOM element ref.\n    var KEY_TO_ELEMENT = slateDom.EDITOR_TO_KEY_TO_ELEMENT.get(editor);\n    if (ref) {\n      KEY_TO_ELEMENT === null || KEY_TO_ELEMENT === void 0 || KEY_TO_ELEMENT.set(key, ref);\n      slateDom.NODE_TO_ELEMENT.set(element, ref);\n      slateDom.ELEMENT_TO_NODE.set(ref, element);\n    } else {\n      KEY_TO_ELEMENT === null || KEY_TO_ELEMENT === void 0 || KEY_TO_ELEMENT[\"delete\"](key);\n      slateDom.NODE_TO_ELEMENT[\"delete\"](element);\n    }\n  }, [editor, key, element]);\n  var children = useChildren({\n    decorations: decorations,\n    node: element,\n    renderElement: renderElement,\n    renderPlaceholder: renderPlaceholder,\n    renderLeaf: renderLeaf,\n    selection: selection\n  });\n  // Attributes that the developer must mix into the element in their\n  // custom node renderer component.\n  var attributes = {\n    'data-slate-node': 'element',\n    ref: ref\n  };\n  if (isInline) {\n    attributes['data-slate-inline'] = true;\n  }\n  // If it's a block node with inline children, add the proper `dir` attribute\n  // for text direction.\n  if (!isInline && slate.Editor.hasInlines(editor, element)) {\n    var text = slate.Node.string(element);\n    var dir = getDirection(text);\n    if (dir === 'rtl') {\n      attributes.dir = dir;\n    }\n  }\n  // If it's a void node, wrap the children in extra void-specific elements.\n  if (slate.Editor.isVoid(editor, element)) {\n    attributes['data-slate-void'] = true;\n    if (!readOnly && isInline) {\n      attributes.contentEditable = false;\n    }\n    var Tag = isInline ? 'span' : 'div';\n    var _Node$texts = slate.Node.texts(element),\n      _Node$texts2 = _slicedToArray(_Node$texts, 1),\n      _Node$texts2$ = _slicedToArray(_Node$texts2[0], 1),\n      _text = _Node$texts2$[0];\n    children = /*#__PURE__*/React.createElement(Tag, {\n      \"data-slate-spacer\": true,\n      style: {\n        height: '0',\n        color: 'transparent',\n        outline: 'none',\n        position: 'absolute'\n      }\n    }, /*#__PURE__*/React.createElement(MemoizedText, {\n      renderPlaceholder: renderPlaceholder,\n      decorations: [],\n      isLast: false,\n      parent: element,\n      text: _text\n    }));\n    slateDom.NODE_TO_INDEX.set(_text, 0);\n    slateDom.NODE_TO_PARENT.set(_text, element);\n  }\n  return renderElement({\n    attributes: attributes,\n    children: children,\n    element: element\n  });\n};\nvar MemoizedElement = /*#__PURE__*/React.memo(Element, function (prev, next) {\n  return prev.element === next.element && prev.renderElement === next.renderElement && prev.renderLeaf === next.renderLeaf && prev.renderPlaceholder === next.renderPlaceholder && slateDom.isElementDecorationsEqual(prev.decorations, next.decorations) && (prev.selection === next.selection || !!prev.selection && !!next.selection && slate.Range.equals(prev.selection, next.selection));\n});\n/**\n * The default element renderer.\n */\nvar DefaultElement = function DefaultElement(props) {\n  var attributes = props.attributes,\n    children = props.children,\n    element = props.element;\n  var editor = useSlateStatic();\n  var Tag = editor.isInline(element) ? 'span' : 'div';\n  return /*#__PURE__*/React.createElement(Tag, _objectSpread$1(_objectSpread$1({}, attributes), {}, {\n    style: {\n      position: 'relative'\n    }\n  }), children);\n};\n\n/**\n * A React context for sharing the `decorate` prop of the editable.\n */\nvar DecorateContext = /*#__PURE__*/React.createContext(function () {\n  return [];\n});\n/**\n * Get the current `decorate` prop of the editable.\n */\nvar useDecorate = function useDecorate() {\n  return React.useContext(DecorateContext);\n};\n\n/**\n * A React context for sharing the `selected` state of an element.\n */\nvar SelectedContext = /*#__PURE__*/React.createContext(false);\n/**\n * Get the current `selected` state of an element.\n */\nvar useSelected = function useSelected() {\n  return React.useContext(SelectedContext);\n};\n\nfunction _createForOfIteratorHelper$1(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray$1(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\nfunction _unsupportedIterableToArray$1(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray$1(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray$1(o, minLen); }\nfunction _arrayLikeToArray$1(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\n/**\n * Children.\n */\nvar useChildren = function useChildren(props) {\n  var decorations = props.decorations,\n    node = props.node,\n    renderElement = props.renderElement,\n    renderPlaceholder = props.renderPlaceholder,\n    renderLeaf = props.renderLeaf,\n    selection = props.selection;\n  var decorate = useDecorate();\n  var editor = useSlateStatic();\n  slateDom.IS_NODE_MAP_DIRTY.set(editor, false);\n  var path = ReactEditor.findPath(editor, node);\n  var children = [];\n  var isLeafBlock = slate.Element.isElement(node) && !editor.isInline(node) && slate.Editor.hasInlines(editor, node);\n  for (var i = 0; i < node.children.length; i++) {\n    var p = path.concat(i);\n    var n = node.children[i];\n    var key = ReactEditor.findKey(editor, n);\n    var range = slate.Editor.range(editor, p);\n    var sel = selection && slate.Range.intersection(range, selection);\n    var ds = decorate([n, p]);\n    var _iterator = _createForOfIteratorHelper$1(decorations),\n      _step;\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var dec = _step.value;\n        var d = slate.Range.intersection(dec, range);\n        if (d) {\n          ds.push(d);\n        }\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n    if (slate.Element.isElement(n)) {\n      children.push( /*#__PURE__*/React.createElement(SelectedContext.Provider, {\n        key: \"provider-\".concat(key.id),\n        value: !!sel\n      }, /*#__PURE__*/React.createElement(MemoizedElement, {\n        decorations: ds,\n        element: n,\n        key: key.id,\n        renderElement: renderElement,\n        renderPlaceholder: renderPlaceholder,\n        renderLeaf: renderLeaf,\n        selection: sel\n      })));\n    } else {\n      children.push( /*#__PURE__*/React.createElement(MemoizedText, {\n        decorations: ds,\n        key: key.id,\n        isLast: isLeafBlock && i === node.children.length - 1,\n        parent: node,\n        renderPlaceholder: renderPlaceholder,\n        renderLeaf: renderLeaf,\n        text: n\n      }));\n    }\n    slateDom.NODE_TO_INDEX.set(n, i);\n    slateDom.NODE_TO_PARENT.set(n, node);\n  }\n  return children;\n};\n\n/**\n * A React context for sharing the `readOnly` state of the editor.\n */\nvar ReadOnlyContext = /*#__PURE__*/React.createContext(false);\n/**\n * Get the current `readOnly` state of the editor.\n */\nvar useReadOnly = function useReadOnly() {\n  return React.useContext(ReadOnlyContext);\n};\n\nvar SlateContext = /*#__PURE__*/React.createContext(null);\n/**\n * Get the current editor object from the React context.\n */\nvar useSlate = function useSlate() {\n  var context = React.useContext(SlateContext);\n  if (!context) {\n    throw new Error(\"The `useSlate` hook must be used inside the <Slate> component's context.\");\n  }\n  var editor = context.editor;\n  return editor;\n};\nvar useSlateWithV = function useSlateWithV() {\n  var context = React.useContext(SlateContext);\n  if (!context) {\n    throw new Error(\"The `useSlate` hook must be used inside the <Slate> component's context.\");\n  }\n  return context;\n};\n\nfunction useTrackUserInput() {\n  var editor = useSlateStatic();\n  var receivedUserInput = React.useRef(false);\n  var animationFrameIdRef = React.useRef(0);\n  var onUserInput = React.useCallback(function () {\n    if (receivedUserInput.current) {\n      return;\n    }\n    receivedUserInput.current = true;\n    var window = ReactEditor.getWindow(editor);\n    window.cancelAnimationFrame(animationFrameIdRef.current);\n    animationFrameIdRef.current = window.requestAnimationFrame(function () {\n      receivedUserInput.current = false;\n    });\n  }, [editor]);\n  React.useEffect(function () {\n    return function () {\n      return cancelAnimationFrame(animationFrameIdRef.current);\n    };\n  }, []);\n  return {\n    receivedUserInput: receivedUserInput,\n    onUserInput: onUserInput\n  };\n}\n\nvar classCallCheck = createCommonjsModule(function (module) {\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nmodule.exports = _classCallCheck, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n});\n\nvar _classCallCheck = unwrapExports(classCallCheck);\n\nvar createClass = createCommonjsModule(function (module) {\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, toPropertyKey(descriptor.key), descriptor);\n  }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  Object.defineProperty(Constructor, \"prototype\", {\n    writable: false\n  });\n  return Constructor;\n}\nmodule.exports = _createClass, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n});\n\nvar _createClass = unwrapExports(createClass);\n\nvar assertThisInitialized = createCommonjsModule(function (module) {\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n  return self;\n}\nmodule.exports = _assertThisInitialized, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n});\n\nvar _assertThisInitialized = unwrapExports(assertThisInitialized);\n\nvar setPrototypeOf = createCommonjsModule(function (module) {\nfunction _setPrototypeOf(o, p) {\n  module.exports = _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  }, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n  return _setPrototypeOf(o, p);\n}\nmodule.exports = _setPrototypeOf, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n});\n\nunwrapExports(setPrototypeOf);\n\nvar inherits = createCommonjsModule(function (module) {\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  Object.defineProperty(subClass, \"prototype\", {\n    writable: false\n  });\n  if (superClass) setPrototypeOf(subClass, superClass);\n}\nmodule.exports = _inherits, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n});\n\nvar _inherits = unwrapExports(inherits);\n\nvar possibleConstructorReturn = createCommonjsModule(function (module) {\nvar _typeof = _typeof_1[\"default\"];\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  } else if (call !== void 0) {\n    throw new TypeError(\"Derived constructors may only return object or undefined\");\n  }\n  return assertThisInitialized(self);\n}\nmodule.exports = _possibleConstructorReturn, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n});\n\nvar _possibleConstructorReturn = unwrapExports(possibleConstructorReturn);\n\nvar getPrototypeOf = createCommonjsModule(function (module) {\nfunction _getPrototypeOf(o) {\n  module.exports = _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  }, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n  return _getPrototypeOf(o);\n}\nmodule.exports = _getPrototypeOf, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n});\n\nvar _getPrototypeOf = unwrapExports(getPrototypeOf);\n\nvar arrayWithoutHoles = createCommonjsModule(function (module) {\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}\nmodule.exports = _arrayWithoutHoles, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n});\n\nunwrapExports(arrayWithoutHoles);\n\nvar iterableToArray = createCommonjsModule(function (module) {\nfunction _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\nmodule.exports = _iterableToArray, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n});\n\nunwrapExports(iterableToArray);\n\nvar nonIterableSpread = createCommonjsModule(function (module) {\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nmodule.exports = _nonIterableSpread, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n});\n\nunwrapExports(nonIterableSpread);\n\nvar toConsumableArray = createCommonjsModule(function (module) {\nfunction _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}\nmodule.exports = _toConsumableArray, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n});\n\nvar _toConsumableArray = unwrapExports(toConsumableArray);\n\nvar createRestoreDomManager = function createRestoreDomManager(editor, receivedUserInput) {\n  var bufferedMutations = [];\n  var clear = function clear() {\n    bufferedMutations = [];\n  };\n  var registerMutations = function registerMutations(mutations) {\n    var _bufferedMutations;\n    if (!receivedUserInput.current) {\n      return;\n    }\n    var trackedMutations = mutations.filter(function (mutation) {\n      return slateDom.isTrackedMutation(editor, mutation, mutations);\n    });\n    (_bufferedMutations = bufferedMutations).push.apply(_bufferedMutations, _toConsumableArray(trackedMutations));\n  };\n  function restoreDOM() {\n    if (bufferedMutations.length > 0) {\n      bufferedMutations.reverse().forEach(function (mutation) {\n        if (mutation.type === 'characterData') {\n          // We don't want to restore the DOM for characterData mutations\n          // because this interrupts the composition.\n          return;\n        }\n        mutation.removedNodes.forEach(function (node) {\n          mutation.target.insertBefore(node, mutation.nextSibling);\n        });\n        mutation.addedNodes.forEach(function (node) {\n          mutation.target.removeChild(node);\n        });\n      });\n      // Clear buffered mutations to ensure we don't undo them twice\n      clear();\n    }\n  }\n  return {\n    registerMutations: registerMutations,\n    restoreDOM: restoreDOM,\n    clear: clear\n  };\n};\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nvar MUTATION_OBSERVER_CONFIG = {\n  subtree: true,\n  childList: true,\n  characterData: true,\n  characterDataOldValue: true\n};\n// We have to use a class component here since we rely on `getSnapshotBeforeUpdate` which has no FC equivalent\n// to run code synchronously immediately before react commits the component update to the DOM.\nvar RestoreDOMComponent = /*#__PURE__*/function (_Component) {\n  _inherits(RestoreDOMComponent, _Component);\n  var _super = _createSuper(RestoreDOMComponent);\n  function RestoreDOMComponent() {\n    var _this;\n    _classCallCheck(this, RestoreDOMComponent);\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    _this = _super.call.apply(_super, [this].concat(args));\n    _defineProperty(_assertThisInitialized(_this), \"context\", null);\n    _defineProperty(_assertThisInitialized(_this), \"manager\", null);\n    _defineProperty(_assertThisInitialized(_this), \"mutationObserver\", null);\n    return _this;\n  }\n  _createClass(RestoreDOMComponent, [{\n    key: \"observe\",\n    value: function observe() {\n      var _this$mutationObserve;\n      var node = this.props.node;\n      if (!node.current) {\n        throw new Error('Failed to attach MutationObserver, `node` is undefined');\n      }\n      (_this$mutationObserve = this.mutationObserver) === null || _this$mutationObserve === void 0 || _this$mutationObserve.observe(node.current, MUTATION_OBSERVER_CONFIG);\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var receivedUserInput = this.props.receivedUserInput;\n      var editor = this.context;\n      this.manager = createRestoreDomManager(editor, receivedUserInput);\n      this.mutationObserver = new MutationObserver(this.manager.registerMutations);\n      this.observe();\n    }\n  }, {\n    key: \"getSnapshotBeforeUpdate\",\n    value: function getSnapshotBeforeUpdate() {\n      var _this$mutationObserve2, _this$mutationObserve3, _this$manager2;\n      var pendingMutations = (_this$mutationObserve2 = this.mutationObserver) === null || _this$mutationObserve2 === void 0 ? void 0 : _this$mutationObserve2.takeRecords();\n      if (pendingMutations !== null && pendingMutations !== void 0 && pendingMutations.length) {\n        var _this$manager;\n        (_this$manager = this.manager) === null || _this$manager === void 0 || _this$manager.registerMutations(pendingMutations);\n      }\n      (_this$mutationObserve3 = this.mutationObserver) === null || _this$mutationObserve3 === void 0 || _this$mutationObserve3.disconnect();\n      (_this$manager2 = this.manager) === null || _this$manager2 === void 0 || _this$manager2.restoreDOM();\n      return null;\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      var _this$manager3;\n      (_this$manager3 = this.manager) === null || _this$manager3 === void 0 || _this$manager3.clear();\n      this.observe();\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      var _this$mutationObserve4;\n      (_this$mutationObserve4 = this.mutationObserver) === null || _this$mutationObserve4 === void 0 || _this$mutationObserve4.disconnect();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return this.props.children;\n    }\n  }]);\n  return RestoreDOMComponent;\n}(React.Component);\n_defineProperty(RestoreDOMComponent, \"contextType\", EditorContext);\nvar RestoreDOM = slateDom.IS_ANDROID ? RestoreDOMComponent : function (_ref) {\n  var children = _ref.children;\n  return /*#__PURE__*/React.createElement(React.Fragment, null, children);\n};\n\n/**\n * A React context for sharing the `composing` state of the editor.\n */\nvar ComposingContext = /*#__PURE__*/React.createContext(false);\n/**\n * Get the current `composing` state of the editor.\n */\nvar useComposing = function useComposing() {\n  return React.useContext(ComposingContext);\n};\n\nvar _excluded$1 = [\"autoFocus\", \"decorate\", \"onDOMBeforeInput\", \"placeholder\", \"readOnly\", \"renderElement\", \"renderLeaf\", \"renderPlaceholder\", \"scrollSelectionIntoView\", \"style\", \"as\", \"disableDefaultStyles\"],\n  _excluded2 = [\"text\"];\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nvar Children = function Children(props) {\n  return /*#__PURE__*/React.createElement(React.Fragment, null, useChildren(props));\n};\n/**\n * Editable.\n */\nvar Editable = /*#__PURE__*/React.forwardRef(function (props, forwardedRef) {\n  var defaultRenderPlaceholder = React.useCallback(function (props) {\n    return /*#__PURE__*/React.createElement(DefaultPlaceholder, _objectSpread({}, props));\n  }, []);\n  var autoFocus = props.autoFocus,\n    _props$decorate = props.decorate,\n    decorate = _props$decorate === void 0 ? defaultDecorate : _props$decorate,\n    propsOnDOMBeforeInput = props.onDOMBeforeInput,\n    placeholder = props.placeholder,\n    _props$readOnly = props.readOnly,\n    readOnly = _props$readOnly === void 0 ? false : _props$readOnly,\n    renderElement = props.renderElement,\n    renderLeaf = props.renderLeaf,\n    _props$renderPlacehol = props.renderPlaceholder,\n    renderPlaceholder = _props$renderPlacehol === void 0 ? defaultRenderPlaceholder : _props$renderPlacehol,\n    _props$scrollSelectio = props.scrollSelectionIntoView,\n    scrollSelectionIntoView = _props$scrollSelectio === void 0 ? defaultScrollSelectionIntoView : _props$scrollSelectio,\n    _props$style = props.style,\n    userStyle = _props$style === void 0 ? {} : _props$style,\n    _props$as = props.as,\n    Component = _props$as === void 0 ? 'div' : _props$as,\n    _props$disableDefault = props.disableDefaultStyles,\n    disableDefaultStyles = _props$disableDefault === void 0 ? false : _props$disableDefault,\n    attributes = _objectWithoutProperties(props, _excluded$1);\n  var editor = useSlate();\n  // Rerender editor when composition status changed\n  var _useState = React.useState(false),\n    _useState2 = _slicedToArray(_useState, 2),\n    isComposing = _useState2[0],\n    setIsComposing = _useState2[1];\n  var ref = React.useRef(null);\n  var deferredOperations = React.useRef([]);\n  var _useState3 = React.useState(),\n    _useState4 = _slicedToArray(_useState3, 2),\n    placeholderHeight = _useState4[0],\n    setPlaceholderHeight = _useState4[1];\n  var processing = React.useRef(false);\n  var _useTrackUserInput = useTrackUserInput(),\n    onUserInput = _useTrackUserInput.onUserInput,\n    receivedUserInput = _useTrackUserInput.receivedUserInput;\n  var _useReducer = React.useReducer(function (s) {\n      return s + 1;\n    }, 0),\n    _useReducer2 = _slicedToArray(_useReducer, 2),\n    forceRender = _useReducer2[1];\n  slateDom.EDITOR_TO_FORCE_RENDER.set(editor, forceRender);\n  // Update internal state on each render.\n  slateDom.IS_READ_ONLY.set(editor, readOnly);\n  // Keep track of some state for the event handler logic.\n  var state = React.useMemo(function () {\n    return {\n      isDraggingInternally: false,\n      isUpdatingSelection: false,\n      latestElement: null,\n      hasMarkPlaceholder: false\n    };\n  }, []);\n  // The autoFocus TextareaHTMLAttribute doesn't do anything on a div, so it\n  // needs to be manually focused.\n  React.useEffect(function () {\n    if (ref.current && autoFocus) {\n      ref.current.focus();\n    }\n  }, [autoFocus]);\n  /**\n   * The AndroidInputManager object has a cyclical dependency on onDOMSelectionChange\n   *\n   * It is defined as a reference to simplify hook dependencies and clarify that\n   * it needs to be initialized.\n   */\n  var androidInputManagerRef = React.useRef();\n  // Listen on the native `selectionchange` event to be able to update any time\n  // the selection changes. This is required because React's `onSelect` is leaky\n  // and non-standard so it doesn't fire until after a selection has been\n  // released. This causes issues in situations where another change happens\n  // while a selection is being dragged.\n  var onDOMSelectionChange = React.useMemo(function () {\n    return throttle(function () {\n      if (slateDom.IS_NODE_MAP_DIRTY.get(editor)) {\n        onDOMSelectionChange();\n        return;\n      }\n      var el = ReactEditor.toDOMNode(editor, editor);\n      var root = el.getRootNode();\n      if (!processing.current && slateDom.IS_WEBKIT && root instanceof ShadowRoot) {\n        processing.current = true;\n        var active = slateDom.getActiveElement();\n        if (active) {\n          document.execCommand('indent');\n        } else {\n          slate.Transforms.deselect(editor);\n        }\n        processing.current = false;\n        return;\n      }\n      var androidInputManager = androidInputManagerRef.current;\n      if ((slateDom.IS_ANDROID || !ReactEditor.isComposing(editor)) && (!state.isUpdatingSelection || androidInputManager !== null && androidInputManager !== void 0 && androidInputManager.isFlushing()) && !state.isDraggingInternally) {\n        var _root = ReactEditor.findDocumentOrShadowRoot(editor);\n        var activeElement = _root.activeElement;\n        var _el = ReactEditor.toDOMNode(editor, editor);\n        var domSelection = slateDom.getSelection(_root);\n        if (activeElement === _el) {\n          state.latestElement = activeElement;\n          slateDom.IS_FOCUSED.set(editor, true);\n        } else {\n          slateDom.IS_FOCUSED[\"delete\"](editor);\n        }\n        if (!domSelection) {\n          return slate.Transforms.deselect(editor);\n        }\n        var anchorNode = domSelection.anchorNode,\n          focusNode = domSelection.focusNode;\n        var anchorNodeSelectable = ReactEditor.hasEditableTarget(editor, anchorNode) || ReactEditor.isTargetInsideNonReadonlyVoid(editor, anchorNode);\n        var focusNodeInEditor = ReactEditor.hasTarget(editor, focusNode);\n        if (anchorNodeSelectable && focusNodeInEditor) {\n          var range = ReactEditor.toSlateRange(editor, domSelection, {\n            exactMatch: false,\n            suppressThrow: true\n          });\n          if (range) {\n            if (!ReactEditor.isComposing(editor) && !(androidInputManager !== null && androidInputManager !== void 0 && androidInputManager.hasPendingChanges()) && !(androidInputManager !== null && androidInputManager !== void 0 && androidInputManager.isFlushing())) {\n              slate.Transforms.select(editor, range);\n            } else {\n              androidInputManager === null || androidInputManager === void 0 || androidInputManager.handleUserSelect(range);\n            }\n          }\n        }\n        // Deselect the editor if the dom selection is not selectable in readonly mode\n        if (readOnly && (!anchorNodeSelectable || !focusNodeInEditor)) {\n          slate.Transforms.deselect(editor);\n        }\n      }\n    }, 100);\n  }, [editor, readOnly, state]);\n  var scheduleOnDOMSelectionChange = React.useMemo(function () {\n    return debounce(onDOMSelectionChange, 0);\n  }, [onDOMSelectionChange]);\n  androidInputManagerRef.current = useAndroidInputManager({\n    node: ref,\n    onDOMSelectionChange: onDOMSelectionChange,\n    scheduleOnDOMSelectionChange: scheduleOnDOMSelectionChange\n  });\n  useIsomorphicLayoutEffect(function () {\n    var _androidInputManagerR, _androidInputManagerR2;\n    // Update element-related weak maps with the DOM element ref.\n    var window;\n    if (ref.current && (window = slateDom.getDefaultView(ref.current))) {\n      slateDom.EDITOR_TO_WINDOW.set(editor, window);\n      slateDom.EDITOR_TO_ELEMENT.set(editor, ref.current);\n      slateDom.NODE_TO_ELEMENT.set(editor, ref.current);\n      slateDom.ELEMENT_TO_NODE.set(ref.current, editor);\n    } else {\n      slateDom.NODE_TO_ELEMENT[\"delete\"](editor);\n    }\n    // Make sure the DOM selection state is in sync.\n    var selection = editor.selection;\n    var root = ReactEditor.findDocumentOrShadowRoot(editor);\n    var domSelection = slateDom.getSelection(root);\n    if (!domSelection || !ReactEditor.isFocused(editor) || (_androidInputManagerR = androidInputManagerRef.current) !== null && _androidInputManagerR !== void 0 && _androidInputManagerR.hasPendingAction()) {\n      return;\n    }\n    var setDomSelection = function setDomSelection(forceChange) {\n      var hasDomSelection = domSelection.type !== 'None';\n      // If the DOM selection is properly unset, we're done.\n      if (!selection && !hasDomSelection) {\n        return;\n      }\n      // Get anchorNode and focusNode\n      var focusNode = domSelection.focusNode;\n      var anchorNode;\n      // COMPAT: In firefox the normal selection way does not work\n      // (https://github.com/ianstormtaylor/slate/pull/5486#issue-1820720223)\n      if (slateDom.IS_FIREFOX && domSelection.rangeCount > 1) {\n        var firstRange = domSelection.getRangeAt(0);\n        var lastRange = domSelection.getRangeAt(domSelection.rangeCount - 1);\n        // Right to left\n        if (firstRange.startContainer === focusNode) {\n          anchorNode = lastRange.endContainer;\n        } else {\n          // Left to right\n          anchorNode = firstRange.startContainer;\n        }\n      } else {\n        anchorNode = domSelection.anchorNode;\n      }\n      // verify that the dom selection is in the editor\n      var editorElement = slateDom.EDITOR_TO_ELEMENT.get(editor);\n      var hasDomSelectionInEditor = false;\n      if (editorElement.contains(anchorNode) && editorElement.contains(focusNode)) {\n        hasDomSelectionInEditor = true;\n      }\n      // If the DOM selection is in the editor and the editor selection is already correct, we're done.\n      if (hasDomSelection && hasDomSelectionInEditor && selection && !forceChange) {\n        var slateRange = ReactEditor.toSlateRange(editor, domSelection, {\n          exactMatch: true,\n          // domSelection is not necessarily a valid Slate range\n          // (e.g. when clicking on contentEditable:false element)\n          suppressThrow: true\n        });\n        if (slateRange && slate.Range.equals(slateRange, selection)) {\n          var _anchorNode;\n          if (!state.hasMarkPlaceholder) {\n            return;\n          }\n          // Ensure selection is inside the mark placeholder\n          if ((_anchorNode = anchorNode) !== null && _anchorNode !== void 0 && (_anchorNode = _anchorNode.parentElement) !== null && _anchorNode !== void 0 && _anchorNode.hasAttribute('data-slate-mark-placeholder')) {\n            return;\n          }\n        }\n      }\n      // when <Editable/> is being controlled through external value\n      // then its children might just change - DOM responds to it on its own\n      // but Slate's value is not being updated through any operation\n      // and thus it doesn't transform selection on its own\n      if (selection && !ReactEditor.hasRange(editor, selection)) {\n        editor.selection = ReactEditor.toSlateRange(editor, domSelection, {\n          exactMatch: false,\n          suppressThrow: true\n        });\n        return;\n      }\n      // Otherwise the DOM selection is out of sync, so update it.\n      state.isUpdatingSelection = true;\n      var newDomRange = null;\n      try {\n        newDomRange = selection && ReactEditor.toDOMRange(editor, selection);\n      } catch (e) {\n        // Ignore, dom and state might be out of sync\n      }\n      if (newDomRange) {\n        if (ReactEditor.isComposing(editor) && !slateDom.IS_ANDROID) {\n          domSelection.collapseToEnd();\n        } else if (slate.Range.isBackward(selection)) {\n          domSelection.setBaseAndExtent(newDomRange.endContainer, newDomRange.endOffset, newDomRange.startContainer, newDomRange.startOffset);\n        } else {\n          domSelection.setBaseAndExtent(newDomRange.startContainer, newDomRange.startOffset, newDomRange.endContainer, newDomRange.endOffset);\n        }\n        scrollSelectionIntoView(editor, newDomRange);\n      } else {\n        domSelection.removeAllRanges();\n      }\n      return newDomRange;\n    };\n    // In firefox if there is more then 1 range and we call setDomSelection we remove the ability to select more cells in a table\n    if (domSelection.rangeCount <= 1) {\n      setDomSelection();\n    }\n    var ensureSelection = ((_androidInputManagerR2 = androidInputManagerRef.current) === null || _androidInputManagerR2 === void 0 ? void 0 : _androidInputManagerR2.isFlushing()) === 'action';\n    if (!slateDom.IS_ANDROID || !ensureSelection) {\n      setTimeout(function () {\n        state.isUpdatingSelection = false;\n      });\n      return;\n    }\n    var timeoutId = null;\n    var animationFrameId = requestAnimationFrame(function () {\n      if (ensureSelection) {\n        var ensureDomSelection = function ensureDomSelection(forceChange) {\n          try {\n            var el = ReactEditor.toDOMNode(editor, editor);\n            el.focus();\n            setDomSelection(forceChange);\n          } catch (e) {\n            // Ignore, dom and state might be out of sync\n          }\n        };\n        // Compat: Android IMEs try to force their selection by manually re-applying it even after we set it.\n        // This essentially would make setting the slate selection during an update meaningless, so we force it\n        // again here. We can't only do it in the setTimeout after the animation frame since that would cause a\n        // visible flicker.\n        ensureDomSelection();\n        timeoutId = setTimeout(function () {\n          // COMPAT: While setting the selection in an animation frame visually correctly sets the selection,\n          // it doesn't update GBoards spellchecker state. We have to manually trigger a selection change after\n          // the animation frame to ensure it displays the correct state.\n          ensureDomSelection(true);\n          state.isUpdatingSelection = false;\n        });\n      }\n    });\n    return function () {\n      cancelAnimationFrame(animationFrameId);\n      if (timeoutId) {\n        clearTimeout(timeoutId);\n      }\n    };\n  });\n  // Listen on the native `beforeinput` event to get real \"Level 2\" events. This\n  // is required because React's `beforeinput` is fake and never really attaches\n  // to the real event sadly. (2019/11/01)\n  // https://github.com/facebook/react/issues/11211\n  var onDOMBeforeInput = React.useCallback(function (event) {\n    var el = ReactEditor.toDOMNode(editor, editor);\n    var root = el.getRootNode();\n    if (processing !== null && processing !== void 0 && processing.current && slateDom.IS_WEBKIT && root instanceof ShadowRoot) {\n      var ranges = event.getTargetRanges();\n      var range = ranges[0];\n      var newRange = new window.Range();\n      newRange.setStart(range.startContainer, range.startOffset);\n      newRange.setEnd(range.endContainer, range.endOffset);\n      // Translate the DOM Range into a Slate Range\n      var slateRange = ReactEditor.toSlateRange(editor, newRange, {\n        exactMatch: false,\n        suppressThrow: false\n      });\n      slate.Transforms.select(editor, slateRange);\n      event.preventDefault();\n      event.stopImmediatePropagation();\n      return;\n    }\n    onUserInput();\n    if (!readOnly && ReactEditor.hasEditableTarget(editor, event.target) && !isDOMEventHandled(event, propsOnDOMBeforeInput)) {\n      var _EDITOR_TO_USER_SELEC;\n      // COMPAT: BeforeInput events aren't cancelable on android, so we have to handle them differently using the android input manager.\n      if (androidInputManagerRef.current) {\n        return androidInputManagerRef.current.handleDOMBeforeInput(event);\n      }\n      // Some IMEs/Chrome extensions like e.g. Grammarly set the selection immediately before\n      // triggering a `beforeinput` expecting the change to be applied to the immediately before\n      // set selection.\n      scheduleOnDOMSelectionChange.flush();\n      onDOMSelectionChange.flush();\n      var selection = editor.selection;\n      var type = event.inputType;\n      var data = event.dataTransfer || event.data || undefined;\n      var isCompositionChange = type === 'insertCompositionText' || type === 'deleteCompositionText';\n      // COMPAT: use composition change events as a hint to where we should insert\n      // composition text if we aren't composing to work around https://github.com/ianstormtaylor/slate/issues/5038\n      if (isCompositionChange && ReactEditor.isComposing(editor)) {\n        return;\n      }\n      var _native = false;\n      if (type === 'insertText' && selection && slate.Range.isCollapsed(selection) &&\n      // Only use native character insertion for single characters a-z or space for now.\n      // Long-press events (hold a + press 4 = ä) to choose a special character otherwise\n      // causes duplicate inserts.\n      event.data && event.data.length === 1 && /[a-z ]/i.test(event.data) &&\n      // Chrome has issues correctly editing the start of nodes: https://bugs.chromium.org/p/chromium/issues/detail?id=1249405\n      // When there is an inline element, e.g. a link, and you select\n      // right after it (the start of the next node).\n      selection.anchor.offset !== 0) {\n        _native = true;\n        // Skip native if there are marks, as\n        // `insertText` will insert a node, not just text.\n        if (editor.marks) {\n          _native = false;\n        }\n        // If the NODE_MAP is dirty, we can't trust the selection anchor (eg ReactEditor.toDOMPoint)\n        if (!slateDom.IS_NODE_MAP_DIRTY.get(editor)) {\n          var _node$parentElement, _window$getComputedSt;\n          // Chrome also has issues correctly editing the end of anchor elements: https://bugs.chromium.org/p/chromium/issues/detail?id=1259100\n          // Therefore we don't allow native events to insert text at the end of anchor nodes.\n          var anchor = selection.anchor;\n          var _ReactEditor$toDOMPoi = ReactEditor.toDOMPoint(editor, anchor),\n            _ReactEditor$toDOMPoi2 = _slicedToArray(_ReactEditor$toDOMPoi, 2),\n            node = _ReactEditor$toDOMPoi2[0],\n            offset = _ReactEditor$toDOMPoi2[1];\n          var anchorNode = (_node$parentElement = node.parentElement) === null || _node$parentElement === void 0 ? void 0 : _node$parentElement.closest('a');\n          var _window = ReactEditor.getWindow(editor);\n          if (_native && anchorNode && ReactEditor.hasDOMNode(editor, anchorNode)) {\n            var _lastText$textContent;\n            // Find the last text node inside the anchor.\n            var lastText = _window === null || _window === void 0 ? void 0 : _window.document.createTreeWalker(anchorNode, NodeFilter.SHOW_TEXT).lastChild();\n            if (lastText === node && ((_lastText$textContent = lastText.textContent) === null || _lastText$textContent === void 0 ? void 0 : _lastText$textContent.length) === offset) {\n              _native = false;\n            }\n          }\n          // Chrome has issues with the presence of tab characters inside elements with whiteSpace = 'pre'\n          // causing abnormal insert behavior: https://bugs.chromium.org/p/chromium/issues/detail?id=1219139\n          if (_native && node.parentElement && (_window === null || _window === void 0 || (_window$getComputedSt = _window.getComputedStyle(node.parentElement)) === null || _window$getComputedSt === void 0 ? void 0 : _window$getComputedSt.whiteSpace) === 'pre') {\n            var block = slate.Editor.above(editor, {\n              at: anchor.path,\n              match: function match(n) {\n                return slate.Element.isElement(n) && slate.Editor.isBlock(editor, n);\n              }\n            });\n            if (block && slate.Node.string(block[0]).includes('\\t')) {\n              _native = false;\n            }\n          }\n        }\n      }\n      // COMPAT: For the deleting forward/backward input types we don't want\n      // to change the selection because it is the range that will be deleted,\n      // and those commands determine that for themselves.\n      // If the NODE_MAP is dirty, we can't trust the selection anchor (eg ReactEditor.toDOMPoint via ReactEditor.toSlateRange)\n      if ((!type.startsWith('delete') || type.startsWith('deleteBy')) && !slateDom.IS_NODE_MAP_DIRTY.get(editor)) {\n        var _event$getTargetRange = event.getTargetRanges(),\n          _event$getTargetRange2 = _slicedToArray(_event$getTargetRange, 1),\n          targetRange = _event$getTargetRange2[0];\n        if (targetRange) {\n          var _range = ReactEditor.toSlateRange(editor, targetRange, {\n            exactMatch: false,\n            suppressThrow: false\n          });\n          if (!selection || !slate.Range.equals(selection, _range)) {\n            _native = false;\n            var selectionRef = !isCompositionChange && editor.selection && slate.Editor.rangeRef(editor, editor.selection);\n            slate.Transforms.select(editor, _range);\n            if (selectionRef) {\n              slateDom.EDITOR_TO_USER_SELECTION.set(editor, selectionRef);\n            }\n          }\n        }\n      }\n      // Composition change types occur while a user is composing text and can't be\n      // cancelled. Let them through and wait for the composition to end.\n      if (isCompositionChange) {\n        return;\n      }\n      if (!_native) {\n        event.preventDefault();\n      }\n      // COMPAT: If the selection is expanded, even if the command seems like\n      // a delete forward/backward command it should delete the selection.\n      if (selection && slate.Range.isExpanded(selection) && type.startsWith('delete')) {\n        var direction = type.endsWith('Backward') ? 'backward' : 'forward';\n        slate.Editor.deleteFragment(editor, {\n          direction: direction\n        });\n        return;\n      }\n      switch (type) {\n        case 'deleteByComposition':\n        case 'deleteByCut':\n        case 'deleteByDrag':\n          {\n            slate.Editor.deleteFragment(editor);\n            break;\n          }\n        case 'deleteContent':\n        case 'deleteContentForward':\n          {\n            slate.Editor.deleteForward(editor);\n            break;\n          }\n        case 'deleteContentBackward':\n          {\n            slate.Editor.deleteBackward(editor);\n            break;\n          }\n        case 'deleteEntireSoftLine':\n          {\n            slate.Editor.deleteBackward(editor, {\n              unit: 'line'\n            });\n            slate.Editor.deleteForward(editor, {\n              unit: 'line'\n            });\n            break;\n          }\n        case 'deleteHardLineBackward':\n          {\n            slate.Editor.deleteBackward(editor, {\n              unit: 'block'\n            });\n            break;\n          }\n        case 'deleteSoftLineBackward':\n          {\n            slate.Editor.deleteBackward(editor, {\n              unit: 'line'\n            });\n            break;\n          }\n        case 'deleteHardLineForward':\n          {\n            slate.Editor.deleteForward(editor, {\n              unit: 'block'\n            });\n            break;\n          }\n        case 'deleteSoftLineForward':\n          {\n            slate.Editor.deleteForward(editor, {\n              unit: 'line'\n            });\n            break;\n          }\n        case 'deleteWordBackward':\n          {\n            slate.Editor.deleteBackward(editor, {\n              unit: 'word'\n            });\n            break;\n          }\n        case 'deleteWordForward':\n          {\n            slate.Editor.deleteForward(editor, {\n              unit: 'word'\n            });\n            break;\n          }\n        case 'insertLineBreak':\n          slate.Editor.insertSoftBreak(editor);\n          break;\n        case 'insertParagraph':\n          {\n            slate.Editor.insertBreak(editor);\n            break;\n          }\n        case 'insertFromComposition':\n        case 'insertFromDrop':\n        case 'insertFromPaste':\n        case 'insertFromYank':\n        case 'insertReplacementText':\n        case 'insertText':\n          {\n            if (type === 'insertFromComposition') {\n              // COMPAT: in Safari, `compositionend` is dispatched after the\n              // `beforeinput` for \"insertFromComposition\". But if we wait for it\n              // then we will abort because we're still composing and the selection\n              // won't be updated properly.\n              // https://www.w3.org/TR/input-events-2/\n              if (ReactEditor.isComposing(editor)) {\n                setIsComposing(false);\n                slateDom.IS_COMPOSING.set(editor, false);\n              }\n            }\n            // use a weak comparison instead of 'instanceof' to allow\n            // programmatic access of paste events coming from external windows\n            // like cypress where cy.window does not work realibly\n            if ((data === null || data === void 0 ? void 0 : data.constructor.name) === 'DataTransfer') {\n              ReactEditor.insertData(editor, data);\n            } else if (typeof data === 'string') {\n              // Only insertText operations use the native functionality, for now.\n              // Potentially expand to single character deletes, as well.\n              if (_native) {\n                deferredOperations.current.push(function () {\n                  return slate.Editor.insertText(editor, data);\n                });\n              } else {\n                slate.Editor.insertText(editor, data);\n              }\n            }\n            break;\n          }\n      }\n      // Restore the actual user section if nothing manually set it.\n      var toRestore = (_EDITOR_TO_USER_SELEC = slateDom.EDITOR_TO_USER_SELECTION.get(editor)) === null || _EDITOR_TO_USER_SELEC === void 0 ? void 0 : _EDITOR_TO_USER_SELEC.unref();\n      slateDom.EDITOR_TO_USER_SELECTION[\"delete\"](editor);\n      if (toRestore && (!editor.selection || !slate.Range.equals(editor.selection, toRestore))) {\n        slate.Transforms.select(editor, toRestore);\n      }\n    }\n  }, [editor, onDOMSelectionChange, onUserInput, propsOnDOMBeforeInput, readOnly, scheduleOnDOMSelectionChange]);\n  var callbackRef = React.useCallback(function (node) {\n    if (node == null) {\n      onDOMSelectionChange.cancel();\n      scheduleOnDOMSelectionChange.cancel();\n      slateDom.EDITOR_TO_ELEMENT[\"delete\"](editor);\n      slateDom.NODE_TO_ELEMENT[\"delete\"](editor);\n      if (ref.current && slateDom.HAS_BEFORE_INPUT_SUPPORT) {\n        // @ts-ignore The `beforeinput` event isn't recognized.\n        ref.current.removeEventListener('beforeinput', onDOMBeforeInput);\n      }\n    } else {\n      // Attach a native DOM event handler for `beforeinput` events, because React's\n      // built-in `onBeforeInput` is actually a leaky polyfill that doesn't expose\n      // real `beforeinput` events sadly... (2019/11/04)\n      // https://github.com/facebook/react/issues/11211\n      if (slateDom.HAS_BEFORE_INPUT_SUPPORT) {\n        // @ts-ignore The `beforeinput` event isn't recognized.\n        node.addEventListener('beforeinput', onDOMBeforeInput);\n      }\n    }\n    ref.current = node;\n    if (typeof forwardedRef === 'function') {\n      forwardedRef(node);\n    } else if (forwardedRef) {\n      forwardedRef.current = node;\n    }\n  }, [onDOMSelectionChange, scheduleOnDOMSelectionChange, editor, onDOMBeforeInput, forwardedRef]);\n  useIsomorphicLayoutEffect(function () {\n    var window = ReactEditor.getWindow(editor);\n    // COMPAT: In Chrome, `selectionchange` events can fire when <input> and\n    // <textarea> elements are appended to the DOM, causing\n    // `editor.selection` to be overwritten in some circumstances.\n    // (2025/01/16) https://issues.chromium.org/issues/389368412\n    var onSelectionChange = function onSelectionChange(_ref) {\n      var target = _ref.target;\n      var targetElement = target instanceof HTMLElement ? target : null;\n      var targetTagName = targetElement === null || targetElement === void 0 ? void 0 : targetElement.tagName;\n      if (targetTagName === 'INPUT' || targetTagName === 'TEXTAREA') {\n        return;\n      }\n      scheduleOnDOMSelectionChange();\n    };\n    // Attach a native DOM event handler for `selectionchange`, because React's\n    // built-in `onSelect` handler doesn't fire for all selection changes. It's\n    // a leaky polyfill that only fires on keypresses or clicks. Instead, we\n    // want to fire for any change to the selection inside the editor.\n    // (2019/11/04) https://github.com/facebook/react/issues/5785\n    window.document.addEventListener('selectionchange', onSelectionChange);\n    // Listen for dragend and drop globally. In Firefox, if a drop handler\n    // initiates an operation that causes the originally dragged element to\n    // unmount, that element will not emit a dragend event. (2024/06/21)\n    var stoppedDragging = function stoppedDragging() {\n      state.isDraggingInternally = false;\n    };\n    window.document.addEventListener('dragend', stoppedDragging);\n    window.document.addEventListener('drop', stoppedDragging);\n    return function () {\n      window.document.removeEventListener('selectionchange', onSelectionChange);\n      window.document.removeEventListener('dragend', stoppedDragging);\n      window.document.removeEventListener('drop', stoppedDragging);\n    };\n  }, [scheduleOnDOMSelectionChange, state]);\n  var decorations = decorate([editor, []]);\n  var showPlaceholder = placeholder && editor.children.length === 1 && Array.from(slate.Node.texts(editor)).length === 1 && slate.Node.string(editor) === '' && !isComposing;\n  var placeHolderResizeHandler = React.useCallback(function (placeholderEl) {\n    if (placeholderEl && showPlaceholder) {\n      var _placeholderEl$getBou;\n      setPlaceholderHeight((_placeholderEl$getBou = placeholderEl.getBoundingClientRect()) === null || _placeholderEl$getBou === void 0 ? void 0 : _placeholderEl$getBou.height);\n    } else {\n      setPlaceholderHeight(undefined);\n    }\n  }, [showPlaceholder]);\n  if (showPlaceholder) {\n    var _decorations$push;\n    var start = slate.Editor.start(editor, []);\n    decorations.push((_decorations$push = {}, _defineProperty(_decorations$push, slateDom.PLACEHOLDER_SYMBOL, true), _defineProperty(_decorations$push, \"placeholder\", placeholder), _defineProperty(_decorations$push, \"onPlaceholderResize\", placeHolderResizeHandler), _defineProperty(_decorations$push, \"anchor\", start), _defineProperty(_decorations$push, \"focus\", start), _decorations$push));\n  }\n  var marks = editor.marks;\n  state.hasMarkPlaceholder = false;\n  if (editor.selection && slate.Range.isCollapsed(editor.selection) && marks) {\n    var anchor = editor.selection.anchor;\n    var leaf = slate.Node.leaf(editor, anchor.path);\n    leaf.text;\n      var rest = _objectWithoutProperties(leaf, _excluded2);\n    // While marks isn't a 'complete' text, we can still use loose Text.equals\n    // here which only compares marks anyway.\n    if (!slate.Text.equals(leaf, marks, {\n      loose: true\n    })) {\n      state.hasMarkPlaceholder = true;\n      var unset = Object.fromEntries(Object.keys(rest).map(function (mark) {\n        return [mark, null];\n      }));\n      decorations.push(_objectSpread(_objectSpread(_objectSpread(_defineProperty({}, slateDom.MARK_PLACEHOLDER_SYMBOL, true), unset), marks), {}, {\n        anchor: anchor,\n        focus: anchor\n      }));\n    }\n  }\n  // Update EDITOR_TO_MARK_PLACEHOLDER_MARKS in setTimeout useEffect to ensure we don't set it\n  // before we receive the composition end event.\n  React.useEffect(function () {\n    setTimeout(function () {\n      var selection = editor.selection;\n      if (selection) {\n        var _anchor = selection.anchor;\n        var _text = slate.Node.leaf(editor, _anchor.path);\n        // While marks isn't a 'complete' text, we can still use loose Text.equals\n        // here which only compares marks anyway.\n        if (marks && !slate.Text.equals(_text, marks, {\n          loose: true\n        })) {\n          slateDom.EDITOR_TO_PENDING_INSERTION_MARKS.set(editor, marks);\n          return;\n        }\n      }\n      slateDom.EDITOR_TO_PENDING_INSERTION_MARKS[\"delete\"](editor);\n    });\n  });\n  return /*#__PURE__*/React.createElement(ReadOnlyContext.Provider, {\n    value: readOnly\n  }, /*#__PURE__*/React.createElement(ComposingContext.Provider, {\n    value: isComposing\n  }, /*#__PURE__*/React.createElement(DecorateContext.Provider, {\n    value: decorate\n  }, /*#__PURE__*/React.createElement(RestoreDOM, {\n    node: ref,\n    receivedUserInput: receivedUserInput\n  }, /*#__PURE__*/React.createElement(Component, _objectSpread(_objectSpread({\n    role: readOnly ? undefined : 'textbox',\n    \"aria-multiline\": readOnly ? undefined : true\n  }, attributes), {}, {\n    // COMPAT: Certain browsers don't support the `beforeinput` event, so we'd\n    // have to use hacks to make these replacement-based features work.\n    // For SSR situations HAS_BEFORE_INPUT_SUPPORT is false and results in prop\n    // mismatch warning app moves to browser. Pass-through consumer props when\n    // not CAN_USE_DOM (SSR) and default to falsy value\n    spellCheck: slateDom.HAS_BEFORE_INPUT_SUPPORT || !slateDom.CAN_USE_DOM ? attributes.spellCheck : false,\n    autoCorrect: slateDom.HAS_BEFORE_INPUT_SUPPORT || !slateDom.CAN_USE_DOM ? attributes.autoCorrect : 'false',\n    autoCapitalize: slateDom.HAS_BEFORE_INPUT_SUPPORT || !slateDom.CAN_USE_DOM ? attributes.autoCapitalize : 'false',\n    \"data-slate-editor\": true,\n    \"data-slate-node\": \"value\",\n    // explicitly set this\n    contentEditable: !readOnly,\n    // in some cases, a decoration needs access to the range / selection to decorate a text node,\n    // then you will select the whole text node when you select part the of text\n    // this magic zIndex=\"-1\" will fix it\n    zindex: -1,\n    suppressContentEditableWarning: true,\n    ref: callbackRef,\n    style: _objectSpread(_objectSpread({}, disableDefaultStyles ? {} : _objectSpread({\n      // Allow positioning relative to the editable element.\n      position: 'relative',\n      // Preserve adjacent whitespace and new lines.\n      whiteSpace: 'pre-wrap',\n      // Allow words to break if they are too long.\n      wordWrap: 'break-word'\n    }, placeholderHeight ? {\n      minHeight: placeholderHeight\n    } : {})), userStyle),\n    onBeforeInput: React.useCallback(function (event) {\n      // COMPAT: Certain browsers don't support the `beforeinput` event, so we\n      // fall back to React's leaky polyfill instead just for it. It\n      // only works for the `insertText` input type.\n      if (!slateDom.HAS_BEFORE_INPUT_SUPPORT && !readOnly && !isEventHandled(event, attributes.onBeforeInput) && ReactEditor.hasSelectableTarget(editor, event.target)) {\n        event.preventDefault();\n        if (!ReactEditor.isComposing(editor)) {\n          var _text2 = event.data;\n          slate.Editor.insertText(editor, _text2);\n        }\n      }\n    }, [attributes.onBeforeInput, editor, readOnly]),\n    onInput: React.useCallback(function (event) {\n      if (isEventHandled(event, attributes.onInput)) {\n        return;\n      }\n      if (androidInputManagerRef.current) {\n        androidInputManagerRef.current.handleInput();\n        return;\n      }\n      // Flush native operations, as native events will have propogated\n      // and we can correctly compare DOM text values in components\n      // to stop rendering, so that browser functions like autocorrect\n      // and spellcheck work as expected.\n      var _iterator = _createForOfIteratorHelper(deferredOperations.current),\n        _step;\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var op = _step.value;\n          op();\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n      deferredOperations.current = [];\n      // COMPAT: Since `beforeinput` doesn't fully `preventDefault`,\n      // there's a chance that content might be placed in the browser's undo stack.\n      // This means undo can be triggered even when the div is not focused,\n      // and it only triggers the input event for the node. (2024/10/09)\n      if (!ReactEditor.isFocused(editor)) {\n        var _native2 = event.nativeEvent;\n        var maybeHistoryEditor = editor;\n        if (_native2.inputType === 'historyUndo' && typeof maybeHistoryEditor.undo === 'function') {\n          maybeHistoryEditor.undo();\n          return;\n        }\n        if (_native2.inputType === 'historyRedo' && typeof maybeHistoryEditor.redo === 'function') {\n          maybeHistoryEditor.redo();\n          return;\n        }\n      }\n    }, [attributes.onInput, editor]),\n    onBlur: React.useCallback(function (event) {\n      if (readOnly || state.isUpdatingSelection || !ReactEditor.hasSelectableTarget(editor, event.target) || isEventHandled(event, attributes.onBlur)) {\n        return;\n      }\n      // COMPAT: If the current `activeElement` is still the previous\n      // one, this is due to the window being blurred when the tab\n      // itself becomes unfocused, so we want to abort early to allow to\n      // editor to stay focused when the tab becomes focused again.\n      var root = ReactEditor.findDocumentOrShadowRoot(editor);\n      if (state.latestElement === root.activeElement) {\n        return;\n      }\n      var relatedTarget = event.relatedTarget;\n      var el = ReactEditor.toDOMNode(editor, editor);\n      // COMPAT: The event should be ignored if the focus is returning\n      // to the editor from an embedded editable element (eg. an <input>\n      // element inside a void node).\n      if (relatedTarget === el) {\n        return;\n      }\n      // COMPAT: The event should be ignored if the focus is moving from\n      // the editor to inside a void node's spacer element.\n      if (slateDom.isDOMElement(relatedTarget) && relatedTarget.hasAttribute('data-slate-spacer')) {\n        return;\n      }\n      // COMPAT: The event should be ignored if the focus is moving to a\n      // non- editable section of an element that isn't a void node (eg.\n      // a list item of the check list example).\n      if (relatedTarget != null && slateDom.isDOMNode(relatedTarget) && ReactEditor.hasDOMNode(editor, relatedTarget)) {\n        var node = ReactEditor.toSlateNode(editor, relatedTarget);\n        if (slate.Element.isElement(node) && !editor.isVoid(node)) {\n          return;\n        }\n      }\n      // COMPAT: Safari doesn't always remove the selection even if the content-\n      // editable element no longer has focus. Refer to:\n      // https://stackoverflow.com/questions/12353247/force-contenteditable-div-to-stop-accepting-input-after-it-loses-focus-under-web\n      if (slateDom.IS_WEBKIT) {\n        var domSelection = slateDom.getSelection(root);\n        domSelection === null || domSelection === void 0 || domSelection.removeAllRanges();\n      }\n      slateDom.IS_FOCUSED[\"delete\"](editor);\n    }, [readOnly, state.isUpdatingSelection, state.latestElement, editor, attributes.onBlur]),\n    onClick: React.useCallback(function (event) {\n      if (ReactEditor.hasTarget(editor, event.target) && !isEventHandled(event, attributes.onClick) && slateDom.isDOMNode(event.target)) {\n        var node = ReactEditor.toSlateNode(editor, event.target);\n        var path = ReactEditor.findPath(editor, node);\n        // At this time, the Slate document may be arbitrarily different,\n        // because onClick handlers can change the document before we get here.\n        // Therefore we must check that this path actually exists,\n        // and that it still refers to the same node.\n        if (!slate.Editor.hasPath(editor, path) || slate.Node.get(editor, path) !== node) {\n          return;\n        }\n        if (event.detail === slateDom.TRIPLE_CLICK && path.length >= 1) {\n          var blockPath = path;\n          if (!(slate.Element.isElement(node) && slate.Editor.isBlock(editor, node))) {\n            var _block$;\n            var block = slate.Editor.above(editor, {\n              match: function match(n) {\n                return slate.Element.isElement(n) && slate.Editor.isBlock(editor, n);\n              },\n              at: path\n            });\n            blockPath = (_block$ = block === null || block === void 0 ? void 0 : block[1]) !== null && _block$ !== void 0 ? _block$ : path.slice(0, 1);\n          }\n          var range = slate.Editor.range(editor, blockPath);\n          slate.Transforms.select(editor, range);\n          return;\n        }\n        if (readOnly) {\n          return;\n        }\n        var _start = slate.Editor.start(editor, path);\n        var end = slate.Editor.end(editor, path);\n        var startVoid = slate.Editor[\"void\"](editor, {\n          at: _start\n        });\n        var endVoid = slate.Editor[\"void\"](editor, {\n          at: end\n        });\n        if (startVoid && endVoid && slate.Path.equals(startVoid[1], endVoid[1])) {\n          var _range2 = slate.Editor.range(editor, _start);\n          slate.Transforms.select(editor, _range2);\n        }\n      }\n    }, [editor, attributes.onClick, readOnly]),\n    onCompositionEnd: React.useCallback(function (event) {\n      if (ReactEditor.hasSelectableTarget(editor, event.target)) {\n        var _androidInputManagerR3;\n        if (ReactEditor.isComposing(editor)) {\n          Promise.resolve().then(function () {\n            setIsComposing(false);\n            slateDom.IS_COMPOSING.set(editor, false);\n          });\n        }\n        (_androidInputManagerR3 = androidInputManagerRef.current) === null || _androidInputManagerR3 === void 0 || _androidInputManagerR3.handleCompositionEnd(event);\n        if (isEventHandled(event, attributes.onCompositionEnd) || slateDom.IS_ANDROID) {\n          return;\n        }\n        // COMPAT: In Chrome, `beforeinput` events for compositions\n        // aren't correct and never fire the \"insertFromComposition\"\n        // type that we need. So instead, insert whenever a composition\n        // ends since it will already have been committed to the DOM.\n        if (!slateDom.IS_WEBKIT && !slateDom.IS_FIREFOX_LEGACY && !slateDom.IS_IOS && !slateDom.IS_WECHATBROWSER && !slateDom.IS_UC_MOBILE && event.data) {\n          var placeholderMarks = slateDom.EDITOR_TO_PENDING_INSERTION_MARKS.get(editor);\n          slateDom.EDITOR_TO_PENDING_INSERTION_MARKS[\"delete\"](editor);\n          // Ensure we insert text with the marks the user was actually seeing\n          if (placeholderMarks !== undefined) {\n            slateDom.EDITOR_TO_USER_MARKS.set(editor, editor.marks);\n            editor.marks = placeholderMarks;\n          }\n          slate.Editor.insertText(editor, event.data);\n          var userMarks = slateDom.EDITOR_TO_USER_MARKS.get(editor);\n          slateDom.EDITOR_TO_USER_MARKS[\"delete\"](editor);\n          if (userMarks !== undefined) {\n            editor.marks = userMarks;\n          }\n        }\n      }\n    }, [attributes.onCompositionEnd, editor]),\n    onCompositionUpdate: React.useCallback(function (event) {\n      if (ReactEditor.hasSelectableTarget(editor, event.target) && !isEventHandled(event, attributes.onCompositionUpdate)) {\n        if (!ReactEditor.isComposing(editor)) {\n          setIsComposing(true);\n          slateDom.IS_COMPOSING.set(editor, true);\n        }\n      }\n    }, [attributes.onCompositionUpdate, editor]),\n    onCompositionStart: React.useCallback(function (event) {\n      if (ReactEditor.hasSelectableTarget(editor, event.target)) {\n        var _androidInputManagerR4;\n        (_androidInputManagerR4 = androidInputManagerRef.current) === null || _androidInputManagerR4 === void 0 || _androidInputManagerR4.handleCompositionStart(event);\n        if (isEventHandled(event, attributes.onCompositionStart) || slateDom.IS_ANDROID) {\n          return;\n        }\n        setIsComposing(true);\n        var selection = editor.selection;\n        if (selection && slate.Range.isExpanded(selection)) {\n          slate.Editor.deleteFragment(editor);\n          return;\n        }\n      }\n    }, [attributes.onCompositionStart, editor]),\n    onCopy: React.useCallback(function (event) {\n      if (ReactEditor.hasSelectableTarget(editor, event.target) && !isEventHandled(event, attributes.onCopy) && !isDOMEventTargetInput(event)) {\n        event.preventDefault();\n        ReactEditor.setFragmentData(editor, event.clipboardData, 'copy');\n      }\n    }, [attributes.onCopy, editor]),\n    onCut: React.useCallback(function (event) {\n      if (!readOnly && ReactEditor.hasSelectableTarget(editor, event.target) && !isEventHandled(event, attributes.onCut) && !isDOMEventTargetInput(event)) {\n        event.preventDefault();\n        ReactEditor.setFragmentData(editor, event.clipboardData, 'cut');\n        var selection = editor.selection;\n        if (selection) {\n          if (slate.Range.isExpanded(selection)) {\n            slate.Editor.deleteFragment(editor);\n          } else {\n            var node = slate.Node.parent(editor, selection.anchor.path);\n            if (slate.Editor.isVoid(editor, node)) {\n              slate.Transforms[\"delete\"](editor);\n            }\n          }\n        }\n      }\n    }, [readOnly, editor, attributes.onCut]),\n    onDragOver: React.useCallback(function (event) {\n      if (ReactEditor.hasTarget(editor, event.target) && !isEventHandled(event, attributes.onDragOver)) {\n        // Only when the target is void, call `preventDefault` to signal\n        // that drops are allowed. Editable content is droppable by\n        // default, and calling `preventDefault` hides the cursor.\n        var node = ReactEditor.toSlateNode(editor, event.target);\n        if (slate.Element.isElement(node) && slate.Editor.isVoid(editor, node)) {\n          event.preventDefault();\n        }\n      }\n    }, [attributes.onDragOver, editor]),\n    onDragStart: React.useCallback(function (event) {\n      if (!readOnly && ReactEditor.hasTarget(editor, event.target) && !isEventHandled(event, attributes.onDragStart)) {\n        var node = ReactEditor.toSlateNode(editor, event.target);\n        var path = ReactEditor.findPath(editor, node);\n        var voidMatch = slate.Element.isElement(node) && slate.Editor.isVoid(editor, node) || slate.Editor[\"void\"](editor, {\n          at: path,\n          voids: true\n        });\n        // If starting a drag on a void node, make sure it is selected\n        // so that it shows up in the selection's fragment.\n        if (voidMatch) {\n          var range = slate.Editor.range(editor, path);\n          slate.Transforms.select(editor, range);\n        }\n        state.isDraggingInternally = true;\n        ReactEditor.setFragmentData(editor, event.dataTransfer, 'drag');\n      }\n    }, [readOnly, editor, attributes.onDragStart, state]),\n    onDrop: React.useCallback(function (event) {\n      if (!readOnly && ReactEditor.hasTarget(editor, event.target) && !isEventHandled(event, attributes.onDrop)) {\n        event.preventDefault();\n        // Keep a reference to the dragged range before updating selection\n        var draggedRange = editor.selection;\n        // Find the range where the drop happened\n        var range = ReactEditor.findEventRange(editor, event);\n        var data = event.dataTransfer;\n        slate.Transforms.select(editor, range);\n        if (state.isDraggingInternally) {\n          if (draggedRange && !slate.Range.equals(draggedRange, range) && !slate.Editor[\"void\"](editor, {\n            at: range,\n            voids: true\n          })) {\n            slate.Transforms[\"delete\"](editor, {\n              at: draggedRange\n            });\n          }\n        }\n        ReactEditor.insertData(editor, data);\n        // When dragging from another source into the editor, it's possible\n        // that the current editor does not have focus.\n        if (!ReactEditor.isFocused(editor)) {\n          ReactEditor.focus(editor);\n        }\n      }\n    }, [readOnly, editor, attributes.onDrop, state]),\n    onDragEnd: React.useCallback(function (event) {\n      if (!readOnly && state.isDraggingInternally && attributes.onDragEnd && ReactEditor.hasTarget(editor, event.target)) {\n        attributes.onDragEnd(event);\n      }\n    }, [readOnly, state, attributes, editor]),\n    onFocus: React.useCallback(function (event) {\n      if (!readOnly && !state.isUpdatingSelection && ReactEditor.hasEditableTarget(editor, event.target) && !isEventHandled(event, attributes.onFocus)) {\n        var el = ReactEditor.toDOMNode(editor, editor);\n        var root = ReactEditor.findDocumentOrShadowRoot(editor);\n        state.latestElement = root.activeElement;\n        // COMPAT: If the editor has nested editable elements, the focus\n        // can go to them. In Firefox, this must be prevented because it\n        // results in issues with keyboard navigation. (2017/03/30)\n        if (slateDom.IS_FIREFOX && event.target !== el) {\n          el.focus();\n          return;\n        }\n        slateDom.IS_FOCUSED.set(editor, true);\n      }\n    }, [readOnly, state, editor, attributes.onFocus]),\n    onKeyDown: React.useCallback(function (event) {\n      if (!readOnly && ReactEditor.hasEditableTarget(editor, event.target)) {\n        var _androidInputManagerR5;\n        (_androidInputManagerR5 = androidInputManagerRef.current) === null || _androidInputManagerR5 === void 0 || _androidInputManagerR5.handleKeyDown(event);\n        var nativeEvent = event.nativeEvent;\n        // COMPAT: The composition end event isn't fired reliably in all browsers,\n        // so we sometimes might end up stuck in a composition state even though we\n        // aren't composing any more.\n        if (ReactEditor.isComposing(editor) && nativeEvent.isComposing === false) {\n          slateDom.IS_COMPOSING.set(editor, false);\n          setIsComposing(false);\n        }\n        if (isEventHandled(event, attributes.onKeyDown) || ReactEditor.isComposing(editor)) {\n          return;\n        }\n        var selection = editor.selection;\n        var element = editor.children[selection !== null ? selection.focus.path[0] : 0];\n        var isRTL = getDirection(slate.Node.string(element)) === 'rtl';\n        // COMPAT: Since we prevent the default behavior on\n        // `beforeinput` events, the browser doesn't think there's ever\n        // any history stack to undo or redo, so we have to manage these\n        // hotkeys ourselves. (2019/11/06)\n        if (slateDom.Hotkeys.isRedo(nativeEvent)) {\n          event.preventDefault();\n          var maybeHistoryEditor = editor;\n          if (typeof maybeHistoryEditor.redo === 'function') {\n            maybeHistoryEditor.redo();\n          }\n          return;\n        }\n        if (slateDom.Hotkeys.isUndo(nativeEvent)) {\n          event.preventDefault();\n          var _maybeHistoryEditor = editor;\n          if (typeof _maybeHistoryEditor.undo === 'function') {\n            _maybeHistoryEditor.undo();\n          }\n          return;\n        }\n        // COMPAT: Certain browsers don't handle the selection updates\n        // properly. In Chrome, the selection isn't properly extended.\n        // And in Firefox, the selection isn't properly collapsed.\n        // (2017/10/17)\n        if (slateDom.Hotkeys.isMoveLineBackward(nativeEvent)) {\n          event.preventDefault();\n          slate.Transforms.move(editor, {\n            unit: 'line',\n            reverse: true\n          });\n          return;\n        }\n        if (slateDom.Hotkeys.isMoveLineForward(nativeEvent)) {\n          event.preventDefault();\n          slate.Transforms.move(editor, {\n            unit: 'line'\n          });\n          return;\n        }\n        if (slateDom.Hotkeys.isExtendLineBackward(nativeEvent)) {\n          event.preventDefault();\n          slate.Transforms.move(editor, {\n            unit: 'line',\n            edge: 'focus',\n            reverse: true\n          });\n          return;\n        }\n        if (slateDom.Hotkeys.isExtendLineForward(nativeEvent)) {\n          event.preventDefault();\n          slate.Transforms.move(editor, {\n            unit: 'line',\n            edge: 'focus'\n          });\n          return;\n        }\n        // COMPAT: If a void node is selected, or a zero-width text node\n        // adjacent to an inline is selected, we need to handle these\n        // hotkeys manually because browsers won't be able to skip over\n        // the void node with the zero-width space not being an empty\n        // string.\n        if (slateDom.Hotkeys.isMoveBackward(nativeEvent)) {\n          event.preventDefault();\n          if (selection && slate.Range.isCollapsed(selection)) {\n            slate.Transforms.move(editor, {\n              reverse: !isRTL\n            });\n          } else {\n            slate.Transforms.collapse(editor, {\n              edge: isRTL ? 'end' : 'start'\n            });\n          }\n          return;\n        }\n        if (slateDom.Hotkeys.isMoveForward(nativeEvent)) {\n          event.preventDefault();\n          if (selection && slate.Range.isCollapsed(selection)) {\n            slate.Transforms.move(editor, {\n              reverse: isRTL\n            });\n          } else {\n            slate.Transforms.collapse(editor, {\n              edge: isRTL ? 'start' : 'end'\n            });\n          }\n          return;\n        }\n        if (slateDom.Hotkeys.isMoveWordBackward(nativeEvent)) {\n          event.preventDefault();\n          if (selection && slate.Range.isExpanded(selection)) {\n            slate.Transforms.collapse(editor, {\n              edge: 'focus'\n            });\n          }\n          slate.Transforms.move(editor, {\n            unit: 'word',\n            reverse: !isRTL\n          });\n          return;\n        }\n        if (slateDom.Hotkeys.isMoveWordForward(nativeEvent)) {\n          event.preventDefault();\n          if (selection && slate.Range.isExpanded(selection)) {\n            slate.Transforms.collapse(editor, {\n              edge: 'focus'\n            });\n          }\n          slate.Transforms.move(editor, {\n            unit: 'word',\n            reverse: isRTL\n          });\n          return;\n        }\n        // COMPAT: Certain browsers don't support the `beforeinput` event, so we\n        // fall back to guessing at the input intention for hotkeys.\n        // COMPAT: In iOS, some of these hotkeys are handled in the\n        if (!slateDom.HAS_BEFORE_INPUT_SUPPORT) {\n          // We don't have a core behavior for these, but they change the\n          // DOM if we don't prevent them, so we have to.\n          if (slateDom.Hotkeys.isBold(nativeEvent) || slateDom.Hotkeys.isItalic(nativeEvent) || slateDom.Hotkeys.isTransposeCharacter(nativeEvent)) {\n            event.preventDefault();\n            return;\n          }\n          if (slateDom.Hotkeys.isSoftBreak(nativeEvent)) {\n            event.preventDefault();\n            slate.Editor.insertSoftBreak(editor);\n            return;\n          }\n          if (slateDom.Hotkeys.isSplitBlock(nativeEvent)) {\n            event.preventDefault();\n            slate.Editor.insertBreak(editor);\n            return;\n          }\n          if (slateDom.Hotkeys.isDeleteBackward(nativeEvent)) {\n            event.preventDefault();\n            if (selection && slate.Range.isExpanded(selection)) {\n              slate.Editor.deleteFragment(editor, {\n                direction: 'backward'\n              });\n            } else {\n              slate.Editor.deleteBackward(editor);\n            }\n            return;\n          }\n          if (slateDom.Hotkeys.isDeleteForward(nativeEvent)) {\n            event.preventDefault();\n            if (selection && slate.Range.isExpanded(selection)) {\n              slate.Editor.deleteFragment(editor, {\n                direction: 'forward'\n              });\n            } else {\n              slate.Editor.deleteForward(editor);\n            }\n            return;\n          }\n          if (slateDom.Hotkeys.isDeleteLineBackward(nativeEvent)) {\n            event.preventDefault();\n            if (selection && slate.Range.isExpanded(selection)) {\n              slate.Editor.deleteFragment(editor, {\n                direction: 'backward'\n              });\n            } else {\n              slate.Editor.deleteBackward(editor, {\n                unit: 'line'\n              });\n            }\n            return;\n          }\n          if (slateDom.Hotkeys.isDeleteLineForward(nativeEvent)) {\n            event.preventDefault();\n            if (selection && slate.Range.isExpanded(selection)) {\n              slate.Editor.deleteFragment(editor, {\n                direction: 'forward'\n              });\n            } else {\n              slate.Editor.deleteForward(editor, {\n                unit: 'line'\n              });\n            }\n            return;\n          }\n          if (slateDom.Hotkeys.isDeleteWordBackward(nativeEvent)) {\n            event.preventDefault();\n            if (selection && slate.Range.isExpanded(selection)) {\n              slate.Editor.deleteFragment(editor, {\n                direction: 'backward'\n              });\n            } else {\n              slate.Editor.deleteBackward(editor, {\n                unit: 'word'\n              });\n            }\n            return;\n          }\n          if (slateDom.Hotkeys.isDeleteWordForward(nativeEvent)) {\n            event.preventDefault();\n            if (selection && slate.Range.isExpanded(selection)) {\n              slate.Editor.deleteFragment(editor, {\n                direction: 'forward'\n              });\n            } else {\n              slate.Editor.deleteForward(editor, {\n                unit: 'word'\n              });\n            }\n            return;\n          }\n        } else {\n          if (slateDom.IS_CHROME || slateDom.IS_WEBKIT) {\n            // COMPAT: Chrome and Safari support `beforeinput` event but do not fire\n            // an event when deleting backwards in a selected void inline node\n            if (selection && (slateDom.Hotkeys.isDeleteBackward(nativeEvent) || slateDom.Hotkeys.isDeleteForward(nativeEvent)) && slate.Range.isCollapsed(selection)) {\n              var currentNode = slate.Node.parent(editor, selection.anchor.path);\n              if (slate.Element.isElement(currentNode) && slate.Editor.isVoid(editor, currentNode) && (slate.Editor.isInline(editor, currentNode) || slate.Editor.isBlock(editor, currentNode))) {\n                event.preventDefault();\n                slate.Editor.deleteBackward(editor, {\n                  unit: 'block'\n                });\n                return;\n              }\n            }\n          }\n        }\n      }\n    }, [readOnly, editor, attributes.onKeyDown]),\n    onPaste: React.useCallback(function (event) {\n      if (!readOnly && ReactEditor.hasEditableTarget(editor, event.target) && !isEventHandled(event, attributes.onPaste)) {\n        // COMPAT: Certain browsers don't support the `beforeinput` event, so we\n        // fall back to React's `onPaste` here instead.\n        // COMPAT: Firefox, Chrome and Safari don't emit `beforeinput` events\n        // when \"paste without formatting\" is used, so fallback. (2020/02/20)\n        // COMPAT: Safari InputEvents generated by pasting won't include\n        // application/x-slate-fragment items, so use the\n        // ClipboardEvent here. (2023/03/15)\n        if (!slateDom.HAS_BEFORE_INPUT_SUPPORT || slateDom.isPlainTextOnlyPaste(event.nativeEvent) || slateDom.IS_WEBKIT) {\n          event.preventDefault();\n          ReactEditor.insertData(editor, event.clipboardData);\n        }\n      }\n    }, [readOnly, editor, attributes.onPaste])\n  }), /*#__PURE__*/React.createElement(Children, {\n    decorations: decorations,\n    node: editor,\n    renderElement: renderElement,\n    renderPlaceholder: renderPlaceholder,\n    renderLeaf: renderLeaf,\n    selection: editor.selection\n  }))))));\n});\n/**\n * The default placeholder element\n */\nvar DefaultPlaceholder = function DefaultPlaceholder(_ref2) {\n  var attributes = _ref2.attributes,\n    children = _ref2.children;\n  return (\n    /*#__PURE__*/\n    // COMPAT: Artificially add a line-break to the end on the placeholder element\n    // to prevent Android IMEs to pick up its content in autocorrect and to auto-capitalize the first letter\n    React.createElement(\"span\", _objectSpread({}, attributes), children, slateDom.IS_ANDROID && /*#__PURE__*/React.createElement(\"br\", null))\n  );\n};\n/**\n * A default memoized decorate function.\n */\nvar defaultDecorate = function defaultDecorate() {\n  return [];\n};\n/**\n * A default implement to scroll dom range into view.\n */\nvar defaultScrollSelectionIntoView = function defaultScrollSelectionIntoView(editor, domRange) {\n  // This was affecting the selection of multiple blocks and dragging behavior,\n  // so enabled only if the selection has been collapsed.\n  if (domRange.getBoundingClientRect && (!editor.selection || editor.selection && slate.Range.isCollapsed(editor.selection))) {\n    var leafEl = domRange.startContainer.parentElement;\n    leafEl.getBoundingClientRect = domRange.getBoundingClientRect.bind(domRange);\n    scrollIntoView(leafEl, {\n      scrollMode: 'if-needed'\n    });\n    // @ts-expect-error an unorthodox delete D:\n    delete leafEl.getBoundingClientRect;\n  }\n};\n/**\n * Check if an event is overrided by a handler.\n */\nvar isEventHandled = function isEventHandled(event, handler) {\n  if (!handler) {\n    return false;\n  }\n  // The custom event handler may return a boolean to specify whether the event\n  // shall be treated as being handled or not.\n  var shouldTreatEventAsHandled = handler(event);\n  if (shouldTreatEventAsHandled != null) {\n    return shouldTreatEventAsHandled;\n  }\n  return event.isDefaultPrevented() || event.isPropagationStopped();\n};\n/**\n * Check if the event's target is an input element\n */\nvar isDOMEventTargetInput = function isDOMEventTargetInput(event) {\n  return slateDom.isDOMNode(event.target) && (event.target instanceof HTMLInputElement || event.target instanceof HTMLTextAreaElement);\n};\n/**\n * Check if a DOM event is overrided by a handler.\n */\nvar isDOMEventHandled = function isDOMEventHandled(event, handler) {\n  if (!handler) {\n    return false;\n  }\n  // The custom event handler may return a boolean to specify whether the event\n  // shall be treated as being handled or not.\n  var shouldTreatEventAsHandled = handler(event);\n  if (shouldTreatEventAsHandled != null) {\n    return shouldTreatEventAsHandled;\n  }\n  return event.defaultPrevented;\n};\n\n/**\n * A React context for sharing the `focused` state of the editor.\n */\nvar FocusedContext = /*#__PURE__*/React.createContext(false);\n/**\n * Get the current `focused` state of the editor.\n */\nvar useFocused = function useFocused() {\n  return React.useContext(FocusedContext);\n};\n\nfunction isError(error) {\n  return error instanceof Error;\n}\n/**\n * A React context for sharing the editor selector context in a way to control rerenders\n */\nvar SlateSelectorContext = /*#__PURE__*/React.createContext({});\nvar refEquality = function refEquality(a, b) {\n  return a === b;\n};\n/**\n * use redux style selectors to prevent rerendering on every keystroke.\n * Bear in mind rerendering can only prevented if the returned value is a value type or for reference types (e.g. objects and arrays) add a custom equality function.\n *\n * Example:\n * ```\n *  const isSelectionActive = useSlateSelector(editor => Boolean(editor.selection));\n * ```\n */\nfunction useSlateSelector(selector) {\n  var equalityFn = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : refEquality;\n  var _useReducer = React.useReducer(function (s) {\n      return s + 1;\n    }, 0),\n    _useReducer2 = _slicedToArray(_useReducer, 2),\n    forceRender = _useReducer2[1];\n  var context = React.useContext(SlateSelectorContext);\n  if (!context) {\n    throw new Error(\"The `useSlateSelector` hook must be used inside the <Slate> component's context.\");\n  }\n  var getSlate = context.getSlate,\n    addEventListener = context.addEventListener;\n  var latestSubscriptionCallbackError = React.useRef();\n  var latestSelector = React.useRef(function () {\n    return null;\n  });\n  var latestSelectedState = React.useRef(null);\n  var selectedState;\n  try {\n    if (selector !== latestSelector.current || latestSubscriptionCallbackError.current) {\n      selectedState = selector(getSlate());\n    } else {\n      selectedState = latestSelectedState.current;\n    }\n  } catch (err) {\n    if (latestSubscriptionCallbackError.current && isError(err)) {\n      err.message += \"\\nThe error may be correlated with this previous error:\\n\".concat(latestSubscriptionCallbackError.current.stack, \"\\n\\n\");\n    }\n    throw err;\n  }\n  useIsomorphicLayoutEffect(function () {\n    latestSelector.current = selector;\n    latestSelectedState.current = selectedState;\n    latestSubscriptionCallbackError.current = undefined;\n  });\n  useIsomorphicLayoutEffect(function () {\n    function checkForUpdates() {\n      try {\n        var newSelectedState = latestSelector.current(getSlate());\n        if (equalityFn(newSelectedState, latestSelectedState.current)) {\n          return;\n        }\n        latestSelectedState.current = newSelectedState;\n      } catch (err) {\n        // we ignore all errors here, since when the component\n        // is re-rendered, the selectors are called again, and\n        // will throw again, if neither props nor store state\n        // changed\n        if (err instanceof Error) {\n          latestSubscriptionCallbackError.current = err;\n        } else {\n          latestSubscriptionCallbackError.current = new Error(String(err));\n        }\n      }\n      forceRender();\n    }\n    var unsubscribe = addEventListener(checkForUpdates);\n    checkForUpdates();\n    return function () {\n      return unsubscribe();\n    };\n  },\n  // don't rerender on equalityFn change since we want to be able to define it inline\n  [addEventListener, getSlate]);\n  return selectedState;\n}\n/**\n * Create selector context with editor updating on every editor change\n */\nfunction useSelectorContext(editor) {\n  var eventListeners = React.useRef([]).current;\n  var slateRef = React.useRef({\n    editor: editor\n  }).current;\n  var onChange = React.useCallback(function (editor) {\n    slateRef.editor = editor;\n    eventListeners.forEach(function (listener) {\n      return listener(editor);\n    });\n  }, [eventListeners, slateRef]);\n  var selectorContext = React.useMemo(function () {\n    return {\n      getSlate: function getSlate() {\n        return slateRef.editor;\n      },\n      addEventListener: function addEventListener(callback) {\n        eventListeners.push(callback);\n        return function () {\n          eventListeners.splice(eventListeners.indexOf(callback), 1);\n        };\n      }\n    };\n  }, [eventListeners, slateRef]);\n  return {\n    selectorContext: selectorContext,\n    onChange: onChange\n  };\n}\n\nvar REACT_MAJOR_VERSION = parseInt(React.version.split('.')[0], 10);\n\nvar _excluded = [\"editor\", \"children\", \"onChange\", \"onSelectionChange\", \"onValueChange\", \"initialValue\"];\n/**\n * A wrapper around the provider to handle `onChange` events, because the editor\n * is a mutable singleton so it won't ever register as \"changed\" otherwise.\n */\nvar Slate = function Slate(props) {\n  var editor = props.editor,\n    children = props.children,\n    onChange = props.onChange,\n    onSelectionChange = props.onSelectionChange,\n    onValueChange = props.onValueChange,\n    initialValue = props.initialValue,\n    rest = _objectWithoutProperties(props, _excluded);\n  var _React$useState = React.useState(function () {\n      if (!slate.Node.isNodeList(initialValue)) {\n        throw new Error(\"[Slate] initialValue is invalid! Expected a list of elements but got: \".concat(slate.Scrubber.stringify(initialValue)));\n      }\n      if (!slate.Editor.isEditor(editor)) {\n        throw new Error(\"[Slate] editor is invalid! You passed: \".concat(slate.Scrubber.stringify(editor)));\n      }\n      editor.children = initialValue;\n      Object.assign(editor, rest);\n      return {\n        v: 0,\n        editor: editor\n      };\n    }),\n    _React$useState2 = _slicedToArray(_React$useState, 2),\n    context = _React$useState2[0],\n    setContext = _React$useState2[1];\n  var _useSelectorContext = useSelectorContext(editor),\n    selectorContext = _useSelectorContext.selectorContext,\n    handleSelectorChange = _useSelectorContext.onChange;\n  var onContextChange = React.useCallback(function (options) {\n    var _options$operation;\n    if (onChange) {\n      onChange(editor.children);\n    }\n    switch (options === null || options === void 0 || (_options$operation = options.operation) === null || _options$operation === void 0 ? void 0 : _options$operation.type) {\n      case 'set_selection':\n        onSelectionChange === null || onSelectionChange === void 0 || onSelectionChange(editor.selection);\n        break;\n      default:\n        onValueChange === null || onValueChange === void 0 || onValueChange(editor.children);\n    }\n    setContext(function (prevContext) {\n      return {\n        v: prevContext.v + 1,\n        editor: editor\n      };\n    });\n    handleSelectorChange(editor);\n  }, [editor, handleSelectorChange, onChange, onSelectionChange, onValueChange]);\n  React.useEffect(function () {\n    slateDom.EDITOR_TO_ON_CHANGE.set(editor, onContextChange);\n    return function () {\n      slateDom.EDITOR_TO_ON_CHANGE.set(editor, function () {});\n    };\n  }, [editor, onContextChange]);\n  var _useState = React.useState(ReactEditor.isFocused(editor)),\n    _useState2 = _slicedToArray(_useState, 2),\n    isFocused = _useState2[0],\n    setIsFocused = _useState2[1];\n  React.useEffect(function () {\n    setIsFocused(ReactEditor.isFocused(editor));\n  }, [editor]);\n  useIsomorphicLayoutEffect(function () {\n    var fn = function fn() {\n      return setIsFocused(ReactEditor.isFocused(editor));\n    };\n    if (REACT_MAJOR_VERSION >= 17) {\n      // In React >= 17 onFocus and onBlur listen to the focusin and focusout events during the bubbling phase.\n      // Therefore in order for <Editable />'s handlers to run first, which is necessary for ReactEditor.isFocused(editor)\n      // to return the correct value, we have to listen to the focusin and focusout events without useCapture here.\n      document.addEventListener('focusin', fn);\n      document.addEventListener('focusout', fn);\n      return function () {\n        document.removeEventListener('focusin', fn);\n        document.removeEventListener('focusout', fn);\n      };\n    } else {\n      document.addEventListener('focus', fn, true);\n      document.addEventListener('blur', fn, true);\n      return function () {\n        document.removeEventListener('focus', fn, true);\n        document.removeEventListener('blur', fn, true);\n      };\n    }\n  }, []);\n  return /*#__PURE__*/React.createElement(SlateSelectorContext.Provider, {\n    value: selectorContext\n  }, /*#__PURE__*/React.createElement(SlateContext.Provider, {\n    value: context\n  }, /*#__PURE__*/React.createElement(EditorContext.Provider, {\n    value: context.editor\n  }, /*#__PURE__*/React.createElement(FocusedContext.Provider, {\n    value: isFocused\n  }, children))));\n};\n\n/**\n * Get the current editor object from the React context.\n * @deprecated Use useSlateStatic instead.\n */\nvar useEditor = function useEditor() {\n  var editor = React.useContext(EditorContext);\n  if (!editor) {\n    throw new Error(\"The `useEditor` hook must be used inside the <Slate> component's context.\");\n  }\n  return editor;\n};\n\n/**\n * Get the current slate selection.\n * Only triggers a rerender when the selection actually changes\n */\nvar useSlateSelection = function useSlateSelection() {\n  return useSlateSelector(function (editor) {\n    return editor.selection;\n  }, isSelectionEqual);\n};\nvar isSelectionEqual = function isSelectionEqual(a, b) {\n  if (!a && !b) return true;\n  if (!a || !b) return false;\n  return slate.Range.equals(a, b);\n};\n\n/**\n * `withReact` adds React and DOM specific behaviors to the editor.\n *\n * If you are using TypeScript, you must extend Slate's CustomTypes to use\n * this plugin.\n *\n * See https://docs.slatejs.org/concepts/11-typescript to learn how.\n */\nvar withReact = function withReact(editor) {\n  var clipboardFormatKey = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'x-slate-fragment';\n  var e = editor;\n  e = slateDom.withDOM(e, clipboardFormatKey);\n  var _e = e,\n    onChange = _e.onChange;\n  e.onChange = function (options) {\n    // COMPAT: React < 18 doesn't batch `setState` hook calls, which means\n    // that the children and selection can get out of sync for one render\n    // pass. So we have to use this unstable API to ensure it batches them.\n    // (2019/12/03)\n    // https://github.com/facebook/react/issues/14259#issuecomment-439702367\n    var maybeBatchUpdates = REACT_MAJOR_VERSION < 18 ? ReactDOM.unstable_batchedUpdates : function (callback) {\n      return callback();\n    };\n    maybeBatchUpdates(function () {\n      onChange(options);\n    });\n  };\n  return e;\n};\n\nObject.defineProperty(exports, \"NODE_TO_INDEX\", ({\n\tenumerable: true,\n\tget: function () { return slateDom.NODE_TO_INDEX; }\n}));\nObject.defineProperty(exports, \"NODE_TO_PARENT\", ({\n\tenumerable: true,\n\tget: function () { return slateDom.NODE_TO_PARENT; }\n}));\nexports.DefaultElement = DefaultElement;\nexports.DefaultLeaf = DefaultLeaf;\nexports.DefaultPlaceholder = DefaultPlaceholder;\nexports.Editable = Editable;\nexports.ReactEditor = ReactEditor;\nexports.Slate = Slate;\nexports.useComposing = useComposing;\nexports.useEditor = useEditor;\nexports.useFocused = useFocused;\nexports.useReadOnly = useReadOnly;\nexports.useSelected = useSelected;\nexports.useSlate = useSlate;\nexports.useSlateSelection = useSlateSelection;\nexports.useSlateSelector = useSlateSelector;\nexports.useSlateStatic = useSlateStatic;\nexports.useSlateWithV = useSlateWithV;\nexports.withReact = withReact;\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../../../node_modules/.pnpm/slate-react@0.112.1_react-dom@19.0.0_react@19.0.0__react@19.0.0_slate-dom@0.112.2_slate@0.112.0__slate@0.112.0/node_modules/slate-react/dist/index.js\n");

/***/ })

};
;